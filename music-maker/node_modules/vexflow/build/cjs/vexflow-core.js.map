{"version":3,"file":"vexflow-core.js","mappings":"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","sources":["webpack://VexFlow/webpack/universalModuleDefinition","webpack://VexFlow/webpack/bootstrap","webpack://VexFlow/webpack/runtime/define property getters","webpack://VexFlow/webpack/runtime/global","webpack://VexFlow/webpack/runtime/hasOwnProperty shorthand","webpack://VexFlow/./src/typeguard.ts","webpack://VexFlow/./src/util.ts","webpack://VexFlow/./src/fraction.ts","webpack://VexFlow/./src/metrics.ts","webpack://VexFlow/./src/boundingbox.ts","webpack://VexFlow/./src/font.ts","webpack://VexFlow/./src/registry.ts","webpack://VexFlow/./src/element.ts","webpack://VexFlow/./src/modifier.ts","webpack://VexFlow/./src/glyphs.ts","webpack://VexFlow/./src/music.ts","webpack://VexFlow/./src/tables.ts","webpack://VexFlow/./src/accidental.ts","webpack://VexFlow/./src/stem.ts","webpack://VexFlow/./src/annotation.ts","webpack://VexFlow/./src/articulation.ts","webpack://VexFlow/./src/rendercontext.ts","webpack://VexFlow/./src/tickable.ts","webpack://VexFlow/./src/note.ts","webpack://VexFlow/./src/stavemodifier.ts","webpack://VexFlow/./src/stavebarline.ts","webpack://VexFlow/./src/chordsymbol.ts","webpack://VexFlow/./src/barnote.ts","webpack://VexFlow/./src/bend.ts","webpack://VexFlow/./src/dot.ts","webpack://VexFlow/./src/frethandfinger.ts","webpack://VexFlow/./src/notehead.ts","webpack://VexFlow/./src/flag.ts","webpack://VexFlow/./src/stemmablenote.ts","webpack://VexFlow/./src/stavenote.ts","webpack://VexFlow/./src/stavetie.ts","webpack://VexFlow/./src/tabtie.ts","webpack://VexFlow/./src/voice.ts","webpack://VexFlow/./src/gracenotegroup.ts","webpack://VexFlow/./src/notesubgroup.ts","webpack://VexFlow/./src/ornament.ts","webpack://VexFlow/./src/parenthesis.ts","webpack://VexFlow/./src/web.ts","webpack://VexFlow/./src/canvascontext.ts","webpack://VexFlow/./src/svgcontext.ts","webpack://VexFlow/./src/renderer.ts","webpack://VexFlow/./src/textnote.ts","webpack://VexFlow/./src/stavevolta.ts","webpack://VexFlow/./src/stringnumber.ts","webpack://VexFlow/./src/strokes.ts","webpack://VexFlow/./src/vibrato.ts","webpack://VexFlow/./src/modifiercontext.ts","webpack://VexFlow/./src/clef.ts","webpack://VexFlow/./src/keysignature.ts","webpack://VexFlow/./src/staverepetition.ts","webpack://VexFlow/./src/stavesection.ts","webpack://VexFlow/./src/stavetempo.ts","webpack://VexFlow/./src/stavetext.ts","webpack://VexFlow/./src/timesignature.ts","webpack://VexFlow/./src/stave.ts","webpack://VexFlow/./src/staveconnector.ts","webpack://VexFlow/./src/tickcontext.ts","webpack://VexFlow/./src/formatter.ts","webpack://VexFlow/./src/tuplet.ts","webpack://VexFlow/./src/beam.ts","webpack://VexFlow/./src/clefnote.ts","webpack://VexFlow/./src/crescendo.ts","webpack://VexFlow/./src/curve.ts","webpack://VexFlow/./src/parser.ts","webpack://VexFlow/./src/easyscore.ts","webpack://VexFlow/./src/ghostnote.ts","webpack://VexFlow/./src/glyphnote.ts","webpack://VexFlow/./src/gracenote.ts","webpack://VexFlow/./src/keysignote.ts","webpack://VexFlow/./src/multimeasurerest.ts","webpack://VexFlow/./src/pedalmarking.ts","webpack://VexFlow/./src/repeatnote.ts","webpack://VexFlow/./src/staveline.ts","webpack://VexFlow/./src/system.ts","webpack://VexFlow/./src/tabnote.ts","webpack://VexFlow/./src/tabstave.ts","webpack://VexFlow/./src/textbracket.ts","webpack://VexFlow/./src/textdynamics.ts","webpack://VexFlow/./src/timesignote.ts","webpack://VexFlow/./src/vibratobracket.ts","webpack://VexFlow/./src/factory.ts","webpack://VexFlow/./src/stavehairpin.ts","webpack://VexFlow/./src/tabslide.ts","webpack://VexFlow/./src/tuning.ts","webpack://VexFlow/./src/vexflow.ts","webpack://VexFlow/./src/version.ts","webpack://VexFlow/./src/gracetabnote.ts","webpack://VexFlow/./src/keymanager.ts","webpack://VexFlow/./src/tremolo.ts","webpack://VexFlow/./entry/vexflow-core.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"VexFlow\"] = factory();\n\telse\n\t\troot[\"VexFlow\"] = factory();\n})((typeof window !== 'undefined' ? window : typeof globalThis !== 'undefined' ? globalThis : this), () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * Use instead of `instanceof` as a more flexible type guard.\n * @param obj check if this object's CATEGORY matches the provided category.\n * @param category a string representing a category of VexFlow objects.\n * @param checkAncestors defaults to `true`, so we walk up the prototype chain to look for a matching `CATEGORY`.\n *        If `false`, we do not check the superclass or other ancestors.\n * @returns true if `obj` has a static `CATEGORY` property that matches `category`.\n */\nexport function isCategory(obj, category, checkAncestors = true) {\n    // obj is undefined, a number, a primitive string, or null.\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    // `obj.constructor` is a reference to the constructor function that created the `obj` instance.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n    let constructorFcn = obj.constructor;\n    // Check if the object's static .CATEGORY matches the provided category.\n    if (checkAncestors) {\n        // Walk up the prototype chain to look for a matching obj.constructor.CATEGORY.\n        while (obj !== null) {\n            constructorFcn = obj.constructor;\n            if ('CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category) {\n                return true;\n            }\n            obj = Object.getPrototypeOf(obj);\n        }\n        return false;\n    }\n    else {\n        // Do not walk up the prototype chain. Just check this particular object's static .CATEGORY string.\n        return 'CATEGORY' in constructorFcn && constructorFcn.CATEGORY === category;\n    }\n}\nexport const isAccidental = (obj) => isCategory(obj, Category.Accidental);\nexport const isAnnotation = (obj) => isCategory(obj, Category.Annotation);\nexport const isBarline = (obj) => isCategory(obj, Category.Barline);\nexport const isDot = (obj) => isCategory(obj, Category.Dot);\nexport const isGraceNote = (obj) => isCategory(obj, Category.GraceNote);\nexport const isGraceNoteGroup = (obj) => isCategory(obj, Category.GraceNoteGroup);\nexport const isNote = (obj) => isCategory(obj, Category.Note);\nexport const isRenderContext = (obj) => isCategory(obj, Category.RenderContext);\nexport const isStaveNote = (obj) => isCategory(obj, Category.StaveNote);\nexport const isStemmableNote = (obj) => isCategory(obj, Category.StemmableNote);\nexport const isTabNote = (obj) => isCategory(obj, Category.TabNote);\n// 'const' enums are erased by the TypeScript compiler. The string values are inlined at all the use sites.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#const-enums\nexport var Category;\n(function (Category) {\n    Category[\"Accidental\"] = \"Accidental\";\n    Category[\"Annotation\"] = \"Annotation\";\n    Category[\"Articulation\"] = \"Articulation\";\n    Category[\"Barline\"] = \"Barline\";\n    Category[\"BarNote\"] = \"BarNote\";\n    Category[\"Beam\"] = \"Beam\";\n    Category[\"Bend\"] = \"Bend\";\n    Category[\"ChordSymbol\"] = \"ChordSymbol\";\n    Category[\"Clef\"] = \"Clef\";\n    Category[\"ClefNote\"] = \"ClefNote\";\n    Category[\"Crescendo\"] = \"Crescendo\";\n    Category[\"Curve\"] = \"Curve\";\n    Category[\"Dot\"] = \"Dot\";\n    Category[\"Element\"] = \"Element\";\n    Category[\"Flag\"] = \"Flag\";\n    Category[\"Fraction\"] = \"Fraction\";\n    Category[\"FretHandFinger\"] = \"FretHandFinger\";\n    Category[\"GhostNote\"] = \"GhostNote\";\n    Category[\"Glyph\"] = \"Glyph\";\n    Category[\"GlyphNote\"] = \"GlyphNote\";\n    Category[\"GraceNote\"] = \"GraceNote\";\n    Category[\"GraceNoteGroup\"] = \"GraceNoteGroup\";\n    Category[\"GraceTabNote\"] = \"GraceTabNote\";\n    Category[\"KeySignature\"] = \"KeySignature\";\n    Category[\"KeySigNote\"] = \"KeySigNote\";\n    Category[\"Modifier\"] = \"Modifier\";\n    Category[\"MultiMeasureRest\"] = \"MultiMeasureRest\";\n    Category[\"Note\"] = \"Note\";\n    Category[\"NoteHead\"] = \"NoteHead\";\n    Category[\"NoteSubGroup\"] = \"NoteSubGroup\";\n    Category[\"Ornament\"] = \"Ornament\";\n    Category[\"Parenthesis\"] = \"Parenthesis\";\n    Category[\"PedalMarking\"] = \"PedalMarking\";\n    Category[\"RenderContext\"] = \"RenderContext\";\n    Category[\"RepeatNote\"] = \"RepeatNote\";\n    Category[\"Repetition\"] = \"Repetition\";\n    Category[\"Stave\"] = \"Stave\";\n    Category[\"StaveConnector\"] = \"StaveConnector\";\n    Category[\"StaveHairpin\"] = \"StaveHairpin\";\n    Category[\"StaveLine\"] = \"StaveLine\";\n    Category[\"StaveModifier\"] = \"StaveModifier\";\n    Category[\"StaveNote\"] = \"StaveNote\";\n    Category[\"StaveSection\"] = \"StaveSection\";\n    Category[\"StaveTempo\"] = \"StaveTempo\";\n    Category[\"StaveText\"] = \"StaveText\";\n    Category[\"StaveTie\"] = \"StaveTie\";\n    Category[\"Stem\"] = \"Stem\";\n    Category[\"StemmableNote\"] = \"StemmableNote\";\n    Category[\"StringNumber\"] = \"StringNumber\";\n    Category[\"Stroke\"] = \"Stroke\";\n    Category[\"System\"] = \"System\";\n    Category[\"TabNote\"] = \"TabNote\";\n    Category[\"TabSlide\"] = \"TabSlide\";\n    Category[\"TabStave\"] = \"TabStave\";\n    Category[\"TabTie\"] = \"TabTie\";\n    Category[\"TextBracket\"] = \"TextBracket\";\n    Category[\"TextDynamics\"] = \"TextDynamics\";\n    Category[\"TextNote\"] = \"TextNote\";\n    Category[\"Tickable\"] = \"Tickable\";\n    Category[\"TimeSignature\"] = \"TimeSignature\";\n    Category[\"TimeSigNote\"] = \"TimeSigNote\";\n    Category[\"Tremolo\"] = \"Tremolo\";\n    Category[\"Tuplet\"] = \"Tuplet\";\n    Category[\"Vibrato\"] = \"Vibrato\";\n    Category[\"VibratoBracket\"] = \"VibratoBracket\";\n    Category[\"Voice\"] = \"Voice\";\n    Category[\"Volta\"] = \"Volta\";\n})(Category || (Category = {}));\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// Note: Keep this module free of imports to reduce the chance of circular dependencies.\n/** `RuntimeError` will be thrown by VexFlow classes in case of error. */\nexport class RuntimeError extends Error {\n    constructor(code, message = '') {\n        super('[RuntimeError] ' + code + ': ' + message);\n        this.code = code;\n    }\n}\n/** VexFlow can be used outside of the browser (e.g., Node) where `window` may not be defined. */\n// eslint-disable-next-line\nexport function globalObject() {\n    if (typeof globalThis !== 'undefined') {\n        return globalThis;\n    }\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    return Function('return this')();\n}\n/**\n * Check that `x` is of type `T` and not `undefined`.\n * If `x` is `undefined`, throw a RuntimeError with the optionally provided error code and message.\n */\nexport function defined(x, code = 'undefined', message = '') {\n    if (x === undefined) {\n        throw new RuntimeError(code, message);\n    }\n    return x;\n}\n/** Default log function sends all arguments to console. */\n// eslint-disable-next-line\nexport function log(block, ...args) {\n    if (!args)\n        return;\n    const line = Array.prototype.slice.call(args).join(' ');\n    globalObject().console.log(block + ': ' + line);\n}\n/** Dump warning to console. */\n// eslint-disable-next-line\nexport function warn(...args) {\n    const line = args.join(' ');\n    const err = new Error();\n    globalObject().console.log('Warning: ', line, err.stack);\n}\n/** Round number to nearest fractional value (`.5`, `.25`, etc.) */\nfunction roundN(x, n) {\n    return x % n >= n / 2 ? parseInt(`${x / n}`, 10) * n + n : parseInt(`${x / n}`, 10) * n;\n}\n/** Locate the mid point between stave lines. Returns a fractional line if a space. */\nexport function midLine(a, b) {\n    let midLine = b + (a - b) / 2;\n    if (midLine % 2 > 0) {\n        midLine = roundN(midLine * 10, 5) / 10;\n    }\n    return midLine;\n}\n/**\n * Used by various classes (e.g., SVGContext) to provide a\n * unique prefix to element names (or other keys in shared namespaces).\n */\nexport function prefix(text) {\n    return `vf-${text}`;\n}\n/**\n * @param s\n * @returns `s` with the first letter capitalized.\n */\nexport function upperFirst(s = '') {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n}\n/**\n * Convert an arbitrary angle in radians to the equivalent one in the range [0, pi).\n */\nexport function normalizeAngle(a) {\n    a = a % (2 * Math.PI);\n    if (a < 0) {\n        a += 2 * Math.PI;\n    }\n    return a;\n}\n/**\n * Return the sum of an array of numbers.\n */\nexport function sumArray(arr) {\n    return arr.reduce((a, b) => a + b, 0);\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// Moved from vex.ts to util.ts.\n/**\n * Take `arr` and return a new array consisting of the sorted, unique'd,\n * contents of arr. Does not modify `arr`.\n */\n/*\n  static sortAndUnique(arr: any[], cmp: any, eq: any): any[] {\n    if (arr.length > 1) {\n      const newArr = [];\n      let last;\n      arr.sort(cmp);\n\n      for (let i = 0; i < arr.length; ++i) {\n        if (i === 0 || !eq(arr[i], last)) {\n          newArr.push(arr[i]);\n        }\n        last = arr[i];\n      }\n\n      return newArr;\n    } else {\n      return [].concat(arr); //\n    }\n  }\n  */\n// Get the 2D Canvas context from DOM element with id `canvasId`.\n/*\n  static getCanvasContext(canvasId: string): RenderingContext {\n    if (!canvasId) {\n      throw new RuntimeError('BadArgument', 'Invalid canvas selector: ' + canvasId);\n    }\n\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n    if (!(canvas && canvas.getContext)) {\n      throw new RuntimeError('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');\n    }\n\n    return canvas.getContext('2d') as RenderingContext;\n  }\n  */\n/** Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds. */\n/*\n  static benchmark(s: any, f: any): void {\n    const startTime = new Date().getTime();\n    f();\n    const elapsed = new Date().getTime() - startTime;\n    log(s, elapsed + 'ms');\n  }\n  */\n// Get stack trace.\n/*\n  static stackTrace(): string | undefined {\n    const err = new Error();\n    return err.stack;\n  }\n  */\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// @author Joshua Koo / @zz85\n// @author @incompleteopus\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/** Fraction represents a rational number. */\nexport class Fraction {\n    static get CATEGORY() {\n        return Category.Fraction;\n    }\n    /**\n     * GCD: Greatest common divisor using the Euclidean algorithm.\n     * Note: GCD(0, 0) => 0 and GCD(0, n) => n.\n     */\n    static GCD(a, b) {\n        if (typeof a !== 'number' || Number.isNaN(a) || typeof b !== 'number' || Number.isNaN(b)) {\n            throw new RuntimeError('BadArgument', `Invalid numbers: ${a}, ${b}`);\n        }\n        let t;\n        while (b !== 0) {\n            t = b;\n            b = a % b;\n            a = t;\n        }\n        return a;\n    }\n    /** LCM: Lowest common multiple. */\n    static LCM(a, b) {\n        return (a * b) / Fraction.GCD(a, b);\n    }\n    /** Lowest common multiple for more than two numbers.\n     *\n     * Note that the `args` array will be manipulated and shortened recursively during\n     * computation.\n     */\n    static LCMM(args) {\n        if (args.length === 0) {\n            return 0;\n        }\n        else if (args.length === 1) {\n            return args[0];\n        }\n        else if (args.length === 2) {\n            return Fraction.LCM(args[0], args[1]);\n        }\n        else {\n            // args.shift() removes the first number.\n            // LCM the first number with the rest of the numbers.\n            return Fraction.LCM(args.shift(), Fraction.LCMM(args));\n        }\n    }\n    /** Set the numerator and denominator. */\n    constructor(numerator, denominator) {\n        this.numerator = 1;\n        this.denominator = 1;\n        this.set(numerator, denominator);\n    }\n    /** Set the numerator and denominator. */\n    set(numerator = 1, denominator = 1) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n        return this;\n    }\n    /** Return the value of the fraction. */\n    value() {\n        return this.numerator / this.denominator;\n    }\n    /** Simplify numerator and denominator using GCD. */\n    simplify() {\n        let u = this.numerator;\n        let d = this.denominator;\n        const gcd = Fraction.GCD(u, d);\n        u /= gcd;\n        d /= gcd;\n        if (d < 0) {\n            d = -d;\n            u = -u;\n        }\n        return this.set(u, d);\n    }\n    /** Add value of another fraction. */\n    add(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a + otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Subtract value of another fraction. */\n    subtract(param1 = 0, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        const lcm = Fraction.LCM(this.denominator, otherDenominator);\n        const a = lcm / this.denominator;\n        const b = lcm / otherDenominator;\n        const u = this.numerator * a - otherNumerator * b;\n        return this.set(u, lcm);\n    }\n    /** Multiply by value of another fraction. */\n    multiply(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);\n    }\n    /** Divide by value of another Fraction. */\n    divide(param1 = 1, param2 = 1) {\n        const [otherNumerator, otherDenominator] = getNumeratorAndDenominator(param1, param2);\n        return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);\n    }\n    /** Simplify both sides and check if they are equal. */\n    equals(compare) {\n        const a = Fraction.fractionA.copy(compare).simplify();\n        const b = Fraction.fractionB.copy(this).simplify();\n        return a.numerator === b.numerator && a.denominator === b.denominator;\n    }\n    /** Greater than operator. */\n    greaterThan(compare) {\n        const a = Fraction.fractionA.copy(this);\n        a.subtract(compare);\n        return a.numerator > 0;\n    }\n    /** Greater than or equals operator. */\n    greaterThanEquals(compare) {\n        const a = Fraction.fractionA.copy(this);\n        a.subtract(compare);\n        return a.numerator >= 0;\n    }\n    /** Less than operator. */\n    lessThan(compare) {\n        return !this.greaterThanEquals(compare);\n    }\n    /** Less than or equals operator. */\n    lessThanEquals(compare) {\n        return !this.greaterThan(compare);\n    }\n    /** Return a new copy with current values. */\n    clone() {\n        return new Fraction(this.numerator, this.denominator);\n    }\n    /** Copy value of another fraction. */\n    copy(other) {\n        if (typeof other === 'number') {\n            return this.set(other);\n        }\n        else {\n            return this.set(other.numerator, other.denominator);\n        }\n    }\n    /** Return the integer component (e.g. 5/2 => 2). */\n    quotient() {\n        return Math.floor(this.numerator / this.denominator);\n    }\n    /** Return the remainder component (e.g. 5/2 => 1). */\n    remainder() {\n        return this.numerator % this.denominator;\n    }\n    /** Calculate absolute value. */\n    makeAbs() {\n        this.denominator = Math.abs(this.denominator);\n        this.numerator = Math.abs(this.numerator);\n        return this;\n    }\n    /** Return a raw string representation (e.g. \"5/2\"). */\n    toString() {\n        return `${this.numerator}/${this.denominator}`;\n    }\n    /** Return a simplified string representation. */\n    toSimplifiedString() {\n        return Fraction.fractionA.copy(this).simplify().toString();\n    }\n    /** Return string representation in mixed form. */\n    toMixedString() {\n        let s = '';\n        const q = this.quotient();\n        const f = Fraction.fractionA.copy(this);\n        if (q < 0) {\n            f.makeAbs();\n        }\n        if (q !== 0) {\n            s += q;\n            if (f.numerator !== 0) {\n                s += ` ${f.toSimplifiedString()}`;\n            }\n        }\n        else if (f.numerator === 0) {\n            s = '0';\n        }\n        else {\n            s = f.toSimplifiedString();\n        }\n        return s;\n    }\n    /** Parse a fraction string. */\n    parse(str) {\n        const i = str.split('/');\n        const n = parseInt(i[0], 10);\n        const d = i[1] ? parseInt(i[1], 10) : 1;\n        return this.set(n, d);\n    }\n}\n// Cached objects for comparisons.\nFraction.fractionA = new Fraction();\nFraction.fractionB = new Fraction();\n/** Helper function to extract the numerator and denominator from another fraction. */\nfunction getNumeratorAndDenominator(n, d = 1) {\n    if (typeof n === 'number') {\n        // Both params are numbers, so we return them as [numerator, denominator].\n        return [n, d];\n    }\n    else {\n        // First param is a Fraction object. We ignore the second param.\n        return [n.numerator, n.denominator];\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nexport class Metrics {\n    /** Use the provided key to look up a FontInfo in CommonMetrics. **/\n    static clear(key) {\n        if (key) {\n            this.cacheFont.delete(key);\n            this.cacheStyle.delete(key);\n        }\n        else {\n            this.cacheFont.clear();\n            this.cacheStyle.clear();\n        }\n    }\n    static getFontInfo(key) {\n        let font = this.cacheFont.get(key);\n        if (!font) {\n            font = {\n                family: Metrics.get(`${key}.fontFamily`),\n                size: Metrics.get(`${key}.fontSize`) * Metrics.get(`${key}.fontScale`),\n                weight: Metrics.get(`${key}.fontWeight`),\n                style: Metrics.get(`${key}.fontStyle`),\n            };\n            this.cacheFont.set(key, font);\n        }\n        return structuredClone(font);\n    }\n    static getStyle(key) {\n        let style = this.cacheStyle.get(key);\n        if (!style) {\n            style = {\n                fillStyle: Metrics.get(`${key}.fillStyle`),\n                strokeStyle: Metrics.get(`${key}.strokeStyle`),\n                lineWidth: Metrics.get(`${key}.lineWidth`),\n                lineDash: Metrics.get(`${key}.lineDash`),\n                shadowBlur: Metrics.get(`${key}.shadowBlur`),\n                shadowColor: Metrics.get(`${key}.shadowColor`),\n            };\n            this.cacheStyle.set(key, style);\n        }\n        return structuredClone(style);\n    }\n    /**\n     * Use the provided key to look up a value in CommonMetrics.\n     *\n     * @param key is a string separated by periods (e.g., `Stroke.text.fontFamily`).\n     * @param defaultValue is returned if the lookup fails.\n     * @returns the retrieved value (or `defaultValue` if the lookup fails).\n     *\n     * For the key `Stroke.text.fontFamily`, check all of the following in order:\n     *   1) CommonMetrics.fontFamily\n     *   2) CommonMetrics.Stroke.fontFamily\n     *   3) CommonMetrics.Stroke.text.fontFamily\n     * Retrieve the value from the most specific key (i.e., prefer #3 over #2 over #1 in the above example).\n     */\n    // eslint-disable-next-line\n    static get(key, defaultValue) {\n        var _a;\n        const keyParts = key.split('.');\n        const lastKeyPart = keyParts.pop(); // Use ! because keyParts is not empty, since ''.split('.') still returns [''].\n        // Start from root of CommonMetrics and go down as far as possible.\n        let curr = MetricsDefaults;\n        let retVal = defaultValue;\n        while (curr) {\n            // Update retVal whenever we find a value assigned to a more specific key.\n            retVal = (_a = curr[lastKeyPart]) !== null && _a !== void 0 ? _a : retVal;\n            const keyPart = keyParts.shift();\n            if (keyPart) {\n                curr = curr[keyPart]; // Go down one level.\n            }\n            else {\n                break;\n            }\n        }\n        return retVal;\n    }\n}\nMetrics.cacheStyle = new Map();\nMetrics.cacheFont = new Map();\n// eslint-disable-next-line\nexport const MetricsDefaults = {\n    fontFamily: 'Bravura,Academico',\n    fontSize: 30,\n    fontScale: 1.0,\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    Accidental: {\n        cautionary: {\n            fontSize: 20,\n        },\n        grace: {\n            fontSize: 20,\n        },\n        noteheadAccidentalPadding: 1,\n        leftPadding: 2,\n        accidentalSpacing: 3,\n    },\n    Annotation: {\n        fontSize: 10,\n    },\n    Bend: {\n        fontSize: 10,\n        line: {\n            strokeStyle: '#777777',\n            lineWidth: 1,\n        },\n    },\n    ChordSymbol: {\n        fontSize: 12,\n        spacing: 0.05,\n        subscriptOffset: 0.2,\n        superscriptOffset: -0.4,\n        superSubRatio: 0.6,\n    },\n    FretHandFinger: {\n        fontSize: 9,\n        fontWeight: 'bold',\n    },\n    GraceNote: {\n        fontScale: 2 / 3,\n    },\n    GraceTabNote: {\n        fontScale: 2 / 3,\n    },\n    NoteHead: {\n        minPadding: 2,\n    },\n    PedalMarking: {\n        text: {\n            fontSize: 12,\n            fontStyle: 'italic',\n        },\n    },\n    Repetition: {\n        text: {\n            fontSize: 12,\n            fontWeight: 'bold',\n            offsetX: 12,\n            offsetY: 25,\n            spacing: 5,\n        },\n        coda: {\n            offsetY: 25,\n        },\n        segno: {\n            offsetY: 10,\n        },\n    },\n    Stave: {\n        strokeStyle: '#999999',\n        fontSize: 8,\n        padding: 12,\n        endPaddingMax: 10,\n        endPaddingMin: 5,\n        unalignedNotePadding: 10,\n    },\n    StaveConnector: {\n        text: {\n            fontSize: 16,\n        },\n    },\n    StaveLine: {\n        fontSize: 10,\n    },\n    StaveSection: {\n        fontSize: 10,\n        fontWeight: 'bold',\n        lineWidth: 2,\n        padding: 2,\n        strokeStyle: 'black',\n    },\n    StaveTempo: {\n        fontSize: 14,\n        glyph: {\n            fontSize: 25,\n        },\n        name: {\n            fontWeight: 'bold',\n        },\n    },\n    StaveText: {\n        fontSize: 16,\n    },\n    StaveTie: {\n        fontSize: 10,\n    },\n    Stem: {\n        strokeStyle: 'black',\n    },\n    StringNumber: {\n        fontSize: 10,\n        fontWeight: 'bold',\n        verticalPadding: 8,\n        stemPadding: 2,\n        leftPadding: 5,\n        rightPadding: 6,\n    },\n    Stroke: {\n        text: {\n            fontSize: 10,\n            fontStyle: 'italic',\n            fontWeight: 'bold',\n        },\n    },\n    TabNote: {\n        text: {\n            fontSize: 9,\n        },\n    },\n    TabSlide: {\n        fontSize: 10,\n        fontStyle: 'italic',\n        fontWeight: 'bold',\n    },\n    TabStave: {\n        strokeStyle: '#999999',\n        fontSize: 8,\n    },\n    TabTie: {\n        fontSize: 10,\n    },\n    TextBracket: {\n        fontSize: 15,\n        fontStyle: 'italic',\n    },\n    TextNote: {\n        text: {\n            fontSize: 12,\n        },\n    },\n    Tremolo: {\n        spacing: 7,\n    },\n    Tuplet: {\n        yOffset: 0,\n        textYOffset: 2,\n    },\n    Volta: {\n        fontSize: 9,\n        fontWeight: 'bold',\n    },\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nexport class BoundingBox {\n    /**\n     * Create a new copy.\n     */\n    static copy(that) {\n        return new BoundingBox(that.x, that.y, that.w, that.h);\n    }\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    /** Get x position. */\n    getX() {\n        return this.x;\n    }\n    /** Get y position. */\n    getY() {\n        return this.y;\n    }\n    /** Get width. */\n    getW() {\n        return this.w;\n    }\n    /** Get height. */\n    getH() {\n        return this.h;\n    }\n    /** Set x position. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Set y position. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Set width. */\n    setW(w) {\n        this.w = w;\n        return this;\n    }\n    /** Set height. */\n    setH(h) {\n        this.h = h;\n        return this;\n    }\n    /** Move to position. */\n    move(x, y) {\n        this.x += x;\n        this.y += y;\n        return this;\n    }\n    /** Clone. */\n    clone() {\n        return BoundingBox.copy(this);\n    }\n    /**\n     * Merge my box with given box. Creates a bigger bounding box unless\n     * the given box is contained in this one.\n     */\n    mergeWith(boundingBox) {\n        const that = boundingBox;\n        const newX = this.x < that.x ? this.x : that.x;\n        const newY = this.y < that.y ? this.y : that.y;\n        const newW = Math.max(this.x + this.w, that.x + that.w) - newX;\n        const newH = Math.max(this.y + this.h, that.y + that.h) - newY;\n        this.x = newX;\n        this.y = newY;\n        this.w = newW;\n        this.h = newH;\n        return this;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Metrics } from './metrics';\nexport var FontWeight;\n(function (FontWeight) {\n    FontWeight[\"NORMAL\"] = \"normal\";\n    FontWeight[\"BOLD\"] = \"bold\";\n})(FontWeight || (FontWeight = {}));\nexport var FontStyle;\n(function (FontStyle) {\n    FontStyle[\"NORMAL\"] = \"normal\";\n    FontStyle[\"ITALIC\"] = \"italic\";\n})(FontStyle || (FontStyle = {}));\n// Internal <span></span> element for parsing CSS font shorthand strings.\nlet fontParser;\nexport class Font {\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of pixels that is equivalent to `fontSize`\n     */\n    static convertSizeToPixelValue(fontSize) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize * Font.scaleToPxFrom.pt;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param fontSize a font size to convert. Can be specified as a CSS length string (e.g., '16pt', '1em')\n     * or as a number (the unit is assumed to be 'pt'). See `Font.scaleToPxFrom` for the supported\n     * units (e.g., pt, em, %).\n     * @returns the number of points that is equivalent to `fontSize`\n     */\n    static convertSizeToPointValue(fontSize) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            // Assume the numeric fontSize is specified in pt.\n            return fontSize;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase(); // Extract the unit by removing all numbers, dots, spaces.\n            const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;\n            return value * conversionFactor;\n        }\n    }\n    /**\n     * @param f\n     * @param size\n     * @param weight\n     * @param style\n     * @returns the `size` field will include the units (e.g., '12pt', '16px').\n     */\n    static validate(f, size, weight, style) {\n        // If f is a string but all other arguments are undefined, we assume that\n        // f is CSS font shorthand (e.g., 'italic bold 10pt Arial').\n        if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {\n            return Font.fromCSSString(f);\n        }\n        let family;\n        if (typeof f === 'object') {\n            // f is a FontInfo object, so we extract its fields.\n            family = f.family;\n            size = f.size;\n            weight = f.weight;\n            style = f.style;\n        }\n        else {\n            // f is a string representing the font family name or undefined.\n            family = f;\n        }\n        family = family !== null && family !== void 0 ? family : Metrics.get('fontFamily');\n        size = size !== null && size !== void 0 ? size : Metrics.get('fontSize') + 'pt';\n        weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;\n        style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;\n        if (weight === '') {\n            weight = FontWeight.NORMAL;\n        }\n        if (style === '') {\n            style = FontStyle.NORMAL;\n        }\n        // If size is a number, we assume the unit is `pt`.\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        // If weight is a number (e.g., 900), turn it into a string representation of that number.\n        if (typeof weight === 'number') {\n            weight = weight.toString();\n        }\n        // At this point, `family`, `size`, `weight`, and `style` are all strings.\n        return { family, size, weight, style };\n    }\n    /**\n     * @param cssFontShorthand a string formatted as CSS font shorthand (e.g., 'italic bold 15pt Arial').\n     */\n    static fromCSSString(cssFontShorthand) {\n        // Let the browser parse this string for us.\n        // First, create a span element.\n        // Then, set its style.font and extract it back out.\n        if (!fontParser) {\n            fontParser = document.createElement('span');\n        }\n        fontParser.style.font = cssFontShorthand;\n        const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;\n        return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };\n    }\n    /**\n     * @returns a CSS font shorthand string of the form `italic bold 16pt Arial`.\n     */\n    static toCSSString(fontInfo) {\n        var _a;\n        if (!fontInfo) {\n            return '';\n        }\n        let style;\n        const st = fontInfo.style;\n        if (st === FontStyle.NORMAL || st === '' || st === undefined) {\n            style = ''; // no space! Omit the style section.\n        }\n        else {\n            style = st.trim() + ' ';\n        }\n        let weight;\n        const wt = fontInfo.weight;\n        if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {\n            weight = ''; // no space! Omit the weight section.\n        }\n        else if (typeof wt === 'number') {\n            weight = wt + ' ';\n        }\n        else {\n            weight = wt.trim() + ' ';\n        }\n        let size;\n        const sz = fontInfo.size;\n        if (sz === undefined) {\n            size = Metrics.get('fontSize') + 'pt';\n        }\n        else if (typeof sz === 'number') {\n            size = sz + 'pt ';\n        }\n        else {\n            // size is already a string.\n            size = sz.trim() + ' ';\n        }\n        const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Metrics.get('fontFamily');\n        return `${style}${weight}${size}${family}`;\n    }\n    /**\n     * @param fontSize a number representing a font size, or a string font size with units.\n     * @param scaleFactor multiply the size by this factor.\n     * @returns size * scaleFactor (e.g., 16pt * 3 = 48pt, 8px * 0.5 = 4px, 24 * 2 = 48).\n     * If the fontSize argument was a number, the return value will be a number.\n     * If the fontSize argument was a string, the return value will be a string.\n     */\n    static scaleSize(fontSize, scaleFactor) {\n        if (typeof fontSize === 'number') {\n            return (fontSize * scaleFactor);\n        }\n        else {\n            const value = parseFloat(fontSize);\n            const unit = fontSize.replace(/[\\d.\\s]/g, ''); // Remove all numbers, dots, spaces.\n            return `${value * scaleFactor}${unit}`;\n        }\n    }\n    /**\n     * @param weight a string (e.g., 'bold') or a number (e.g., 600 / semi-bold in the OpenType spec).\n     * @returns true if the font weight indicates bold.\n     */\n    static isBold(weight) {\n        if (!weight) {\n            return false;\n        }\n        else if (typeof weight === 'number') {\n            return weight >= 600;\n        }\n        else {\n            // a string can be 'bold' or '700'\n            const parsedWeight = parseInt(weight, 10);\n            if (isNaN(parsedWeight)) {\n                return weight.toLowerCase() === 'bold';\n            }\n            else {\n                return parsedWeight >= 600;\n            }\n        }\n    }\n    /**\n     * @param style\n     * @returns true if the font style indicates 'italic'.\n     */\n    static isItalic(style) {\n        if (!style) {\n            return false;\n        }\n        else {\n            return style.toLowerCase() === FontStyle.ITALIC;\n        }\n    }\n    /**\n     * This method is asynchronous, so you should use await or .then() to wait for the fonts to load before proceeding.\n     *\n     * @param fontName\n     * @param url The absolute or relative URL to the woff2/otf file. It can also be a data URI.\n     * @param descriptors See: https://developer.mozilla.org/en-US/docs/Web/API/FontFace/FontFace#descriptors\n     */\n    static load(fontName, url, descriptors) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof FontFace === 'undefined') {\n                return Promise.reject(new Error('FontFace API is not available in this environment. Cannot load fonts.'));\n            }\n            // If url is not specified, we load the font from the jsDelivr CDN.\n            if (url === undefined) {\n                const files = Font.FILES;\n                if (!(fontName in files)) {\n                    return Promise.reject(new Error(`Font ${fontName} not found in Font.FILES`));\n                }\n                url = Font.HOST_URL + files[fontName];\n            }\n            const fontFace = new FontFace(fontName, `url(${url})`, descriptors);\n            const fontFaceLoadPromise = fontFace.load();\n            // https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet\n            let fontFaceSet;\n            if (typeof document !== 'undefined') {\n                fontFaceSet = document.fonts;\n            }\n            else if (typeof self !== 'undefined' && 'fonts' in self) {\n                // Workers do not have a document object.\n                // https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/fonts\n                // eslint-disable-next-line\n                fontFaceSet = self.fonts;\n            }\n            fontFaceSet === null || fontFaceSet === void 0 ? void 0 : fontFaceSet.add(fontFace);\n            return fontFaceLoadPromise;\n        });\n    }\n    static getURLForFont(fontName) {\n        const files = Font.FILES;\n        if (!(fontName in files)) {\n            return undefined;\n        }\n        return Font.HOST_URL + files[fontName];\n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////\n// STATIC MEMBERS\n// CSS Font Sizes: 36pt == 48px == 3em == 300% == 0.5in\n/** Given a length (for units: pt, px, em, %, in, mm, cm) what is the scale factor to convert it to px? */\nFont.scaleToPxFrom = {\n    pt: 4 / 3,\n    px: 1,\n    em: 16,\n    '%': 4 / 25,\n    in: 96,\n    mm: 96 / 25.4,\n    cm: 96 / 2.54,\n};\n/**\n * Customize this field to specify a different CDN for delivering web fonts.\n * Discussion on GDPR concerns:\n * https://www.jsdelivr.com/blog/how-the-german-courts-ruling-on-google-fonts-affects-jsdelivr-and-why-it-is-safe-to-use/\n *\n * You can also self host, and specify your own server URL here.\n */\nFont.HOST_URL = 'https://cdn.jsdelivr.net/npm/@vexflow-fonts/';\n/**\n * These font files will be loaded from the CDN specified by `Font.HOST_URL`.\n * `await VexFlow.loadFonts()` loads all of the fonts below. Useful during debugging.\n * `await VexFlow.loadFonts(FontName1, FontName2)` loads only the specified fonts.\n */\nFont.FILES = {\n    Academico: 'academico/academico.woff2',\n    Bravura: 'bravura/bravura.woff2',\n    'Bravura Text': 'bravuratext/bravuratext.woff2',\n    Edwin: 'edwin/edwin-roman.woff2',\n    'Finale Ash': 'finaleash/finaleash.woff2',\n    'Finale Ash Text': 'finaleashtext/finaleashtext.woff2',\n    'Finale Broadway': 'finalebroadway/finalebroadway.woff2',\n    'Finale Broadway Text': 'finalebroadwaytext/finalebroadwaytext.woff2',\n    'Finale Jazz': 'finalejazz/finalejazz.woff2',\n    'Finale Jazz Text': 'finalejazztext/finalejazztext.woff2',\n    'Finale Maestro': 'finalemaestro/finalemaestro.woff2',\n    'Finale Maestro Text': 'finalemaestrotext/finalemaestrotext-regular.woff2',\n    Gonville: 'gonville/gonville.woff2',\n    Gootville: 'gootville/gootville.woff2',\n    'Gootville Text': 'gootvilletext/gootvilletext.woff2',\n    Leipzig: 'leipzig/leipzig.woff2',\n    Leland: 'leland/leland.woff2',\n    'Leland Text': 'lelandtext/lelandtext.woff2',\n    MuseJazz: 'musejazz/musejazz.woff2',\n    'MuseJazz Text': 'musejazztext/musejazztext.woff2',\n    Nepomuk: 'nepomuk/nepomuk.woff2',\n    Petaluma: 'petaluma/petaluma.woff2',\n    'Petaluma Script': 'petalumascript/petalumascript.woff2',\n    'Petaluma Text': 'petalumatext/petalumatext.woff2',\n    'Roboto Slab': 'robotoslab/robotoslab-regular-400.woff2',\n    Sebastian: 'sebastian/sebastian.woff2',\n    'Sebastian Text': 'sebastiantext/sebastiantext.woff2',\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n//\n// ## Description\n//\n// This file implements a registry for VexFlow elements. It allows users\n// to track, query, and manage some subset of generated elements, and\n// dynamically get and set attributes.\n//\n// There are two ways to register with a registry:\n//\n// 1) Explicitly call `registry.register(elem:Element, id?:string)`, or,\n// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future\n//    elements will automatically register with it.\n//\n// Once an element is registered, selected attributes are tracked and indexed by\n// the registry. This allows fast look up of elements by attributes like id, type,\n// and class.\nimport { RuntimeError } from './util';\n// Indexes are represented as maps of maps of maps. This allows\n// for both multi-labeling (e.g., an element can have multiple classes)\n// and efficient lookup.\nclass Index {\n    constructor() {\n        this.id = {};\n        this.type = {};\n        this.class = {};\n    }\n}\nexport class Registry {\n    static getDefaultRegistry() {\n        return Registry.defaultRegistry;\n    }\n    // If you call `enableDefaultRegistry`, any new elements will auto-register with\n    // the provided registry as soon as they're constructed.\n    static enableDefaultRegistry(registry) {\n        Registry.defaultRegistry = registry;\n    }\n    static disableDefaultRegistry() {\n        Registry.defaultRegistry = undefined;\n    }\n    constructor() {\n        this.index = new Index();\n    }\n    clear() {\n        this.index = new Index();\n        return this;\n    }\n    setIndexValue(name, value, id, elem) {\n        const index = this.index;\n        if (!index[name][value]) {\n            index[name][value] = {};\n        }\n        index[name][value][id] = elem;\n    }\n    // Updates the indexes for element 'id'. If an element's attribute changes\n    // from A -> B, make sure to remove the element from A.\n    updateIndex({ id, name, value, oldValue }) {\n        const elem = this.getElementById(id);\n        if (oldValue !== undefined && this.index[name][oldValue]) {\n            delete this.index[name][oldValue][id];\n        }\n        if (value && elem) {\n            this.setIndexValue(name, value, elem.getAttribute('id'), elem);\n        }\n    }\n    /**\n     * Register element `elem` with this registry.\n     * This adds the element to its index and watches it for attribute changes.\n     * @param elem\n     * @param id\n     * @returns this\n     */\n    register(elem, id) {\n        id = id || elem.getAttribute('id');\n        if (!id) {\n            throw new RuntimeError(\"Can't add element without `id` attribute to registry\");\n        }\n        // Manually add id to index, then update other indexes.\n        elem.setAttribute('id', id);\n        this.setIndexValue('id', id, id, elem);\n        this.updateIndex({ id, name: 'type', value: elem.getAttribute('type'), oldValue: undefined });\n        elem.onRegister(this);\n        return this;\n    }\n    getElementById(id) {\n        var _a, _b;\n        return (_b = (_a = this.index.id) === null || _a === void 0 ? void 0 : _a[id]) === null || _b === void 0 ? void 0 : _b[id]; // return undefined if the id is not found.\n    }\n    getElementsByAttribute(attribute, value) {\n        const indexAttr = this.index[attribute];\n        if (indexAttr) {\n            const indexAttrVal = indexAttr[value];\n            if (indexAttrVal) {\n                const keys = Object.keys(indexAttrVal);\n                return keys.map((k) => indexAttrVal[k]);\n            }\n        }\n        return [];\n    }\n    getElementsByType(type) {\n        return this.getElementsByAttribute('type', type);\n    }\n    getElementsByClass(className) {\n        return this.getElementsByAttribute('class', className);\n    }\n    // This is called by the element when an attribute value changes. If an indexed\n    // attribute changes, then update the local index.\n    onUpdate(info) {\n        const allowedNames = ['id', 'type', 'class'];\n        if (allowedNames.includes(info.name)) {\n            this.updateIndex(info);\n        }\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\nimport { BoundingBox } from './boundingbox';\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Registry } from './registry';\nimport { Category } from './typeguard';\nimport { defined, prefix, RuntimeError } from './util';\n/**\n * Element implements a generic base class for VexFlow, with implementations\n * of general functions and properties that can be inherited by all VexFlow elements.\n *\n * The Element handles style and font properties for the Element and any child\n * elements, along with working with the Registry to create unique ids.\n *\n * The `text` is a series of unicode characters (including SMuFL codes).\n * The `textFont` property contains information required to style the text (i.e., font family, size, weight, and style).\n * This font family is a comma separated list of fonts.\n * The method `measureText` calculates the `textMetrics`, `boundingBox`, `height` and `width` of the `text`.\n * The method `renderText(...)` will render the text using the provided context and coordinates,\n * taking `xShift` and `yShift` into account.\n */\nexport class Element {\n    static get CATEGORY() {\n        return Category.Element;\n    }\n    static newID() {\n        return `auto${Element.ID++}`;\n    }\n    // Note: Canvas is node-canvas.\n    // https://www.npmjs.com/package/canvas\n    static setTextMeasurementCanvas(canvas /* | Canvas */) {\n        Element.txtCanvas = canvas;\n    }\n    static getTextMeasurementCanvas() {\n        let txtCanvas = Element.txtCanvas;\n        // Create the canvas element that will be used to measure text.\n        if (!txtCanvas) {\n            if (typeof document !== 'undefined') {\n                txtCanvas = document.createElement('canvas'); // Defaults to 300 x 150. See: https://www.w3.org/TR/2012/WD-html5-author-20120329/the-canvas-element.html#the-canvas-element\n            }\n            else if (typeof OffscreenCanvas !== 'undefined') {\n                txtCanvas = new OffscreenCanvas(300, 150);\n            }\n            Element.txtCanvas = txtCanvas;\n        }\n        return txtCanvas;\n    }\n    constructor(category) {\n        var _a;\n        this.children = [];\n        this.style = {};\n        this._text = '';\n        this.metricsValid = false;\n        this._textMetrics = {\n            fontBoundingBoxAscent: 0,\n            fontBoundingBoxDescent: 0,\n            actualBoundingBoxAscent: 0,\n            actualBoundingBoxDescent: 0,\n            actualBoundingBoxLeft: 0,\n            actualBoundingBoxRight: 0,\n            width: 0,\n            alphabeticBaseline: 0,\n            emHeightAscent: 0,\n            emHeightDescent: 0,\n            hangingBaseline: 0,\n            ideographicBaseline: 0,\n        };\n        this._height = 0;\n        this._width = 0;\n        this.xShift = 0;\n        this.yShift = 0;\n        this.x = 0;\n        this.y = 0;\n        this.attrs = {\n            id: Element.newID(),\n            type: category !== null && category !== void 0 ? category : this.constructor.CATEGORY,\n            class: '',\n        };\n        this.rendered = false;\n        this._fontInfo = Metrics.getFontInfo(this.attrs.type);\n        this.style = Metrics.getStyle(this.attrs.type);\n        this.fontScale = Metrics.get(`${this.attrs.type}.fontScale`);\n        // If a default registry exist, then register with it right away.\n        (_a = Registry.getDefaultRegistry()) === null || _a === void 0 ? void 0 : _a.register(this);\n    }\n    /**\n     * Adds a child to the Element, which lets it inherit the\n     * same style as the parent when setGroupStyle() is called.\n     *\n     * Examples of children are noteheads and stems.  Modifiers such\n     * as Accidentals are generally not set as children.\n     *\n     * Note that StaveNote calls setGroupStyle() when setStyle() is called.\n     */\n    addChild(child) {\n        if (child.parent)\n            throw new RuntimeError('Element', 'Parent already defined');\n        child.parent = this;\n        this.children.push(child);\n        return this;\n    }\n    getCategory() {\n        return this.attrs.type;\n    }\n    /**\n     * Set the element style used to render.\n     *\n     * Example:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.drawWithStyle();\n     * ```\n     * Note: If the element draws additional sub-elements (i.e.: Modifiers in a Stave),\n     * the style can be applied to all of them by means of the context:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.getContext().setFillStyle('red');\n     * element.getContext().setStrokeStyle('red');\n     * element.drawWithStyle();\n     * ```\n     * or using drawWithStyle:\n     * ```typescript\n     * element.setStyle({ fillStyle: 'red', strokeStyle: 'red' });\n     * element.drawWithStyle();\n     * ```\n     */\n    setStyle(style) {\n        this.style = style;\n        return this;\n    }\n    /** Set the element & associated children style used for rendering. */\n    setGroupStyle(style) {\n        this.style = style;\n        this.children.forEach((child) => child.setGroupStyle(style));\n        return this;\n    }\n    /** Get the element style used for rendering. */\n    getStyle() {\n        return this.style;\n    }\n    /** Apply the element style to `context`. */\n    applyStyle(context = this.context, style = this.getStyle()) {\n        if (!context)\n            return this;\n        if (style.shadowColor)\n            context.setShadowColor(style.shadowColor);\n        if (style.shadowBlur)\n            context.setShadowBlur(style.shadowBlur);\n        if (style.fillStyle)\n            context.setFillStyle(style.fillStyle);\n        if (style.strokeStyle)\n            context.setStrokeStyle(style.strokeStyle);\n        if (style.lineWidth)\n            context.setLineWidth(style.lineWidth);\n        if (style.lineDash)\n            context.setLineDash(style.lineDash.split(' ').map(Number));\n        return this;\n    }\n    /**\n     * Draw the element and all its sub-elements (i.e.: Modifiers in a Stave)\n     * with the element's style (see `getStyle()` and `setStyle()`)\n     */\n    drawWithStyle() {\n        const ctx = this.checkContext();\n        ctx.save();\n        this.applyStyle(ctx);\n        this.draw();\n        ctx.restore();\n        return this;\n    }\n    /** Draw an element. */\n    draw() {\n        throw new RuntimeError('Element', 'Draw not defined');\n    }\n    /** Check if it has a class label (An element can have multiple class labels). */\n    hasClass(className) {\n        var _a;\n        if (!this.attrs.class)\n            return false;\n        return ((_a = this.attrs.class) === null || _a === void 0 ? void 0 : _a.split(' ').indexOf(className)) !== -1;\n    }\n    /** Add a class label (An element can have multiple class labels). */\n    addClass(className) {\n        var _a;\n        if (this.hasClass(className))\n            return this;\n        if (!this.attrs.class)\n            this.attrs.class = `${className}`;\n        else\n            this.attrs.class = `${this.attrs.class} ${className}`;\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({\n            id: this.attrs.id,\n            name: 'class',\n            value: className,\n            oldValue: undefined,\n        });\n        return this;\n    }\n    /** Remove a class label (An element can have multiple class labels). */\n    removeClass(className) {\n        var _a, _b;\n        if (!this.hasClass(className))\n            return this;\n        const arr = (_a = this.attrs.class) === null || _a === void 0 ? void 0 : _a.split(' ');\n        if (arr) {\n            arr.splice(arr.indexOf(className));\n            this.attrs.class = arr.join(' ');\n        }\n        (_b = this.registry) === null || _b === void 0 ? void 0 : _b.onUpdate({\n            id: this.attrs.id,\n            name: 'class',\n            value: undefined,\n            oldValue: className,\n        });\n        return this;\n    }\n    /** Call back from registry after the element is registered. */\n    onRegister(registry) {\n        this.registry = registry;\n        return this;\n    }\n    /** Return the rendered status. */\n    isRendered() {\n        return this.rendered;\n    }\n    /** Set the rendered status. */\n    setRendered(rendered = true) {\n        this.rendered = rendered;\n        return this;\n    }\n    /** Return the element attributes. */\n    getAttributes() {\n        return this.attrs;\n    }\n    /** Return an attribute, such as 'id', 'type' or 'class'. */\n    // eslint-disable-next-line\n    getAttribute(name) {\n        return this.attrs[name];\n    }\n    /** Return associated SVGElement. */\n    getSVGElement(suffix = '') {\n        const id = prefix(this.attrs.id + suffix);\n        const element = document.getElementById(id);\n        if (element)\n            return element;\n    }\n    /** Set an attribute such as 'id', 'class', or 'type'. */\n    setAttribute(name, value) {\n        var _a;\n        const oldID = this.attrs.id;\n        const oldValue = this.attrs[name];\n        this.attrs[name] = value;\n        // Register with old id to support id changes.\n        (_a = this.registry) === null || _a === void 0 ? void 0 : _a.onUpdate({ id: oldID, name, value, oldValue });\n        return this;\n    }\n    /** Get the boundingBox. */\n    getBoundingBox() {\n        return new BoundingBox(this.x + this.xShift, this.y + this.yShift - this.textMetrics.actualBoundingBoxAscent, this.width, this.height);\n    }\n    /** Return the context, such as an SVGContext or CanvasContext object. */\n    getContext() {\n        return this.context;\n    }\n    /** Set the context to an SVGContext or CanvasContext object */\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    /** Validate and return the rendering context. */\n    checkContext() {\n        return defined(this.context, 'NoContext', 'No rendering context attached to instance.');\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // Font Handling\n    /**\n     * Provide a CSS compatible font string (e.g., 'bold 16px Arial') that will be applied\n     * to text (not glyphs).\n     */\n    set font(f) {\n        this.setFont(f);\n    }\n    /** Returns the CSS compatible font string for the text font. */\n    get font() {\n        return Font.toCSSString(this._fontInfo);\n    }\n    /**\n     * Set the element's text font family, size, weight, style\n     * (e.g., `Arial`, `10pt`, `bold`, `italic`).\n     *\n     * This attribute does not determine the font used for musical Glyphs like treble clefs.\n     *\n     * @param font is 1) a `FontInfo` object or\n     *                2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *                3) a string representing the font family (at least one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     * If no arguments are provided, then the font is set to the default font.\n     * Each Element subclass may specify its own default by overriding the static `TEXT_FONT` property.\n     */\n    setFont(font, size, weight, style) {\n        const defaultTextFont = Metrics.getFontInfo(this.attrs.type);\n        const fontIsObject = typeof font === 'object';\n        const fontIsString = typeof font === 'string';\n        const sizeWeightStyleAreUndefined = size === undefined && weight === undefined && style === undefined;\n        this.metricsValid = false;\n        if (fontIsObject) {\n            // `font` is case 1) a FontInfo object\n            this._fontInfo = Object.assign(Object.assign({}, defaultTextFont), font);\n        }\n        else if (fontIsString && sizeWeightStyleAreUndefined) {\n            // `font` is case 2) CSS font shorthand.\n            this._fontInfo = Font.fromCSSString(font);\n        }\n        else {\n            // `font` is case 3) a font family string (e.g., 'Times New Roman').\n            // The other parameters represent the size, weight, and style.\n            // It is okay for `font` to be undefined while one or more of the other arguments is provided.\n            // Following CSS conventions, unspecified params are reset to the default.\n            this._fontInfo = Font.validate(font !== null && font !== void 0 ? font : defaultTextFont.family, size !== null && size !== void 0 ? size : defaultTextFont.size, weight !== null && weight !== void 0 ? weight : defaultTextFont.weight, style !== null && style !== void 0 ? style : defaultTextFont.style);\n        }\n        return this;\n    }\n    /**\n     * Get the css string describing this Element's text font. e.g.,\n     * 'bold 10pt Arial'.\n     */\n    getFont() {\n        return Font.toCSSString(this._fontInfo);\n    }\n    /** Return a copy of the current FontInfo object. */\n    get fontInfo() {\n        // We can cast to Required<FontInfo> here, because\n        // we just called resetFont() above to ensure this.fontInfo is set.\n        return this._fontInfo;\n    }\n    /** Set the current FontInfo object. */\n    set fontInfo(fontInfo) {\n        this.setFont(fontInfo);\n    }\n    /** Change the font size, while keeping everything else the same. */\n    setFontSize(size) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, size, fontInfo.weight, fontInfo.style);\n        return this;\n    }\n    /**\n     * @returns a CSS font-size string (e.g., '18pt', '12px', '1em').\n     * See Element.fontSizeInPixels or Element.fontSizeInPoints if you need to get a number for calculation purposes.\n     */\n    getFontSize() {\n        return this.fontSize;\n    }\n    getFontScale() {\n        return this.fontScale;\n    }\n    /**\n     * The size is 1) a string of the form '10pt' or '16px', compatible with the CSS font-size property.\n     *          or 2) a number, which is interpreted as a point size (i.e. 12 == '12pt').\n     */\n    set fontSize(size) {\n        this.setFontSize(size);\n    }\n    /** @returns a CSS font-size string (e.g., '18pt', '12px', '1em'). */\n    get fontSize() {\n        let size = this.fontInfo.size;\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        return size;\n    }\n    /** @returns the font size in `pt`. */\n    get fontSizeInPoints() {\n        return Font.convertSizeToPointValue(this.fontSize);\n    }\n    /** @returns the font size in `px`. */\n    get fontSizeInPixels() {\n        return Font.convertSizeToPixelValue(this.fontSize);\n    }\n    /** @returns a CSS font-style string (e.g., 'italic'). */\n    get fontStyle() {\n        return this.fontInfo.style;\n    }\n    /** Set the font style. */\n    set fontStyle(style) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, fontInfo.weight, style);\n    }\n    /**\n     * @returns a CSS font-weight string (e.g., 'bold').\n     * As in CSS, font-weight is always returned as a string, even if it was set as a number.\n     */\n    get fontWeight() {\n        return this.fontInfo.weight + '';\n    }\n    /** Set the font weight. */\n    set fontWeight(weight) {\n        const fontInfo = this.fontInfo;\n        this.setFont(fontInfo.family, fontInfo.size, weight, fontInfo.style);\n    }\n    /** Get element width. */\n    getWidth() {\n        return this.width;\n    }\n    get width() {\n        if (!this.metricsValid)\n            this.measureText();\n        return this._width;\n    }\n    /** Set element width. */\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    set width(width) {\n        if (!this.metricsValid)\n            this.measureText();\n        this._width = width;\n    }\n    /** Set the X coordinate. */\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    /** Get the X coordinate. */\n    getX() {\n        return this.x;\n    }\n    /** Get the Y coordinate. */\n    getY() {\n        return this.y;\n    }\n    /** Set the Y coordinate. */\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    /** Shift element down `yShift` pixels. Negative values shift up. */\n    setYShift(yShift) {\n        this.yShift = yShift;\n        return this;\n    }\n    /** Get shift element `yShift`. */\n    getYShift() {\n        return this.yShift;\n    }\n    /** Set shift element right `xShift` pixels. Negative values shift left. */\n    setXShift(xShift) {\n        this.xShift = xShift;\n        return this;\n    }\n    /** Get shift element `xShift`. */\n    getXShift() {\n        return this.xShift;\n    }\n    /** Set element text. */\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    set text(text) {\n        this.metricsValid = false;\n        this._text = text;\n    }\n    /** Get element text. */\n    getText() {\n        return this._text;\n    }\n    get text() {\n        return this._text;\n    }\n    /** Render the element text. */\n    renderText(ctx, xPos, yPos) {\n        ctx.setFont(this._fontInfo);\n        ctx.fillText(this._text, xPos + this.x + this.xShift, yPos + this.y + this.yShift);\n        this.children.forEach((child) => {\n            // changed -- do not look at private attributes of children.\n            ctx.setFont(child.fontInfo);\n            ctx.fillText(child.text, xPos + child.x + child.xShift, yPos + child.y + child.yShift);\n        });\n    }\n    /** Measure the text using the textFont. */\n    measureText() {\n        var _a;\n        // TODO: What about SVG.getBBox()?\n        // https://developer.mozilla.org/en-US/docs/Web/API/SVGGraphicsElement/getBBox\n        const context = (_a = Element.getTextMeasurementCanvas()) === null || _a === void 0 ? void 0 : _a.getContext('2d');\n        if (!context) {\n            // eslint-disable-next-line no-console\n            console.warn('Element: No context for txtCanvas. Returning empty text metrics.');\n            return this._textMetrics;\n        }\n        context.font = Font.toCSSString(Font.validate(this.fontInfo));\n        this._textMetrics = context.measureText(this.text);\n        this._height = this._textMetrics.actualBoundingBoxAscent + this._textMetrics.actualBoundingBoxDescent;\n        this._width = this._textMetrics.width;\n        this.metricsValid = true;\n        return this._textMetrics;\n    }\n    /** Measure the text using the FontInfo related with key. */\n    static measureWidth(text, key = '') {\n        var _a;\n        const context = (_a = Element.getTextMeasurementCanvas()) === null || _a === void 0 ? void 0 : _a.getContext('2d');\n        if (!context) {\n            // eslint-disable-next-line no-console\n            console.warn('Element: No context for txtCanvas. Returning empty text metrics.');\n            return 0;\n        }\n        context.font = Font.toCSSString(Metrics.getFontInfo(key));\n        return context.measureText(text).width;\n    }\n    /** Get the text metrics. */\n    getTextMetrics() {\n        return this.textMetrics;\n    }\n    get textMetrics() {\n        if (!this.metricsValid)\n            this.measureText();\n        return this._textMetrics;\n    }\n    /** Get the text height. */\n    getHeight() {\n        return this.height;\n    }\n    get height() {\n        if (!this.metricsValid)\n            this.measureText();\n        return this._height;\n    }\n    set height(height) {\n        if (!this.metricsValid)\n            this.measureText();\n        this._height = height;\n    }\n    setOriginX(x) {\n        const bbox = this.getBoundingBox();\n        const originX = Math.abs((bbox.getX() - this.xShift) / bbox.getW());\n        const xShift = (x - originX) * bbox.getW();\n        this.xShift = -xShift;\n    }\n    setOriginY(y) {\n        const bbox = this.getBoundingBox();\n        const originY = Math.abs((bbox.getY() - this.yShift) / bbox.getH());\n        const yShift = (y - originY) * bbox.getH();\n        this.yShift = -yShift;\n    }\n    setOrigin(x, y) {\n        this.setOriginX(x);\n        this.setOriginY(y);\n    }\n}\nElement.ID = 1000;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport var ModifierPosition;\n(function (ModifierPosition) {\n    ModifierPosition[ModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    ModifierPosition[ModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    ModifierPosition[ModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    ModifierPosition[ModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    ModifierPosition[ModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n})(ModifierPosition || (ModifierPosition = {}));\n// To enable logging for this class. Set `VexFlow.Modifier.DEBUG` to `true`.\n// function L(...args) { if (Modifier.DEBUG) log('VexFlow.Modifier', args); }\n/**\n * `Modifier` is an abstract interface for notational elements that modify\n * a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.\n *\n * For a `Modifier` instance to be positioned correctly, it must be part of\n * a `ModifierContext`. All modifiers in the same context are rendered relative to\n * one another.\n *\n * Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,\n * in multi-voice staves, all modifiers to notes on the same `tick` are part of the same\n * `ModifierContext`. This ensures that multiple voices don't trample all over each other.\n */\nexport class Modifier extends Element {\n    /**\n     * Modifiers category string. Every modifier has a different category.\n     * The `ModifierContext` uses this to determine the type and order of the modifiers.\n     */\n    static get CATEGORY() {\n        return Category.Modifier;\n    }\n    /** Modifiers can be positioned almost anywhere, relative to a note. */\n    static get Position() {\n        return ModifierPosition;\n    }\n    static get PositionString() {\n        return {\n            center: ModifierPosition.CENTER,\n            above: ModifierPosition.ABOVE,\n            below: ModifierPosition.BELOW,\n            left: ModifierPosition.LEFT,\n            right: ModifierPosition.RIGHT,\n        };\n    }\n    constructor() {\n        super();\n        this.width = 0;\n        // The `textLine` is reserved space above or below a stave.\n        this.textLine = 0;\n        this.position = Modifier.Position.LEFT;\n        this.spacingFromNextModifier = 0;\n    }\n    /** Called when position changes. */\n    reset() {\n        // DO NOTHING.\n    }\n    /** Get attached note (`StaveNote`, `TabNote`, etc.) */\n    getNote() {\n        return defined(this.note, 'NoNote', 'Modifier has no note.');\n    }\n    /**\n     * Used in draw() to check and get the attached note (`StaveNote`, `TabNote`, etc.).\n     * Also verifies that the index is valid.\n     */\n    checkAttachedNote() {\n        const category = this.getCategory();\n        defined(this.index, 'NoIndex', `Can't draw ${category} without an index.`);\n        return defined(this.note, 'NoNote', `Can't draw ${category} without a note.`);\n    }\n    /**\n     * Set attached note.\n     * @param note (`StaveNote`, `TabNote`, etc.)\n     */\n    setNote(note) {\n        this.note = note;\n        return this;\n    }\n    /** Get note index, which is a specific note in a chord. */\n    getIndex() {\n        return this.index;\n    }\n    /** Check and get note index, which is a specific note in a chord. */\n    checkIndex() {\n        return defined(this.index, 'NoIndex', 'Modifier has an invalid index.');\n    }\n    /** Set note index, which is a specific note in a chord. */\n    setIndex(index) {\n        this.index = index;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'Modifier Context Required');\n    }\n    /** Every modifier must be part of a `ModifierContext`. */\n    setModifierContext(c) {\n        this.modifierContext = c;\n        return this;\n    }\n    /** Get position. */\n    getPosition() {\n        return this.position;\n    }\n    /**\n     * Set position.\n     * @param position CENTER | LEFT | RIGHT | ABOVE | BELOW\n     */\n    setPosition(position) {\n        this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;\n        this.reset();\n        return this;\n    }\n    /** Set the `textLine` for the modifier. */\n    setTextLine(line) {\n        this.textLine = line;\n        return this;\n    }\n    /** Shift modifier down `y` pixels. Negative values shift up. */\n    setYShift(y) {\n        this.yShift = y;\n        return this;\n    }\n    /** Set spacing from next modifier. */\n    setSpacingFromNextModifier(x) {\n        this.spacingFromNextModifier = x;\n    }\n    /** Get spacing from next modifier. */\n    getSpacingFromNextModifier() {\n        return this.spacingFromNextModifier;\n    }\n    /**\n     * Shift modifier `x` pixels in the direction of the modifier. Negative values\n     * shift reverse.\n     */\n    setXShift(x) {\n        this.xShift = 0;\n        if (this.position === Modifier.Position.LEFT) {\n            this.xShift -= x;\n        }\n        else {\n            this.xShift += x;\n        }\n        return this;\n    }\n    /** Get shift modifier `x` */\n    getXShift() {\n        return this.xShift;\n    }\n    /** Render the modifier onto the canvas. */\n    draw() {\n        this.checkContext();\n        throw new RuntimeError('NotImplemented', 'draw() not implemented for this modifier.');\n    }\n    // aligns sub notes of NoteSubGroup (or GraceNoteGroup) to the main note with correct x-offset\n    alignSubNotesWithNote(subNotes, note, position = Modifier.Position.LEFT) {\n        // Shift over the tick contexts of each note\n        const tickContext = note.getTickContext();\n        const metrics = tickContext.getMetrics();\n        const stave = note.getStave();\n        const subNoteXOffset = position === Modifier.Position.RIGHT\n            ? tickContext.getX() + this.getSpacingFromNextModifier() * subNotes.length + 10\n            : tickContext.getX() - metrics.modLeftPx - metrics.modRightPx + this.getSpacingFromNextModifier();\n        subNotes.forEach((subNote) => {\n            const subTickContext = subNote.getTickContext();\n            if (stave)\n                subNote.setStave(stave);\n            subTickContext.setXOffset(subNoteXOffset); // don't touch baseX to avoid shift each render\n        });\n    }\n}\n","// This file was generated by `glyph_codes.js'\n// The enum includes all SMuFL glyphs, and a few others that VexFlow uses.\n// See the list of SMuFL glyphs:\n//   https://w3c.github.io/smufl/latest/tables/\n//   https://raw.githubusercontent.com/w3c/smufl/gh-pages/metadata/glyphnames.json\n// We renamed the two SMuFL names that start with a digit:\n//   4stringTabClef => fourStringTabClef\n//   6stringTabClef => sixStringTabClef\n//\nexport var Glyphs;\n(function (Glyphs) {\n    ////// SPECIAL GLYPHS ///////////////////////////////////////\n    // Null character\n    Glyphs[\"null\"] = \"\\0\";\n    ////// SMuFL GLYPHS /////////////////////////////////////////\n    // U+E06E  4-string tab clef\n    Glyphs[\"fourStringTabClef\"] = \"\\uE06E\";\n    // U+E06D  6-string tab clef\n    Glyphs[\"sixStringTabClef\"] = \"\\uE06D\";\n    // U+E30D  11 large diesis down, 3° down [46 EDO]\n    Glyphs[\"accSagittal11LargeDiesisDown\"] = \"\\uE30D\";\n    // U+E30C  11 large diesis up, (11L), (sharp less 11M), 3° up [46 EDO]\n    Glyphs[\"accSagittal11LargeDiesisUp\"] = \"\\uE30C\";\n    // U+E30B  11 medium diesis down, 1°[17 31] 2°46 down, 1/4-tone down\n    Glyphs[\"accSagittal11MediumDiesisDown\"] = \"\\uE30B\";\n    // U+E30A  11 medium diesis up, (11M), 1°[17 31] 2°46 up, 1/4-tone up\n    Glyphs[\"accSagittal11MediumDiesisUp\"] = \"\\uE30A\";\n    // U+E3AB  11:19 large diesis down\n    Glyphs[\"accSagittal11v19LargeDiesisDown\"] = \"\\uE3AB\";\n    // U+E3AA  11:19 large diesis up, (11:19L, apotome less 11:19M)\n    Glyphs[\"accSagittal11v19LargeDiesisUp\"] = \"\\uE3AA\";\n    // U+E3A3  11:19 medium diesis down\n    Glyphs[\"accSagittal11v19MediumDiesisDown\"] = \"\\uE3A3\";\n    // U+E3A2  11:19 medium diesis up, (11:19M, 11M plus 19s)\n    Glyphs[\"accSagittal11v19MediumDiesisUp\"] = \"\\uE3A2\";\n    // U+E397  11:49 comma down\n    Glyphs[\"accSagittal11v49CommaDown\"] = \"\\uE397\";\n    // U+E396  11:49 comma up, (11:49C, 11M less 49C)\n    Glyphs[\"accSagittal11v49CommaUp\"] = \"\\uE396\";\n    // U+E395  143 comma down\n    Glyphs[\"accSagittal143CommaDown\"] = \"\\uE395\";\n    // U+E394  143 comma up, (143C, 13L less 11M)\n    Glyphs[\"accSagittal143CommaUp\"] = \"\\uE394\";\n    // U+E343  17 comma down\n    Glyphs[\"accSagittal17CommaDown\"] = \"\\uE343\";\n    // U+E342  17 comma up, (17C)\n    Glyphs[\"accSagittal17CommaUp\"] = \"\\uE342\";\n    // U+E393  17 kleisma down\n    Glyphs[\"accSagittal17KleismaDown\"] = \"\\uE393\";\n    // U+E392  17 kleisma up, (17k)\n    Glyphs[\"accSagittal17KleismaUp\"] = \"\\uE392\";\n    // U+E399  19 comma down\n    Glyphs[\"accSagittal19CommaDown\"] = \"\\uE399\";\n    // U+E398  19 comma up, (19C)\n    Glyphs[\"accSagittal19CommaUp\"] = \"\\uE398\";\n    // U+E391  19 schisma down\n    Glyphs[\"accSagittal19SchismaDown\"] = \"\\uE391\";\n    // U+E390  19 schisma up, (19s)\n    Glyphs[\"accSagittal19SchismaUp\"] = \"\\uE390\";\n    // U+E3F5  1 mina down, 1/(5⋅7⋅13)-schismina down, 0.42 cents down\n    Glyphs[\"accSagittal1MinaDown\"] = \"\\uE3F5\";\n    // U+E3F4  1 mina up, 1/(5⋅7⋅13)-schismina up, 0.42 cents up\n    Glyphs[\"accSagittal1MinaUp\"] = \"\\uE3F4\";\n    // U+E3F9  1 tina down, 7²⋅11⋅19/5-schismina down, 0.17 cents down\n    Glyphs[\"accSagittal1TinaDown\"] = \"\\uE3F9\";\n    // U+E3F8  1 tina up, 7²⋅11⋅19/5-schismina up, 0.17 cents up\n    Glyphs[\"accSagittal1TinaUp\"] = \"\\uE3F8\";\n    // U+E371  23 comma down, 2° down [96 EDO], 1/8-tone down\n    Glyphs[\"accSagittal23CommaDown\"] = \"\\uE371\";\n    // U+E370  23 comma up, (23C), 2° up [96 EDO], 1/8-tone up\n    Glyphs[\"accSagittal23CommaUp\"] = \"\\uE370\";\n    // U+E39F  23 small diesis down\n    Glyphs[\"accSagittal23SmallDiesisDown\"] = \"\\uE39F\";\n    // U+E39E  23 small diesis up, (23S)\n    Glyphs[\"accSagittal23SmallDiesisUp\"] = \"\\uE39E\";\n    // U+E307  25 small diesis down, 2° down [53 EDO]\n    Glyphs[\"accSagittal25SmallDiesisDown\"] = \"\\uE307\";\n    // U+E306  25 small diesis up, (25S, ~5:13S, ~37S, 5C plus 5C), 2° up [53 EDO]\n    Glyphs[\"accSagittal25SmallDiesisUp\"] = \"\\uE306\";\n    // U+E3F7  2 minas down, 65/77-schismina down, 0.83 cents down\n    Glyphs[\"accSagittal2MinasDown\"] = \"\\uE3F7\";\n    // U+E3F6  2 minas up, 65/77-schismina up, 0.83 cents up\n    Glyphs[\"accSagittal2MinasUp\"] = \"\\uE3F6\";\n    // U+E3FB  2 tinas down, 1/(7³⋅17)-schismina down, 0.30 cents down\n    Glyphs[\"accSagittal2TinasDown\"] = \"\\uE3FB\";\n    // U+E3FA  2 tinas up, 1/(7³⋅17)-schismina up, 0.30 cents up\n    Glyphs[\"accSagittal2TinasUp\"] = \"\\uE3FA\";\n    // U+E30F  35 large diesis down, 2° down [50 EDO], 5/18-tone down\n    Glyphs[\"accSagittal35LargeDiesisDown\"] = \"\\uE30F\";\n    // U+E30E  35 large diesis up, (35L, ~13L, ~125L, sharp less 35M), 2°50 up\n    Glyphs[\"accSagittal35LargeDiesisUp\"] = \"\\uE30E\";\n    // U+E309  35 medium diesis down, 1°[50] 2°[27] down, 2/9-tone down\n    Glyphs[\"accSagittal35MediumDiesisDown\"] = \"\\uE309\";\n    // U+E308  35 medium diesis up, (35M, ~13M, ~125M, 5C plus 7C), 2/9-tone up\n    Glyphs[\"accSagittal35MediumDiesisUp\"] = \"\\uE308\";\n    // U+E3FD  3 tinas down, 1 mina down, 1/(5⋅7⋅13)-schismina down, 0.42 cents down\n    Glyphs[\"accSagittal3TinasDown\"] = \"\\uE3FD\";\n    // U+E3FC  3 tinas up, 1 mina up, 1/(5⋅7⋅13)-schismina up, 0.42 cents up\n    Glyphs[\"accSagittal3TinasUp\"] = \"\\uE3FC\";\n    // U+E3A9  49 large diesis down\n    Glyphs[\"accSagittal49LargeDiesisDown\"] = \"\\uE3A9\";\n    // U+E3A8  49 large diesis up, (49L, ~31L, apotome less 49M)\n    Glyphs[\"accSagittal49LargeDiesisUp\"] = \"\\uE3A8\";\n    // U+E3A5  49 medium diesis down\n    Glyphs[\"accSagittal49MediumDiesisDown\"] = \"\\uE3A5\";\n    // U+E3A4  49 medium diesis up, (49M, ~31M, 7C plus 7C)\n    Glyphs[\"accSagittal49MediumDiesisUp\"] = \"\\uE3A4\";\n    // U+E39D  49 small diesis down\n    Glyphs[\"accSagittal49SmallDiesisDown\"] = \"\\uE39D\";\n    // U+E39C  49 small diesis up, (49S, ~31S)\n    Glyphs[\"accSagittal49SmallDiesisUp\"] = \"\\uE39C\";\n    // U+E3FF  4 tinas down, 5²⋅11²/7-schismina down, 0.57 cents down\n    Glyphs[\"accSagittal4TinasDown\"] = \"\\uE3FF\";\n    // U+E3FE  4 tinas up, 5²⋅11²/7-schismina up, 0.57 cents up\n    Glyphs[\"accSagittal4TinasUp\"] = \"\\uE3FE\";\n    // U+E345  55 comma down, 3° down [96 EDO], 3/16-tone down\n    Glyphs[\"accSagittal55CommaDown\"] = \"\\uE345\";\n    // U+E344  55 comma up, (55C, 11M less 5C), 3°up [96 EDO], 3/16-tone up\n    Glyphs[\"accSagittal55CommaUp\"] = \"\\uE344\";\n    // U+E303  5 comma down, 1° down [22 27 29 34 41 46 53 96 EDOs], 1/12-tone down\n    Glyphs[\"accSagittal5CommaDown\"] = \"\\uE303\";\n    // U+E302  5 comma up, (5C), 1° up [22 27 29 34 41 46 53 96 EDOs], 1/12-tone up\n    Glyphs[\"accSagittal5CommaUp\"] = \"\\uE302\";\n    // U+E401  5 tinas down, 7⁴/25-schismina down, 0.72 cents down\n    Glyphs[\"accSagittal5TinasDown\"] = \"\\uE401\";\n    // U+E400  5 tinas up, 7⁴/25-schismina up, 0.72 cents up\n    Glyphs[\"accSagittal5TinasUp\"] = \"\\uE400\";\n    // U+E349  5:11 small diesis down\n    Glyphs[\"accSagittal5v11SmallDiesisDown\"] = \"\\uE349\";\n    // U+E348  5:11 small diesis up, (5:11S, ~7:13S, ~11:17S, 5:7k plus 7:11C)\n    Glyphs[\"accSagittal5v11SmallDiesisUp\"] = \"\\uE348\";\n    // U+E3AD  5:13 large diesis down\n    Glyphs[\"accSagittal5v13LargeDiesisDown\"] = \"\\uE3AD\";\n    // U+E3AC  5:13 large diesis up, (5:13L, ~37L, apotome less 5:13M)\n    Glyphs[\"accSagittal5v13LargeDiesisUp\"] = \"\\uE3AC\";\n    // U+E3A1  5:13 medium diesis down\n    Glyphs[\"accSagittal5v13MediumDiesisDown\"] = \"\\uE3A1\";\n    // U+E3A0  5:13 medium diesis up, (5:13M, ~37M, 5C plus 13C)\n    Glyphs[\"accSagittal5v13MediumDiesisUp\"] = \"\\uE3A0\";\n    // U+E373  5:19 comma down, 1/20-tone down\n    Glyphs[\"accSagittal5v19CommaDown\"] = \"\\uE373\";\n    // U+E372  5:19 comma up, (5:19C, 5C plus 19s), 1/20-tone up\n    Glyphs[\"accSagittal5v19CommaUp\"] = \"\\uE372\";\n    // U+E375  5:23 small diesis down, 2° down [60 EDO], 1/5-tone down\n    Glyphs[\"accSagittal5v23SmallDiesisDown\"] = \"\\uE375\";\n    // U+E374  5:23 small diesis up, (5:23S, 5C plus 23C), 2° up [60 EDO], 1/5-tone up\n    Glyphs[\"accSagittal5v23SmallDiesisUp\"] = \"\\uE374\";\n    // U+E3A7  5:49 medium diesis down\n    Glyphs[\"accSagittal5v49MediumDiesisDown\"] = \"\\uE3A7\";\n    // U+E3A6  5:49 medium diesis up, (5:49M, half apotome)\n    Glyphs[\"accSagittal5v49MediumDiesisUp\"] = \"\\uE3A6\";\n    // U+E301  5:7 kleisma down\n    Glyphs[\"accSagittal5v7KleismaDown\"] = \"\\uE301\";\n    // U+E300  5:7 kleisma up, (5:7k, ~11:13k, 7C less 5C)\n    Glyphs[\"accSagittal5v7KleismaUp\"] = \"\\uE300\";\n    // U+E403  6 tinas down, 2 minas down, 65/77-schismina down, 0.83 cents down\n    Glyphs[\"accSagittal6TinasDown\"] = \"\\uE403\";\n    // U+E402  6 tinas up, 2 minas up, 65/77-schismina up, 0.83 cents up\n    Glyphs[\"accSagittal6TinasUp\"] = \"\\uE402\";\n    // U+E305  7 comma down, 1° down [43 EDO], 2° down [72 EDO], 1/6-tone down\n    Glyphs[\"accSagittal7CommaDown\"] = \"\\uE305\";\n    // U+E304  7 comma up, (7C), 1° up [43 EDO], 2° up [72 EDO], 1/6-tone up\n    Glyphs[\"accSagittal7CommaUp\"] = \"\\uE304\";\n    // U+E405  7 tinas down, 7/(5²⋅17)-schismina down, 1.02 cents down\n    Glyphs[\"accSagittal7TinasDown\"] = \"\\uE405\";\n    // U+E404  7 tinas up, 7/(5²⋅17)-schismina up, 1.02 cents up\n    Glyphs[\"accSagittal7TinasUp\"] = \"\\uE404\";\n    // U+E347  7:11 comma down, 1° down [60 EDO], 1/10-tone down\n    Glyphs[\"accSagittal7v11CommaDown\"] = \"\\uE347\";\n    // U+E346  7:11 comma up, (7:11C, ~13:17S, ~29S, 11L less 7C), 1° up [60 EDO]\n    Glyphs[\"accSagittal7v11CommaUp\"] = \"\\uE346\";\n    // U+E341  7:11 kleisma down\n    Glyphs[\"accSagittal7v11KleismaDown\"] = \"\\uE341\";\n    // U+E340  7:11 kleisma up, (7:11k, ~29k)\n    Glyphs[\"accSagittal7v11KleismaUp\"] = \"\\uE340\";\n    // U+E39B  7:19 comma down\n    Glyphs[\"accSagittal7v19CommaDown\"] = \"\\uE39B\";\n    // U+E39A  7:19 comma up, (7:19C, 7C less 19s)\n    Glyphs[\"accSagittal7v19CommaUp\"] = \"\\uE39A\";\n    // U+E407  8 tinas down, 11⋅17/(5²⋅7)-schismina down, 1.14 cents down\n    Glyphs[\"accSagittal8TinasDown\"] = \"\\uE407\";\n    // U+E406  8 tinas up, 11⋅17/(5²⋅7)-schismina up, 1.14 cents up\n    Glyphs[\"accSagittal8TinasUp\"] = \"\\uE406\";\n    // U+E409  9 tinas down, 1/(7²⋅11)-schismina down, 1.26 cents down\n    Glyphs[\"accSagittal9TinasDown\"] = \"\\uE409\";\n    // U+E408  9 tinas up, 1/(7²⋅11)-schismina up, 1.26 cents up\n    Glyphs[\"accSagittal9TinasUp\"] = \"\\uE408\";\n    // U+E3F2  Acute, 5 schisma up (5s), 2 cents up\n    Glyphs[\"accSagittalAcute\"] = \"\\uE3F2\";\n    // U+E335  Double flat, (2 apotomes down)[almost all EDOs], whole-tone down\n    Glyphs[\"accSagittalDoubleFlat\"] = \"\\uE335\";\n    // U+E3E9  Double flat 11:49C-up\n    Glyphs[\"accSagittalDoubleFlat11v49CUp\"] = \"\\uE3E9\";\n    // U+E3EB  Double flat 143C-up\n    Glyphs[\"accSagittalDoubleFlat143CUp\"] = \"\\uE3EB\";\n    // U+E365  Double flat 17C-up\n    Glyphs[\"accSagittalDoubleFlat17CUp\"] = \"\\uE365\";\n    // U+E3ED  Double flat 17k-up\n    Glyphs[\"accSagittalDoubleFlat17kUp\"] = \"\\uE3ED\";\n    // U+E3E7  Double flat 19C-up\n    Glyphs[\"accSagittalDoubleFlat19CUp\"] = \"\\uE3E7\";\n    // U+E3EF  Double flat 19s-up\n    Glyphs[\"accSagittalDoubleFlat19sUp\"] = \"\\uE3EF\";\n    // U+E387  Double flat 23C-up, 14° down [96 EDO], 7/8-tone down\n    Glyphs[\"accSagittalDoubleFlat23CUp\"] = \"\\uE387\";\n    // U+E3E1  Double flat 23S-up\n    Glyphs[\"accSagittalDoubleFlat23SUp\"] = \"\\uE3E1\";\n    // U+E32D  Double flat 25S-up, 8°down [53 EDO]\n    Glyphs[\"accSagittalDoubleFlat25SUp\"] = \"\\uE32D\";\n    // U+E3E3  Double flat 49S-up\n    Glyphs[\"accSagittalDoubleFlat49SUp\"] = \"\\uE3E3\";\n    // U+E363  Double flat 55C-up, 13° down [96 EDO], 13/16-tone down\n    Glyphs[\"accSagittalDoubleFlat55CUp\"] = \"\\uE363\";\n    // U+E331  Double flat 5C-up, 5°[22 29] 7°[34 41] 9°53 down, 11/12 tone down\n    Glyphs[\"accSagittalDoubleFlat5CUp\"] = \"\\uE331\";\n    // U+E35F  Double flat 5:11S-up\n    Glyphs[\"accSagittalDoubleFlat5v11SUp\"] = \"\\uE35F\";\n    // U+E385  Double flat 5:19C-up, 19/20-tone down\n    Glyphs[\"accSagittalDoubleFlat5v19CUp\"] = \"\\uE385\";\n    // U+E383  Double flat 5:23S-up, 8° down [60 EDO], 4/5-tone down\n    Glyphs[\"accSagittalDoubleFlat5v23SUp\"] = \"\\uE383\";\n    // U+E333  Double flat 5:7k-up\n    Glyphs[\"accSagittalDoubleFlat5v7kUp\"] = \"\\uE333\";\n    // U+E32F  Double flat 7C-up, 5° down [43 EDO], 10° down [72 EDO], 5/6-tone down\n    Glyphs[\"accSagittalDoubleFlat7CUp\"] = \"\\uE32F\";\n    // U+E361  Double flat 7:11C-up, 9° down [60 EDO], 9/10-tone down\n    Glyphs[\"accSagittalDoubleFlat7v11CUp\"] = \"\\uE361\";\n    // U+E367  Double flat 7:11k-up\n    Glyphs[\"accSagittalDoubleFlat7v11kUp\"] = \"\\uE367\";\n    // U+E3E5  Double flat 7:19C-up\n    Glyphs[\"accSagittalDoubleFlat7v19CUp\"] = \"\\uE3E5\";\n    // U+E334  Double sharp, (2 apotomes up)[almost all EDOs], whole-tone up\n    Glyphs[\"accSagittalDoubleSharp\"] = \"\\uE334\";\n    // U+E3E8  Double sharp 11:49C-down\n    Glyphs[\"accSagittalDoubleSharp11v49CDown\"] = \"\\uE3E8\";\n    // U+E3EA  Double sharp 143C-down\n    Glyphs[\"accSagittalDoubleSharp143CDown\"] = \"\\uE3EA\";\n    // U+E364  Double sharp 17C-down\n    Glyphs[\"accSagittalDoubleSharp17CDown\"] = \"\\uE364\";\n    // U+E3EC  Double sharp 17k-down\n    Glyphs[\"accSagittalDoubleSharp17kDown\"] = \"\\uE3EC\";\n    // U+E3E6  Double sharp 19C-down\n    Glyphs[\"accSagittalDoubleSharp19CDown\"] = \"\\uE3E6\";\n    // U+E3EE  Double sharp 19s-down\n    Glyphs[\"accSagittalDoubleSharp19sDown\"] = \"\\uE3EE\";\n    // U+E386  Double sharp 23C-down, 14°up [96 EDO], 7/8-tone up\n    Glyphs[\"accSagittalDoubleSharp23CDown\"] = \"\\uE386\";\n    // U+E3E0  Double sharp 23S-down\n    Glyphs[\"accSagittalDoubleSharp23SDown\"] = \"\\uE3E0\";\n    // U+E32C  Double sharp 25S-down, 8°up [53 EDO]\n    Glyphs[\"accSagittalDoubleSharp25SDown\"] = \"\\uE32C\";\n    // U+E3E2  Double sharp 49S-down\n    Glyphs[\"accSagittalDoubleSharp49SDown\"] = \"\\uE3E2\";\n    // U+E362  Double sharp 55C-down, 13° up [96 EDO], 13/16-tone up\n    Glyphs[\"accSagittalDoubleSharp55CDown\"] = \"\\uE362\";\n    // U+E330  Double sharp 5C-down, 5°[22 29] 7°[34 41] 9°53 up, 11/12 tone up\n    Glyphs[\"accSagittalDoubleSharp5CDown\"] = \"\\uE330\";\n    // U+E35E  Double sharp 5:11S-down\n    Glyphs[\"accSagittalDoubleSharp5v11SDown\"] = \"\\uE35E\";\n    // U+E384  Double sharp 5:19C-down, 19/20-tone up\n    Glyphs[\"accSagittalDoubleSharp5v19CDown\"] = \"\\uE384\";\n    // U+E382  Double sharp 5:23S-down, 8° up [60 EDO], 4/5-tone up\n    Glyphs[\"accSagittalDoubleSharp5v23SDown\"] = \"\\uE382\";\n    // U+E332  Double sharp 5:7k-down\n    Glyphs[\"accSagittalDoubleSharp5v7kDown\"] = \"\\uE332\";\n    // U+E32E  Double sharp 7C-down, 5°[43] 10°[72] up, 5/6-tone up\n    Glyphs[\"accSagittalDoubleSharp7CDown\"] = \"\\uE32E\";\n    // U+E360  Double sharp 7:11C-down, 9° up [60 EDO], 9/10-tone up\n    Glyphs[\"accSagittalDoubleSharp7v11CDown\"] = \"\\uE360\";\n    // U+E366  Double sharp 7:11k-down\n    Glyphs[\"accSagittalDoubleSharp7v11kDown\"] = \"\\uE366\";\n    // U+E3E4  Double sharp 7:19C-down\n    Glyphs[\"accSagittalDoubleSharp7v19CDown\"] = \"\\uE3E4\";\n    // U+E319  Flat, (apotome down)[almost all EDOs], 1/2-tone down\n    Glyphs[\"accSagittalFlat\"] = \"\\uE319\";\n    // U+E329  Flat 11L-down, 8° up [46 EDO]\n    Glyphs[\"accSagittalFlat11LDown\"] = \"\\uE329\";\n    // U+E327  Flat 11M-down, 3° down [17 31 EDOs], 7° down [46 EDO], 3/4-tone down\n    Glyphs[\"accSagittalFlat11MDown\"] = \"\\uE327\";\n    // U+E3DB  Flat 11:19L-down\n    Glyphs[\"accSagittalFlat11v19LDown\"] = \"\\uE3DB\";\n    // U+E3D3  Flat 11:19M-down\n    Glyphs[\"accSagittalFlat11v19MDown\"] = \"\\uE3D3\";\n    // U+E3C7  Flat 11:49C-down\n    Glyphs[\"accSagittalFlat11v49CDown\"] = \"\\uE3C7\";\n    // U+E3B9  Flat 11:49C-up\n    Glyphs[\"accSagittalFlat11v49CUp\"] = \"\\uE3B9\";\n    // U+E3C5  Flat 143C-down\n    Glyphs[\"accSagittalFlat143CDown\"] = \"\\uE3C5\";\n    // U+E3BB  Flat 143C-up\n    Glyphs[\"accSagittalFlat143CUp\"] = \"\\uE3BB\";\n    // U+E357  Flat 17C-down\n    Glyphs[\"accSagittalFlat17CDown\"] = \"\\uE357\";\n    // U+E351  Flat 17C-up\n    Glyphs[\"accSagittalFlat17CUp\"] = \"\\uE351\";\n    // U+E3C3  Flat 17k-down\n    Glyphs[\"accSagittalFlat17kDown\"] = \"\\uE3C3\";\n    // U+E3BD  Flat 17k-up\n    Glyphs[\"accSagittalFlat17kUp\"] = \"\\uE3BD\";\n    // U+E3C9  Flat 19C-down\n    Glyphs[\"accSagittalFlat19CDown\"] = \"\\uE3C9\";\n    // U+E3B7  Flat 19C-up\n    Glyphs[\"accSagittalFlat19CUp\"] = \"\\uE3B7\";\n    // U+E3C1  Flat 19s-down\n    Glyphs[\"accSagittalFlat19sDown\"] = \"\\uE3C1\";\n    // U+E3BF  Flat 19s-up\n    Glyphs[\"accSagittalFlat19sUp\"] = \"\\uE3BF\";\n    // U+E37D  Flat 23C-down, 10° down [96 EDO], 5/8-tone down\n    Glyphs[\"accSagittalFlat23CDown\"] = \"\\uE37D\";\n    // U+E37B  Flat 23C-up, 6° down [96 EDO], 3/8-tone down\n    Glyphs[\"accSagittalFlat23CUp\"] = \"\\uE37B\";\n    // U+E3CF  Flat 23S-down\n    Glyphs[\"accSagittalFlat23SDown\"] = \"\\uE3CF\";\n    // U+E3B1  Flat 23S-up\n    Glyphs[\"accSagittalFlat23SUp\"] = \"\\uE3B1\";\n    // U+E323  Flat 25S-down, 7° down [53 EDO]\n    Glyphs[\"accSagittalFlat25SDown\"] = \"\\uE323\";\n    // U+E311  Flat 25S-up, 3° down [53 EDO]\n    Glyphs[\"accSagittalFlat25SUp\"] = \"\\uE311\";\n    // U+E32B  Flat 35L-down, 5° down [50 EDO]\n    Glyphs[\"accSagittalFlat35LDown\"] = \"\\uE32B\";\n    // U+E325  Flat 35M-down, 4° down [50 EDO], 6° down [27 EDO], 13/18-tone down\n    Glyphs[\"accSagittalFlat35MDown\"] = \"\\uE325\";\n    // U+E3D9  Flat 49L-down\n    Glyphs[\"accSagittalFlat49LDown\"] = \"\\uE3D9\";\n    // U+E3D5  Flat 49M-down\n    Glyphs[\"accSagittalFlat49MDown\"] = \"\\uE3D5\";\n    // U+E3CD  Flat 49S-down\n    Glyphs[\"accSagittalFlat49SDown\"] = \"\\uE3CD\";\n    // U+E3B3  Flat 49S-up\n    Glyphs[\"accSagittalFlat49SUp\"] = \"\\uE3B3\";\n    // U+E359  Flat 55C-down, 11° down [96 EDO], 11/16-tone down\n    Glyphs[\"accSagittalFlat55CDown\"] = \"\\uE359\";\n    // U+E34F  Flat 55C-up, 5° down [96 EDO], 5/16-tone down\n    Glyphs[\"accSagittalFlat55CUp\"] = \"\\uE34F\";\n    // U+E31F  Flat 5C-down, 4°[22 29] 5°[27 34 41] 6°[39 46 53] down, 7/12-tone down\n    Glyphs[\"accSagittalFlat5CDown\"] = \"\\uE31F\";\n    // U+E315  Flat 5C-up, 2°[22 29] 3°[27 34 41] 4°[39 46 53] 5°72 7°[96] down, 5/12-tone down\n    Glyphs[\"accSagittalFlat5CUp\"] = \"\\uE315\";\n    // U+E35D  Flat 5:11S-down\n    Glyphs[\"accSagittalFlat5v11SDown\"] = \"\\uE35D\";\n    // U+E34B  Flat 5:11S-up\n    Glyphs[\"accSagittalFlat5v11SUp\"] = \"\\uE34B\";\n    // U+E3DD  Flat 5:13L-down\n    Glyphs[\"accSagittalFlat5v13LDown\"] = \"\\uE3DD\";\n    // U+E3D1  Flat 5:13M-down\n    Glyphs[\"accSagittalFlat5v13MDown\"] = \"\\uE3D1\";\n    // U+E37F  Flat 5:19C-down, 11/20-tone down\n    Glyphs[\"accSagittalFlat5v19CDown\"] = \"\\uE37F\";\n    // U+E379  Flat 5:19C-up, 9/20-tone down\n    Glyphs[\"accSagittalFlat5v19CUp\"] = \"\\uE379\";\n    // U+E381  Flat 5:23S-down, 7° down [60 EDO], 7/10-tone down\n    Glyphs[\"accSagittalFlat5v23SDown\"] = \"\\uE381\";\n    // U+E377  Flat 5:23S-up, 3° down [60 EDO], 3/10-tone down\n    Glyphs[\"accSagittalFlat5v23SUp\"] = \"\\uE377\";\n    // U+E3D7  Flat 5:49M-down\n    Glyphs[\"accSagittalFlat5v49MDown\"] = \"\\uE3D7\";\n    // U+E31D  Flat 5:7k-down\n    Glyphs[\"accSagittalFlat5v7kDown\"] = \"\\uE31D\";\n    // U+E317  Flat 5:7k-up\n    Glyphs[\"accSagittalFlat5v7kUp\"] = \"\\uE317\";\n    // U+E321  Flat 7C-down, 4° down [43 EDO], 8° down [72 EDO], 2/3-tone down\n    Glyphs[\"accSagittalFlat7CDown\"] = \"\\uE321\";\n    // U+E313  Flat 7C-up, 2° down [43 EDO], 4° down [72 EDO], 1/3-tone down\n    Glyphs[\"accSagittalFlat7CUp\"] = \"\\uE313\";\n    // U+E35B  Flat 7:11C-down, 6° down [60 EDO], 3/5- tone down\n    Glyphs[\"accSagittalFlat7v11CDown\"] = \"\\uE35B\";\n    // U+E34D  Flat 7:11C-up, 4° down [60 EDO], 2/5-tone down\n    Glyphs[\"accSagittalFlat7v11CUp\"] = \"\\uE34D\";\n    // U+E355  Flat 7:11k-down\n    Glyphs[\"accSagittalFlat7v11kDown\"] = \"\\uE355\";\n    // U+E353  Flat 7:11k-up\n    Glyphs[\"accSagittalFlat7v11kUp\"] = \"\\uE353\";\n    // U+E3CB  Flat 7:19C-down\n    Glyphs[\"accSagittalFlat7v19CDown\"] = \"\\uE3CB\";\n    // U+E3B5  Flat 7:19C-up\n    Glyphs[\"accSagittalFlat7v19CUp\"] = \"\\uE3B5\";\n    // U+E40B  Fractional tina down, 77/(5⋅37)-schismina down, 0.08 cents down\n    Glyphs[\"accSagittalFractionalTinaDown\"] = \"\\uE40B\";\n    // U+E40A  Fractional tina up, 77/(5⋅37)-schismina up, 0.08 cents up\n    Glyphs[\"accSagittalFractionalTinaUp\"] = \"\\uE40A\";\n    // U+E3F3  Grave, 5 schisma down, 2 cents down\n    Glyphs[\"accSagittalGrave\"] = \"\\uE3F3\";\n    // U+E3F1  Shaft down, (natural for use with only diacritics down)\n    Glyphs[\"accSagittalShaftDown\"] = \"\\uE3F1\";\n    // U+E3F0  Shaft up, (natural for use with only diacritics up)\n    Glyphs[\"accSagittalShaftUp\"] = \"\\uE3F0\";\n    // U+E318  Sharp, (apotome up)[almost all EDOs], 1/2-tone up\n    Glyphs[\"accSagittalSharp\"] = \"\\uE318\";\n    // U+E328  Sharp 11L-up, 8° up [46 EDO]\n    Glyphs[\"accSagittalSharp11LUp\"] = \"\\uE328\";\n    // U+E326  Sharp 11M-up, 3° up [17 31 EDOs], 7° up [46 EDO], 3/4-tone up\n    Glyphs[\"accSagittalSharp11MUp\"] = \"\\uE326\";\n    // U+E3DA  Sharp 11:19L-up\n    Glyphs[\"accSagittalSharp11v19LUp\"] = \"\\uE3DA\";\n    // U+E3D2  Sharp 11:19M-up\n    Glyphs[\"accSagittalSharp11v19MUp\"] = \"\\uE3D2\";\n    // U+E3B8  Sharp 11:49C-down\n    Glyphs[\"accSagittalSharp11v49CDown\"] = \"\\uE3B8\";\n    // U+E3C6  Sharp 11:49C-up\n    Glyphs[\"accSagittalSharp11v49CUp\"] = \"\\uE3C6\";\n    // U+E3BA  Sharp 143C-down\n    Glyphs[\"accSagittalSharp143CDown\"] = \"\\uE3BA\";\n    // U+E3C4  Sharp 143C-up\n    Glyphs[\"accSagittalSharp143CUp\"] = \"\\uE3C4\";\n    // U+E350  Sharp 17C-down\n    Glyphs[\"accSagittalSharp17CDown\"] = \"\\uE350\";\n    // U+E356  Sharp 17C-up\n    Glyphs[\"accSagittalSharp17CUp\"] = \"\\uE356\";\n    // U+E3BC  Sharp 17k-down\n    Glyphs[\"accSagittalSharp17kDown\"] = \"\\uE3BC\";\n    // U+E3C2  Sharp 17k-up\n    Glyphs[\"accSagittalSharp17kUp\"] = \"\\uE3C2\";\n    // U+E3B6  Sharp 19C-down\n    Glyphs[\"accSagittalSharp19CDown\"] = \"\\uE3B6\";\n    // U+E3C8  Sharp 19C-up\n    Glyphs[\"accSagittalSharp19CUp\"] = \"\\uE3C8\";\n    // U+E3BE  Sharp 19s-down\n    Glyphs[\"accSagittalSharp19sDown\"] = \"\\uE3BE\";\n    // U+E3C0  Sharp 19s-up\n    Glyphs[\"accSagittalSharp19sUp\"] = \"\\uE3C0\";\n    // U+E37A  Sharp 23C-down, 6° up [96 EDO], 3/8-tone up\n    Glyphs[\"accSagittalSharp23CDown\"] = \"\\uE37A\";\n    // U+E37C  Sharp 23C-up, 10° up [96 EDO], 5/8-tone up\n    Glyphs[\"accSagittalSharp23CUp\"] = \"\\uE37C\";\n    // U+E3B0  Sharp 23S-down\n    Glyphs[\"accSagittalSharp23SDown\"] = \"\\uE3B0\";\n    // U+E3CE  Sharp 23S-up\n    Glyphs[\"accSagittalSharp23SUp\"] = \"\\uE3CE\";\n    // U+E310  Sharp 25S-down, 3° up [53 EDO]\n    Glyphs[\"accSagittalSharp25SDown\"] = \"\\uE310\";\n    // U+E322  Sharp 25S-up, 7° up [53 EDO]\n    Glyphs[\"accSagittalSharp25SUp\"] = \"\\uE322\";\n    // U+E32A  Sharp 35L-up, 5° up [50 EDO]\n    Glyphs[\"accSagittalSharp35LUp\"] = \"\\uE32A\";\n    // U+E324  Sharp 35M-up, 4° up [50 EDO], 6° up [27 EDO], 13/18-tone up\n    Glyphs[\"accSagittalSharp35MUp\"] = \"\\uE324\";\n    // U+E3D8  Sharp 49L-up\n    Glyphs[\"accSagittalSharp49LUp\"] = \"\\uE3D8\";\n    // U+E3D4  Sharp 49M-up\n    Glyphs[\"accSagittalSharp49MUp\"] = \"\\uE3D4\";\n    // U+E3B2  Sharp 49S-down\n    Glyphs[\"accSagittalSharp49SDown\"] = \"\\uE3B2\";\n    // U+E3CC  Sharp 49S-up\n    Glyphs[\"accSagittalSharp49SUp\"] = \"\\uE3CC\";\n    // U+E34E  Sharp 55C-down, 5° up [96 EDO], 5/16-tone up\n    Glyphs[\"accSagittalSharp55CDown\"] = \"\\uE34E\";\n    // U+E358  Sharp 55C-up, 11° up [96 EDO], 11/16-tone up\n    Glyphs[\"accSagittalSharp55CUp\"] = \"\\uE358\";\n    // U+E314  Sharp 5C-down, 2°[22 29] 3°[27 34 41] 4°[39 46 53] 5°[72] 7°[96] up, 5/12-tone up\n    Glyphs[\"accSagittalSharp5CDown\"] = \"\\uE314\";\n    // U+E31E  Sharp 5C-up, 4°[22 29] 5°[27 34 41] 6°[39 46 53] up, 7/12-tone up\n    Glyphs[\"accSagittalSharp5CUp\"] = \"\\uE31E\";\n    // U+E34A  Sharp 5:11S-down\n    Glyphs[\"accSagittalSharp5v11SDown\"] = \"\\uE34A\";\n    // U+E35C  Sharp 5:11S-up\n    Glyphs[\"accSagittalSharp5v11SUp\"] = \"\\uE35C\";\n    // U+E3DC  Sharp 5:13L-up\n    Glyphs[\"accSagittalSharp5v13LUp\"] = \"\\uE3DC\";\n    // U+E3D0  Sharp 5:13M-up\n    Glyphs[\"accSagittalSharp5v13MUp\"] = \"\\uE3D0\";\n    // U+E378  Sharp 5:19C-down, 9/20-tone up\n    Glyphs[\"accSagittalSharp5v19CDown\"] = \"\\uE378\";\n    // U+E37E  Sharp 5:19C-up, 11/20-tone up\n    Glyphs[\"accSagittalSharp5v19CUp\"] = \"\\uE37E\";\n    // U+E376  Sharp 5:23S-down, 3° up [60 EDO], 3/10-tone up\n    Glyphs[\"accSagittalSharp5v23SDown\"] = \"\\uE376\";\n    // U+E380  Sharp 5:23S-up, 7° up [60 EDO], 7/10-tone up\n    Glyphs[\"accSagittalSharp5v23SUp\"] = \"\\uE380\";\n    // U+E3D6  Sharp 5:49M-up, (one and a half apotomes)\n    Glyphs[\"accSagittalSharp5v49MUp\"] = \"\\uE3D6\";\n    // U+E316  Sharp 5:7k-down\n    Glyphs[\"accSagittalSharp5v7kDown\"] = \"\\uE316\";\n    // U+E31C  Sharp 5:7k-up\n    Glyphs[\"accSagittalSharp5v7kUp\"] = \"\\uE31C\";\n    // U+E312  Sharp 7C-down, 2° up [43 EDO], 4° up [72 EDO], 1/3-tone up\n    Glyphs[\"accSagittalSharp7CDown\"] = \"\\uE312\";\n    // U+E320  Sharp 7C-up, 4° up [43 EDO], 8° up [72 EDO], 2/3-tone up\n    Glyphs[\"accSagittalSharp7CUp\"] = \"\\uE320\";\n    // U+E34C  Sharp 7:11C-down, 4° up [60 EDO], 2/5-tone up\n    Glyphs[\"accSagittalSharp7v11CDown\"] = \"\\uE34C\";\n    // U+E35A  Sharp 7:11C-up, 6° up [60 EDO], 3/5- tone up\n    Glyphs[\"accSagittalSharp7v11CUp\"] = \"\\uE35A\";\n    // U+E352  Sharp 7:11k-down\n    Glyphs[\"accSagittalSharp7v11kDown\"] = \"\\uE352\";\n    // U+E354  Sharp 7:11k-up\n    Glyphs[\"accSagittalSharp7v11kUp\"] = \"\\uE354\";\n    // U+E3B4  Sharp 7:19C-down\n    Glyphs[\"accSagittalSharp7v19CDown\"] = \"\\uE3B4\";\n    // U+E3CA  Sharp 7:19C-up\n    Glyphs[\"accSagittalSharp7v19CUp\"] = \"\\uE3CA\";\n    // U+E31A  Unused\n    Glyphs[\"accSagittalUnused1\"] = \"\\uE31A\";\n    // U+E31B  Unused\n    Glyphs[\"accSagittalUnused2\"] = \"\\uE31B\";\n    // U+E3DE  Unused\n    Glyphs[\"accSagittalUnused3\"] = \"\\uE3DE\";\n    // U+E3DF  Unused\n    Glyphs[\"accSagittalUnused4\"] = \"\\uE3DF\";\n    // U+E8CA  Combining accordion coupler dot\n    Glyphs[\"accdnCombDot\"] = \"\\uE8CA\";\n    // U+E8C8  Combining left hand, 2 ranks, empty\n    Glyphs[\"accdnCombLH2RanksEmpty\"] = \"\\uE8C8\";\n    // U+E8C9  Combining left hand, 3 ranks, empty (square)\n    Glyphs[\"accdnCombLH3RanksEmptySquare\"] = \"\\uE8C9\";\n    // U+E8C6  Combining right hand, 3 ranks, empty\n    Glyphs[\"accdnCombRH3RanksEmpty\"] = \"\\uE8C6\";\n    // U+E8C7  Combining right hand, 4 ranks, empty\n    Glyphs[\"accdnCombRH4RanksEmpty\"] = \"\\uE8C7\";\n    // U+E079  Diatonic accordion clef\n    Glyphs[\"accdnDiatonicClef\"] = \"\\uE079\";\n    // U+E8BC  Left hand, 2 ranks, 16' stop (round)\n    Glyphs[\"accdnLH2Ranks16Round\"] = \"\\uE8BC\";\n    // U+E8BD  Left hand, 2 ranks, 8' stop + 16' stop (round)\n    Glyphs[\"accdnLH2Ranks8Plus16Round\"] = \"\\uE8BD\";\n    // U+E8BB  Left hand, 2 ranks, 8' stop (round)\n    Glyphs[\"accdnLH2Ranks8Round\"] = \"\\uE8BB\";\n    // U+E8C0  Left hand, 2 ranks, full master (round)\n    Glyphs[\"accdnLH2RanksFullMasterRound\"] = \"\\uE8C0\";\n    // U+E8BF  Left hand, 2 ranks, master + 16' stop (round)\n    Glyphs[\"accdnLH2RanksMasterPlus16Round\"] = \"\\uE8BF\";\n    // U+E8BE  Left hand, 2 ranks, master (round)\n    Glyphs[\"accdnLH2RanksMasterRound\"] = \"\\uE8BE\";\n    // U+E8C4  Left hand, 3 ranks, 2' stop + 8' stop (square)\n    Glyphs[\"accdnLH3Ranks2Plus8Square\"] = \"\\uE8C4\";\n    // U+E8C2  Left hand, 3 ranks, 2' stop (square)\n    Glyphs[\"accdnLH3Ranks2Square\"] = \"\\uE8C2\";\n    // U+E8C1  Left hand, 3 ranks, 8' stop (square)\n    Glyphs[\"accdnLH3Ranks8Square\"] = \"\\uE8C1\";\n    // U+E8C3  Left hand, 3 ranks, double 8' stop (square)\n    Glyphs[\"accdnLH3RanksDouble8Square\"] = \"\\uE8C3\";\n    // U+E8C5  Left hand, 3 ranks, 2' stop + double 8' stop (tutti) (square)\n    Glyphs[\"accdnLH3RanksTuttiSquare\"] = \"\\uE8C5\";\n    // U+E8CC  Pull\n    Glyphs[\"accdnPull\"] = \"\\uE8CC\";\n    // U+E8CB  Push\n    Glyphs[\"accdnPush\"] = \"\\uE8CB\";\n    // U+E8AC  Right hand, 3 ranks, 8' stop + upper tremolo 8' stop + 16' stop (accordion)\n    Glyphs[\"accdnRH3RanksAccordion\"] = \"\\uE8AC\";\n    // U+E8A8  Right hand, 3 ranks, lower tremolo 8' stop + 8' stop + upper tremolo 8' stop (authentic musette)\n    Glyphs[\"accdnRH3RanksAuthenticMusette\"] = \"\\uE8A8\";\n    // U+E8AB  Right hand, 3 ranks, 8' stop + 16' stop (bandoneón)\n    Glyphs[\"accdnRH3RanksBandoneon\"] = \"\\uE8AB\";\n    // U+E8A4  Right hand, 3 ranks, 16' stop (bassoon)\n    Glyphs[\"accdnRH3RanksBassoon\"] = \"\\uE8A4\";\n    // U+E8A1  Right hand, 3 ranks, 8' stop (clarinet)\n    Glyphs[\"accdnRH3RanksClarinet\"] = \"\\uE8A1\";\n    // U+E8B1  Right hand, 3 ranks, lower tremolo 8' stop + 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksDoubleTremoloLower8ve\"] = \"\\uE8B1\";\n    // U+E8B2  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksDoubleTremoloUpper8ve\"] = \"\\uE8B2\";\n    // U+E8B3  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksFullFactory\"] = \"\\uE8B3\";\n    // U+E8AA  Right hand, 3 ranks, 4' stop + 8' stop + 16' stop (harmonium)\n    Glyphs[\"accdnRH3RanksHarmonium\"] = \"\\uE8AA\";\n    // U+E8A7  Right hand, 3 ranks, 4' stop + 8' stop + upper tremolo 8' stop (imitation musette)\n    Glyphs[\"accdnRH3RanksImitationMusette\"] = \"\\uE8A7\";\n    // U+E8A3  Right hand, 3 ranks, lower tremolo 8' stop\n    Glyphs[\"accdnRH3RanksLowerTremolo8\"] = \"\\uE8A3\";\n    // U+E8AD  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + upper tremolo 8' stop + 16' stop (master)\n    Glyphs[\"accdnRH3RanksMaster\"] = \"\\uE8AD\";\n    // U+E8A5  Right hand, 3 ranks, 4' stop + 8' stop (oboe)\n    Glyphs[\"accdnRH3RanksOboe\"] = \"\\uE8A5\";\n    // U+E8A9  Right hand, 3 ranks, 4' stop + 16' stop (organ)\n    Glyphs[\"accdnRH3RanksOrgan\"] = \"\\uE8A9\";\n    // U+E8A0  Right hand, 3 ranks, 4' stop (piccolo)\n    Glyphs[\"accdnRH3RanksPiccolo\"] = \"\\uE8A0\";\n    // U+E8AF  Right hand, 3 ranks, lower tremolo 8' stop + upper tremolo 8' stop + 16' stop\n    Glyphs[\"accdnRH3RanksTremoloLower8ve\"] = \"\\uE8AF\";\n    // U+E8B0  Right hand, 3 ranks, 4' stop + lower tremolo 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksTremoloUpper8ve\"] = \"\\uE8B0\";\n    // U+E8AE  Right hand, 3 ranks, lower tremolo 8' stop + upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksTwoChoirs\"] = \"\\uE8AE\";\n    // U+E8A2  Right hand, 3 ranks, upper tremolo 8' stop\n    Glyphs[\"accdnRH3RanksUpperTremolo8\"] = \"\\uE8A2\";\n    // U+E8A6  Right hand, 3 ranks, 8' stop + upper tremolo 8' stop (violin)\n    Glyphs[\"accdnRH3RanksViolin\"] = \"\\uE8A6\";\n    // U+E8B5  Right hand, 4 ranks, alto\n    Glyphs[\"accdnRH4RanksAlto\"] = \"\\uE8B5\";\n    // U+E8BA  Right hand, 4 ranks, bass/alto\n    Glyphs[\"accdnRH4RanksBassAlto\"] = \"\\uE8BA\";\n    // U+E8B7  Right hand, 4 ranks, master\n    Glyphs[\"accdnRH4RanksMaster\"] = \"\\uE8B7\";\n    // U+E8B8  Right hand, 4 ranks, soft bass\n    Glyphs[\"accdnRH4RanksSoftBass\"] = \"\\uE8B8\";\n    // U+E8B9  Right hand, 4 ranks, soft tenor\n    Glyphs[\"accdnRH4RanksSoftTenor\"] = \"\\uE8B9\";\n    // U+E8B4  Right hand, 4 ranks, soprano\n    Glyphs[\"accdnRH4RanksSoprano\"] = \"\\uE8B4\";\n    // U+E8B6  Right hand, 4 ranks, tenor\n    Glyphs[\"accdnRH4RanksTenor\"] = \"\\uE8B6\";\n    // U+E8CD  Ricochet (2 tones)\n    Glyphs[\"accdnRicochet2\"] = \"\\uE8CD\";\n    // U+E8CE  Ricochet (3 tones)\n    Glyphs[\"accdnRicochet3\"] = \"\\uE8CE\";\n    // U+E8CF  Ricochet (4 tones)\n    Glyphs[\"accdnRicochet4\"] = \"\\uE8CF\";\n    // U+E8D0  Ricochet (5 tones)\n    Glyphs[\"accdnRicochet5\"] = \"\\uE8D0\";\n    // U+E8D1  Ricochet (6 tones)\n    Glyphs[\"accdnRicochet6\"] = \"\\uE8D1\";\n    // U+E8D2  Combining ricochet for stem (2 tones)\n    Glyphs[\"accdnRicochetStem2\"] = \"\\uE8D2\";\n    // U+E8D3  Combining ricochet for stem (3 tones)\n    Glyphs[\"accdnRicochetStem3\"] = \"\\uE8D3\";\n    // U+E8D4  Combining ricochet for stem (4 tones)\n    Glyphs[\"accdnRicochetStem4\"] = \"\\uE8D4\";\n    // U+E8D5  Combining ricochet for stem (5 tones)\n    Glyphs[\"accdnRicochetStem5\"] = \"\\uE8D5\";\n    // U+E8D6  Combining ricochet for stem (6 tones)\n    Glyphs[\"accdnRicochetStem6\"] = \"\\uE8D6\";\n    // U+E454  1-comma flat\n    Glyphs[\"accidental1CommaFlat\"] = \"\\uE454\";\n    // U+E450  1-comma sharp\n    Glyphs[\"accidental1CommaSharp\"] = \"\\uE450\";\n    // U+E455  2-comma flat\n    Glyphs[\"accidental2CommaFlat\"] = \"\\uE455\";\n    // U+E451  2-comma sharp\n    Glyphs[\"accidental2CommaSharp\"] = \"\\uE451\";\n    // U+E456  3-comma flat\n    Glyphs[\"accidental3CommaFlat\"] = \"\\uE456\";\n    // U+E452  3-comma sharp\n    Glyphs[\"accidental3CommaSharp\"] = \"\\uE452\";\n    // U+E457  4-comma flat\n    Glyphs[\"accidental4CommaFlat\"] = \"\\uE457\";\n    // U+E453  5-comma sharp\n    Glyphs[\"accidental5CommaSharp\"] = \"\\uE453\";\n    // U+E27B  Arrow down (lower by one quarter-tone)\n    Glyphs[\"accidentalArrowDown\"] = \"\\uE27B\";\n    // U+E27A  Arrow up (raise by one quarter-tone)\n    Glyphs[\"accidentalArrowUp\"] = \"\\uE27A\";\n    // U+E442  Bakiye (flat)\n    Glyphs[\"accidentalBakiyeFlat\"] = \"\\uE442\";\n    // U+E445  Bakiye (sharp)\n    Glyphs[\"accidentalBakiyeSharp\"] = \"\\uE445\";\n    // U+E26C  Accidental bracket, left\n    Glyphs[\"accidentalBracketLeft\"] = \"\\uE26C\";\n    // U+E26D  Accidental bracket, right\n    Glyphs[\"accidentalBracketRight\"] = \"\\uE26D\";\n    // U+E440  Büyük mücenneb (flat)\n    Glyphs[\"accidentalBuyukMucennebFlat\"] = \"\\uE440\";\n    // U+E447  Büyük mücenneb (sharp)\n    Glyphs[\"accidentalBuyukMucennebSharp\"] = \"\\uE447\";\n    // U+E2EF  Combining close curly brace\n    Glyphs[\"accidentalCombiningCloseCurlyBrace\"] = \"\\uE2EF\";\n    // U+E2E6  Combining lower by one 17-limit schisma\n    Glyphs[\"accidentalCombiningLower17Schisma\"] = \"\\uE2E6\";\n    // U+E2E8  Combining lower by one 19-limit schisma\n    Glyphs[\"accidentalCombiningLower19Schisma\"] = \"\\uE2E8\";\n    // U+E2EA  Combining lower by one 23-limit comma\n    Glyphs[\"accidentalCombiningLower23Limit29LimitComma\"] = \"\\uE2EA\";\n    // U+EE50  Combining lower by one 29-limit comma\n    Glyphs[\"accidentalCombiningLower29LimitComma\"] = \"\\uEE50\";\n    // U+E2EC  Combining lower by one 31-limit schisma\n    Glyphs[\"accidentalCombiningLower31Schisma\"] = \"\\uE2EC\";\n    // U+EE52  Combining lower by one 37-limit quartertone\n    Glyphs[\"accidentalCombiningLower37Quartertone\"] = \"\\uEE52\";\n    // U+EE54  Combining lower by one 41-limit comma\n    Glyphs[\"accidentalCombiningLower41Comma\"] = \"\\uEE54\";\n    // U+EE56  Combining lower by one 43-limit comma\n    Glyphs[\"accidentalCombiningLower43Comma\"] = \"\\uEE56\";\n    // U+EE58  Combining lower by one 47-limit quartertone\n    Glyphs[\"accidentalCombiningLower47Quartertone\"] = \"\\uEE58\";\n    // U+E2F7  Combining lower by one 53-limit comma\n    Glyphs[\"accidentalCombiningLower53LimitComma\"] = \"\\uE2F7\";\n    // U+E2EE  Combining open curly brace\n    Glyphs[\"accidentalCombiningOpenCurlyBrace\"] = \"\\uE2EE\";\n    // U+E2E7  Combining raise by one 17-limit schisma\n    Glyphs[\"accidentalCombiningRaise17Schisma\"] = \"\\uE2E7\";\n    // U+E2E9  Combining raise by one 19-limit schisma\n    Glyphs[\"accidentalCombiningRaise19Schisma\"] = \"\\uE2E9\";\n    // U+E2EB  Combining raise by one 23-limit comma\n    Glyphs[\"accidentalCombiningRaise23Limit29LimitComma\"] = \"\\uE2EB\";\n    // U+EE51  Combining raise by one 29-limit comma\n    Glyphs[\"accidentalCombiningRaise29LimitComma\"] = \"\\uEE51\";\n    // U+E2ED  Combining raise by one 31-limit schisma\n    Glyphs[\"accidentalCombiningRaise31Schisma\"] = \"\\uE2ED\";\n    // U+EE53  Combining raise by one 37-limit quartertone\n    Glyphs[\"accidentalCombiningRaise37Quartertone\"] = \"\\uEE53\";\n    // U+EE55  Combining raise by one 41-limit comma\n    Glyphs[\"accidentalCombiningRaise41Comma\"] = \"\\uEE55\";\n    // U+EE57  Combining raise by one 43-limit comma\n    Glyphs[\"accidentalCombiningRaise43Comma\"] = \"\\uEE57\";\n    // U+EE59  Combining raise by one 47-limit quartertone\n    Glyphs[\"accidentalCombiningRaise47Quartertone\"] = \"\\uEE59\";\n    // U+E2F8  Combining raise by one 53-limit comma\n    Glyphs[\"accidentalCombiningRaise53LimitComma\"] = \"\\uE2F8\";\n    // U+E47A  Syntonic/Didymus comma (80:81) down (Bosanquet)\n    Glyphs[\"accidentalCommaSlashDown\"] = \"\\uE47A\";\n    // U+E479  Syntonic/Didymus comma (80:81) up (Bosanquet)\n    Glyphs[\"accidentalCommaSlashUp\"] = \"\\uE479\";\n    // U+E264  Double flat\n    Glyphs[\"accidentalDoubleFlat\"] = \"\\uE264\";\n    // U+ED30  Arabic double flat\n    Glyphs[\"accidentalDoubleFlatArabic\"] = \"\\uED30\";\n    // U+E2F0  Double flat equal tempered semitone\n    Glyphs[\"accidentalDoubleFlatEqualTempered\"] = \"\\uE2F0\";\n    // U+E2C0  Double flat lowered by one syntonic comma\n    Glyphs[\"accidentalDoubleFlatOneArrowDown\"] = \"\\uE2C0\";\n    // U+E2C5  Double flat raised by one syntonic comma\n    Glyphs[\"accidentalDoubleFlatOneArrowUp\"] = \"\\uE2C5\";\n    // U+E483  Reversed double flat\n    Glyphs[\"accidentalDoubleFlatReversed\"] = \"\\uE483\";\n    // U+E2D4  Double flat lowered by three syntonic commas\n    Glyphs[\"accidentalDoubleFlatThreeArrowsDown\"] = \"\\uE2D4\";\n    // U+E2D9  Double flat raised by three syntonic commas\n    Glyphs[\"accidentalDoubleFlatThreeArrowsUp\"] = \"\\uE2D9\";\n    // U+E485  Turned double flat\n    Glyphs[\"accidentalDoubleFlatTurned\"] = \"\\uE485\";\n    // U+E2CA  Double flat lowered by two syntonic commas\n    Glyphs[\"accidentalDoubleFlatTwoArrowsDown\"] = \"\\uE2CA\";\n    // U+E2CF  Double flat raised by two syntonic commas\n    Glyphs[\"accidentalDoubleFlatTwoArrowsUp\"] = \"\\uE2CF\";\n    // U+E263  Double sharp\n    Glyphs[\"accidentalDoubleSharp\"] = \"\\uE263\";\n    // U+ED38  Arabic double sharp\n    Glyphs[\"accidentalDoubleSharpArabic\"] = \"\\uED38\";\n    // U+E2F4  Double sharp equal tempered semitone\n    Glyphs[\"accidentalDoubleSharpEqualTempered\"] = \"\\uE2F4\";\n    // U+E2C4  Double sharp lowered by one syntonic comma\n    Glyphs[\"accidentalDoubleSharpOneArrowDown\"] = \"\\uE2C4\";\n    // U+E2C9  Double sharp raised by one syntonic comma\n    Glyphs[\"accidentalDoubleSharpOneArrowUp\"] = \"\\uE2C9\";\n    // U+E2D8  Double sharp lowered by three syntonic commas\n    Glyphs[\"accidentalDoubleSharpThreeArrowsDown\"] = \"\\uE2D8\";\n    // U+E2DD  Double sharp raised by three syntonic commas\n    Glyphs[\"accidentalDoubleSharpThreeArrowsUp\"] = \"\\uE2DD\";\n    // U+E2CE  Double sharp lowered by two syntonic commas\n    Glyphs[\"accidentalDoubleSharpTwoArrowsDown\"] = \"\\uE2CE\";\n    // U+E2D3  Double sharp raised by two syntonic commas\n    Glyphs[\"accidentalDoubleSharpTwoArrowsUp\"] = \"\\uE2D3\";\n    // U+E2FA  Enharmonically reinterpret accidental almost equal to\n    Glyphs[\"accidentalEnharmonicAlmostEqualTo\"] = \"\\uE2FA\";\n    // U+E2FB  Enharmonically reinterpret accidental equals\n    Glyphs[\"accidentalEnharmonicEquals\"] = \"\\uE2FB\";\n    // U+E2F9  Enharmonically reinterpret accidental tilde\n    Glyphs[\"accidentalEnharmonicTilde\"] = \"\\uE2F9\";\n    // U+E296  Filled reversed flat and flat\n    Glyphs[\"accidentalFilledReversedFlatAndFlat\"] = \"\\uE296\";\n    // U+E298  Filled reversed flat and flat with arrow down\n    Glyphs[\"accidentalFilledReversedFlatAndFlatArrowDown\"] = \"\\uE298\";\n    // U+E297  Filled reversed flat and flat with arrow up\n    Glyphs[\"accidentalFilledReversedFlatAndFlatArrowUp\"] = \"\\uE297\";\n    // U+E293  Filled reversed flat with arrow down\n    Glyphs[\"accidentalFilledReversedFlatArrowDown\"] = \"\\uE293\";\n    // U+E292  Filled reversed flat with arrow up\n    Glyphs[\"accidentalFilledReversedFlatArrowUp\"] = \"\\uE292\";\n    // U+E279  Five-quarter-tones flat\n    Glyphs[\"accidentalFiveQuarterTonesFlatArrowDown\"] = \"\\uE279\";\n    // U+E276  Five-quarter-tones sharp\n    Glyphs[\"accidentalFiveQuarterTonesSharpArrowUp\"] = \"\\uE276\";\n    // U+E260  Flat\n    Glyphs[\"accidentalFlat\"] = \"\\uE260\";\n    // U+ED32  Arabic half-tone flat\n    Glyphs[\"accidentalFlatArabic\"] = \"\\uED32\";\n    // U+E2F1  Flat equal tempered semitone\n    Glyphs[\"accidentalFlatEqualTempered\"] = \"\\uE2F1\";\n    // U+ED53  Lowered flat (Stockhausen)\n    Glyphs[\"accidentalFlatLoweredStockhausen\"] = \"\\uED53\";\n    // U+E2C1  Flat lowered by one syntonic comma\n    Glyphs[\"accidentalFlatOneArrowDown\"] = \"\\uE2C1\";\n    // U+E2C6  Flat raised by one syntonic comma\n    Glyphs[\"accidentalFlatOneArrowUp\"] = \"\\uE2C6\";\n    // U+ED52  Raised flat (Stockhausen)\n    Glyphs[\"accidentalFlatRaisedStockhausen\"] = \"\\uED52\";\n    // U+ED5C  Repeated flat, note on line (Stockhausen)\n    Glyphs[\"accidentalFlatRepeatedLineStockhausen\"] = \"\\uED5C\";\n    // U+ED5B  Repeated flat, note in space (Stockhausen)\n    Glyphs[\"accidentalFlatRepeatedSpaceStockhausen\"] = \"\\uED5B\";\n    // U+E2D5  Flat lowered by three syntonic commas\n    Glyphs[\"accidentalFlatThreeArrowsDown\"] = \"\\uE2D5\";\n    // U+E2DA  Flat raised by three syntonic commas\n    Glyphs[\"accidentalFlatThreeArrowsUp\"] = \"\\uE2DA\";\n    // U+E484  Turned flat\n    Glyphs[\"accidentalFlatTurned\"] = \"\\uE484\";\n    // U+E2CB  Flat lowered by two syntonic commas\n    Glyphs[\"accidentalFlatTwoArrowsDown\"] = \"\\uE2CB\";\n    // U+E2D0  Flat raised by two syntonic commas\n    Glyphs[\"accidentalFlatTwoArrowsUp\"] = \"\\uE2D0\";\n    // U+EE65  Quarter-tone higher (Alois Hába)\n    Glyphs[\"accidentalHabaFlatQuarterToneHigher\"] = \"\\uEE65\";\n    // U+EE69  Three quarter-tones lower (Alois Hába)\n    Glyphs[\"accidentalHabaFlatThreeQuarterTonesLower\"] = \"\\uEE69\";\n    // U+EE64  Quarter-tone higher (Alois Hába)\n    Glyphs[\"accidentalHabaQuarterToneHigher\"] = \"\\uEE64\";\n    // U+EE67  Quarter-tone lower (Alois Hába)\n    Glyphs[\"accidentalHabaQuarterToneLower\"] = \"\\uEE67\";\n    // U+EE68  Quarter-tone lower (Alois Hába)\n    Glyphs[\"accidentalHabaSharpQuarterToneLower\"] = \"\\uEE68\";\n    // U+EE66  Three quarter-tones higher (Alois Hába)\n    Glyphs[\"accidentalHabaSharpThreeQuarterTonesHigher\"] = \"\\uEE66\";\n    // U+E29A  Half sharp with arrow down\n    Glyphs[\"accidentalHalfSharpArrowDown\"] = \"\\uE29A\";\n    // U+E299  Half sharp with arrow up\n    Glyphs[\"accidentalHalfSharpArrowUp\"] = \"\\uE299\";\n    // U+E2B6  Thirteen (raise by 65:64)\n    Glyphs[\"accidentalJohnston13\"] = \"\\uE2B6\";\n    // U+E2B7  Inverted 13 (lower by 65:64)\n    Glyphs[\"accidentalJohnston31\"] = \"\\uE2B7\";\n    // U+E2B5  Down arrow (lower by 33:32)\n    Glyphs[\"accidentalJohnstonDown\"] = \"\\uE2B5\";\n    // U+E2B2  Inverted seven (raise by 36:35)\n    Glyphs[\"accidentalJohnstonEl\"] = \"\\uE2B2\";\n    // U+E2B1  Minus (lower by 81:80)\n    Glyphs[\"accidentalJohnstonMinus\"] = \"\\uE2B1\";\n    // U+E2B0  Plus (raise by 81:80)\n    Glyphs[\"accidentalJohnstonPlus\"] = \"\\uE2B0\";\n    // U+E2B3  Seven (lower by 36:35)\n    Glyphs[\"accidentalJohnstonSeven\"] = \"\\uE2B3\";\n    // U+E2B4  Up arrow (raise by 33:32)\n    Glyphs[\"accidentalJohnstonUp\"] = \"\\uE2B4\";\n    // U+E443  Koma (flat)\n    Glyphs[\"accidentalKomaFlat\"] = \"\\uE443\";\n    // U+E444  Koma (sharp)\n    Glyphs[\"accidentalKomaSharp\"] = \"\\uE444\";\n    // U+E460  Koron (quarter tone flat)\n    Glyphs[\"accidentalKoron\"] = \"\\uE460\";\n    // U+E441  Küçük mücenneb (flat)\n    Glyphs[\"accidentalKucukMucennebFlat\"] = \"\\uE441\";\n    // U+E446  Küçük mücenneb (sharp)\n    Glyphs[\"accidentalKucukMucennebSharp\"] = \"\\uE446\";\n    // U+E47D  Large double sharp\n    Glyphs[\"accidentalLargeDoubleSharp\"] = \"\\uE47D\";\n    // U+E2DE  Lower by one septimal comma\n    Glyphs[\"accidentalLowerOneSeptimalComma\"] = \"\\uE2DE\";\n    // U+E2E4  Lower by one tridecimal quartertone\n    Glyphs[\"accidentalLowerOneTridecimalQuartertone\"] = \"\\uE2E4\";\n    // U+E2E2  Lower by one undecimal quartertone\n    Glyphs[\"accidentalLowerOneUndecimalQuartertone\"] = \"\\uE2E2\";\n    // U+E2E0  Lower by two septimal commas\n    Glyphs[\"accidentalLowerTwoSeptimalCommas\"] = \"\\uE2E0\";\n    // U+ED51  Lowered (Stockhausen)\n    Glyphs[\"accidentalLoweredStockhausen\"] = \"\\uED51\";\n    // U+E284  Narrow reversed flat(quarter-tone flat)\n    Glyphs[\"accidentalNarrowReversedFlat\"] = \"\\uE284\";\n    // U+E285  Narrow reversed flat and flat(three-quarter-tones flat)\n    Glyphs[\"accidentalNarrowReversedFlatAndFlat\"] = \"\\uE285\";\n    // U+E261  Natural\n    Glyphs[\"accidentalNatural\"] = \"\\uE261\";\n    // U+ED34  Arabic natural\n    Glyphs[\"accidentalNaturalArabic\"] = \"\\uED34\";\n    // U+E2F2  Natural equal tempered semitone\n    Glyphs[\"accidentalNaturalEqualTempered\"] = \"\\uE2F2\";\n    // U+E267  Natural flat\n    Glyphs[\"accidentalNaturalFlat\"] = \"\\uE267\";\n    // U+ED55  Lowered natural (Stockhausen)\n    Glyphs[\"accidentalNaturalLoweredStockhausen\"] = \"\\uED55\";\n    // U+E2C2  Natural lowered by one syntonic comma\n    Glyphs[\"accidentalNaturalOneArrowDown\"] = \"\\uE2C2\";\n    // U+E2C7  Natural raised by one syntonic comma\n    Glyphs[\"accidentalNaturalOneArrowUp\"] = \"\\uE2C7\";\n    // U+ED54  Raised natural (Stockhausen)\n    Glyphs[\"accidentalNaturalRaisedStockhausen\"] = \"\\uED54\";\n    // U+E482  Reversed natural\n    Glyphs[\"accidentalNaturalReversed\"] = \"\\uE482\";\n    // U+E268  Natural sharp\n    Glyphs[\"accidentalNaturalSharp\"] = \"\\uE268\";\n    // U+E2D6  Natural lowered by three syntonic commas\n    Glyphs[\"accidentalNaturalThreeArrowsDown\"] = \"\\uE2D6\";\n    // U+E2DB  Natural raised by three syntonic commas\n    Glyphs[\"accidentalNaturalThreeArrowsUp\"] = \"\\uE2DB\";\n    // U+E2CC  Natural lowered by two syntonic commas\n    Glyphs[\"accidentalNaturalTwoArrowsDown\"] = \"\\uE2CC\";\n    // U+E2D1  Natural raised by two syntonic commas\n    Glyphs[\"accidentalNaturalTwoArrowsUp\"] = \"\\uE2D1\";\n    // U+E29C  One and a half sharps with arrow down\n    Glyphs[\"accidentalOneAndAHalfSharpsArrowDown\"] = \"\\uE29C\";\n    // U+E29B  One and a half sharps with arrow up\n    Glyphs[\"accidentalOneAndAHalfSharpsArrowUp\"] = \"\\uE29B\";\n    // U+E48F  One-quarter-tone flat (Ferneyhough)\n    Glyphs[\"accidentalOneQuarterToneFlatFerneyhough\"] = \"\\uE48F\";\n    // U+ED59  One-quarter-tone flat (Stockhausen)\n    Glyphs[\"accidentalOneQuarterToneFlatStockhausen\"] = \"\\uED59\";\n    // U+E48E  One-quarter-tone sharp (Ferneyhough)\n    Glyphs[\"accidentalOneQuarterToneSharpFerneyhough\"] = \"\\uE48E\";\n    // U+ED58  One-quarter-tone sharp (Stockhausen)\n    Glyphs[\"accidentalOneQuarterToneSharpStockhausen\"] = \"\\uED58\";\n    // U+E48B  One-third-tone flat (Ferneyhough)\n    Glyphs[\"accidentalOneThirdToneFlatFerneyhough\"] = \"\\uE48B\";\n    // U+E48A  One-third-tone sharp (Ferneyhough)\n    Glyphs[\"accidentalOneThirdToneSharpFerneyhough\"] = \"\\uE48A\";\n    // U+E26A  Accidental parenthesis, left\n    Glyphs[\"accidentalParensLeft\"] = \"\\uE26A\";\n    // U+E26B  Accidental parenthesis, right\n    Glyphs[\"accidentalParensRight\"] = \"\\uE26B\";\n    // U+E2F5  Lower by one equal tempered quarter-tone\n    Glyphs[\"accidentalQuarterFlatEqualTempered\"] = \"\\uE2F5\";\n    // U+E2F6  Raise by one equal tempered quarter tone\n    Glyphs[\"accidentalQuarterSharpEqualTempered\"] = \"\\uE2F6\";\n    // U+E47F  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlat4\"] = \"\\uE47F\";\n    // U+ED33  Arabic quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatArabic\"] = \"\\uED33\";\n    // U+E270  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatArrowUp\"] = \"\\uE270\";\n    // U+E480  Filled reversed flat (quarter-tone flat)\n    Glyphs[\"accidentalQuarterToneFlatFilledReversed\"] = \"\\uE480\";\n    // U+E273  Quarter-tone flat\n    Glyphs[\"accidentalQuarterToneFlatNaturalArrowDown\"] = \"\\uE273\";\n    // U+E478  Quarter tone flat (Penderecki)\n    Glyphs[\"accidentalQuarterToneFlatPenderecki\"] = \"\\uE478\";\n    // U+E280  Reversed flat (quarter-tone flat) (Stein)\n    Glyphs[\"accidentalQuarterToneFlatStein\"] = \"\\uE280\";\n    // U+E488  Quarter-tone flat (van Blankenburg)\n    Glyphs[\"accidentalQuarterToneFlatVanBlankenburg\"] = \"\\uE488\";\n    // U+E47E  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharp4\"] = \"\\uE47E\";\n    // U+ED35  Arabic quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpArabic\"] = \"\\uED35\";\n    // U+E275  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpArrowDown\"] = \"\\uE275\";\n    // U+E472  Quarter tone sharp (Bussotti)\n    Glyphs[\"accidentalQuarterToneSharpBusotti\"] = \"\\uE472\";\n    // U+E272  Quarter-tone sharp\n    Glyphs[\"accidentalQuarterToneSharpNaturalArrowUp\"] = \"\\uE272\";\n    // U+E282  Half sharp (quarter-tone sharp) (Stein)\n    Glyphs[\"accidentalQuarterToneSharpStein\"] = \"\\uE282\";\n    // U+E475  Quarter tone sharp with wiggly tail\n    Glyphs[\"accidentalQuarterToneSharpWiggle\"] = \"\\uE475\";\n    // U+E2DF  Raise by one septimal comma\n    Glyphs[\"accidentalRaiseOneSeptimalComma\"] = \"\\uE2DF\";\n    // U+E2E5  Raise by one tridecimal quartertone\n    Glyphs[\"accidentalRaiseOneTridecimalQuartertone\"] = \"\\uE2E5\";\n    // U+E2E3  Raise by one undecimal quartertone\n    Glyphs[\"accidentalRaiseOneUndecimalQuartertone\"] = \"\\uE2E3\";\n    // U+E2E1  Raise by two septimal commas\n    Glyphs[\"accidentalRaiseTwoSeptimalCommas\"] = \"\\uE2E1\";\n    // U+ED50  Raised (Stockhausen)\n    Glyphs[\"accidentalRaisedStockhausen\"] = \"\\uED50\";\n    // U+E295  Reversed flat and flat with arrow down\n    Glyphs[\"accidentalReversedFlatAndFlatArrowDown\"] = \"\\uE295\";\n    // U+E294  Reversed flat and flat with arrow up\n    Glyphs[\"accidentalReversedFlatAndFlatArrowUp\"] = \"\\uE294\";\n    // U+E291  Reversed flat with arrow down\n    Glyphs[\"accidentalReversedFlatArrowDown\"] = \"\\uE291\";\n    // U+E290  Reversed flat with arrow up\n    Glyphs[\"accidentalReversedFlatArrowUp\"] = \"\\uE290\";\n    // U+E262  Sharp\n    Glyphs[\"accidentalSharp\"] = \"\\uE262\";\n    // U+ED36  Arabic half-tone sharp\n    Glyphs[\"accidentalSharpArabic\"] = \"\\uED36\";\n    // U+E2F3  Sharp equal tempered semitone\n    Glyphs[\"accidentalSharpEqualTempered\"] = \"\\uE2F3\";\n    // U+ED57  Lowered sharp (Stockhausen)\n    Glyphs[\"accidentalSharpLoweredStockhausen\"] = \"\\uED57\";\n    // U+E2C3  Sharp lowered by one syntonic comma\n    Glyphs[\"accidentalSharpOneArrowDown\"] = \"\\uE2C3\";\n    // U+E2C8  Sharp raised by one syntonic comma\n    Glyphs[\"accidentalSharpOneArrowUp\"] = \"\\uE2C8\";\n    // U+E473  One or three quarter tones sharp\n    Glyphs[\"accidentalSharpOneHorizontalStroke\"] = \"\\uE473\";\n    // U+ED56  Raised sharp (Stockhausen)\n    Glyphs[\"accidentalSharpRaisedStockhausen\"] = \"\\uED56\";\n    // U+ED5E  Repeated sharp, note on line (Stockhausen)\n    Glyphs[\"accidentalSharpRepeatedLineStockhausen\"] = \"\\uED5E\";\n    // U+ED5D  Repeated sharp, note in space (Stockhausen)\n    Glyphs[\"accidentalSharpRepeatedSpaceStockhausen\"] = \"\\uED5D\";\n    // U+E481  Reversed sharp\n    Glyphs[\"accidentalSharpReversed\"] = \"\\uE481\";\n    // U+E269  Sharp sharp\n    Glyphs[\"accidentalSharpSharp\"] = \"\\uE269\";\n    // U+E2D7  Sharp lowered by three syntonic commas\n    Glyphs[\"accidentalSharpThreeArrowsDown\"] = \"\\uE2D7\";\n    // U+E2DC  Sharp raised by three syntonic commas\n    Glyphs[\"accidentalSharpThreeArrowsUp\"] = \"\\uE2DC\";\n    // U+E2CD  Sharp lowered by two syntonic commas\n    Glyphs[\"accidentalSharpTwoArrowsDown\"] = \"\\uE2CD\";\n    // U+E2D2  Sharp raised by two syntonic commas\n    Glyphs[\"accidentalSharpTwoArrowsUp\"] = \"\\uE2D2\";\n    // U+E2A0  1/12 tone low\n    Glyphs[\"accidentalSims12Down\"] = \"\\uE2A0\";\n    // U+E2A3  1/12 tone high\n    Glyphs[\"accidentalSims12Up\"] = \"\\uE2A3\";\n    // U+E2A2  1/4 tone low\n    Glyphs[\"accidentalSims4Down\"] = \"\\uE2A2\";\n    // U+E2A5  1/4 tone high\n    Glyphs[\"accidentalSims4Up\"] = \"\\uE2A5\";\n    // U+E2A1  1/6 tone low\n    Glyphs[\"accidentalSims6Down\"] = \"\\uE2A1\";\n    // U+E2A4  1/6 tone high\n    Glyphs[\"accidentalSims6Up\"] = \"\\uE2A4\";\n    // U+E461  Sori (quarter tone sharp)\n    Glyphs[\"accidentalSori\"] = \"\\uE461\";\n    // U+E477  Byzantine-style Bakiye flat (Tavener)\n    Glyphs[\"accidentalTavenerFlat\"] = \"\\uE477\";\n    // U+E476  Byzantine-style Büyük mücenneb sharp (Tavener)\n    Glyphs[\"accidentalTavenerSharp\"] = \"\\uE476\";\n    // U+ED31  Arabic three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArabic\"] = \"\\uED31\";\n    // U+E271  Three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArrowDown\"] = \"\\uE271\";\n    // U+E278  Three-quarter-tones flat\n    Glyphs[\"accidentalThreeQuarterTonesFlatArrowUp\"] = \"\\uE278\";\n    // U+E489  Three-quarter-tones flat (Couper)\n    Glyphs[\"accidentalThreeQuarterTonesFlatCouper\"] = \"\\uE489\";\n    // U+E486  Three-quarter-tones flat (Grisey)\n    Glyphs[\"accidentalThreeQuarterTonesFlatGrisey\"] = \"\\uE486\";\n    // U+E487  Three-quarter-tones flat (Tartini)\n    Glyphs[\"accidentalThreeQuarterTonesFlatTartini\"] = \"\\uE487\";\n    // U+E281  Reversed flat and flat (three-quarter-tones flat) (Zimmermann)\n    Glyphs[\"accidentalThreeQuarterTonesFlatZimmermann\"] = \"\\uE281\";\n    // U+ED37  Arabic three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArabic\"] = \"\\uED37\";\n    // U+E277  Three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArrowDown\"] = \"\\uE277\";\n    // U+E274  Three-quarter-tones sharp\n    Glyphs[\"accidentalThreeQuarterTonesSharpArrowUp\"] = \"\\uE274\";\n    // U+E474  Three quarter tones sharp (Bussotti)\n    Glyphs[\"accidentalThreeQuarterTonesSharpBusotti\"] = \"\\uE474\";\n    // U+E283  One and a half sharps (three-quarter-tones sharp) (Stein)\n    Glyphs[\"accidentalThreeQuarterTonesSharpStein\"] = \"\\uE283\";\n    // U+ED5A  Three-quarter-tones sharp (Stockhausen)\n    Glyphs[\"accidentalThreeQuarterTonesSharpStockhausen\"] = \"\\uED5A\";\n    // U+E266  Triple flat\n    Glyphs[\"accidentalTripleFlat\"] = \"\\uE266\";\n    // U+E265  Triple sharp\n    Glyphs[\"accidentalTripleSharp\"] = \"\\uE265\";\n    // U+E48D  Two-third-tones flat (Ferneyhough)\n    Glyphs[\"accidentalTwoThirdTonesFlatFerneyhough\"] = \"\\uE48D\";\n    // U+E48C  Two-third-tones sharp (Ferneyhough)\n    Glyphs[\"accidentalTwoThirdTonesSharpFerneyhough\"] = \"\\uE48C\";\n    // U+EE61  Accidental down\n    Glyphs[\"accidentalUpsAndDownsDown\"] = \"\\uEE61\";\n    // U+EE63  Accidental less\n    Glyphs[\"accidentalUpsAndDownsLess\"] = \"\\uEE63\";\n    // U+EE62  Accidental more\n    Glyphs[\"accidentalUpsAndDownsMore\"] = \"\\uEE62\";\n    // U+EE60  Accidental up\n    Glyphs[\"accidentalUpsAndDownsUp\"] = \"\\uEE60\";\n    // U+E47C  Wilson minus (5 comma down)\n    Glyphs[\"accidentalWilsonMinus\"] = \"\\uE47C\";\n    // U+E47B  Wilson plus (5 comma up)\n    Glyphs[\"accidentalWilsonPlus\"] = \"\\uE47B\";\n    // U+E434  5/6 tone flat\n    Glyphs[\"accidentalWyschnegradsky10TwelfthsFlat\"] = \"\\uE434\";\n    // U+E429  5/6 tone sharp\n    Glyphs[\"accidentalWyschnegradsky10TwelfthsSharp\"] = \"\\uE429\";\n    // U+E435  11/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky11TwelfthsFlat\"] = \"\\uE435\";\n    // U+E42A  11/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky11TwelfthsSharp\"] = \"\\uE42A\";\n    // U+E42B  1/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky1TwelfthsFlat\"] = \"\\uE42B\";\n    // U+E420  1/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky1TwelfthsSharp\"] = \"\\uE420\";\n    // U+E42C  1/6 tone flat\n    Glyphs[\"accidentalWyschnegradsky2TwelfthsFlat\"] = \"\\uE42C\";\n    // U+E421  1/6 tone sharp\n    Glyphs[\"accidentalWyschnegradsky2TwelfthsSharp\"] = \"\\uE421\";\n    // U+E42D  1/4 tone flat\n    Glyphs[\"accidentalWyschnegradsky3TwelfthsFlat\"] = \"\\uE42D\";\n    // U+E422  1/4 tone sharp\n    Glyphs[\"accidentalWyschnegradsky3TwelfthsSharp\"] = \"\\uE422\";\n    // U+E42E  1/3 tone flat\n    Glyphs[\"accidentalWyschnegradsky4TwelfthsFlat\"] = \"\\uE42E\";\n    // U+E423  1/3 tone sharp\n    Glyphs[\"accidentalWyschnegradsky4TwelfthsSharp\"] = \"\\uE423\";\n    // U+E42F  5/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky5TwelfthsFlat\"] = \"\\uE42F\";\n    // U+E424  5/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky5TwelfthsSharp\"] = \"\\uE424\";\n    // U+E430  1/2 tone flat\n    Glyphs[\"accidentalWyschnegradsky6TwelfthsFlat\"] = \"\\uE430\";\n    // U+E425  1/2 tone sharp\n    Glyphs[\"accidentalWyschnegradsky6TwelfthsSharp\"] = \"\\uE425\";\n    // U+E431  7/12 tone flat\n    Glyphs[\"accidentalWyschnegradsky7TwelfthsFlat\"] = \"\\uE431\";\n    // U+E426  7/12 tone sharp\n    Glyphs[\"accidentalWyschnegradsky7TwelfthsSharp\"] = \"\\uE426\";\n    // U+E432  2/3 tone flat\n    Glyphs[\"accidentalWyschnegradsky8TwelfthsFlat\"] = \"\\uE432\";\n    // U+E427  2/3 tone sharp\n    Glyphs[\"accidentalWyschnegradsky8TwelfthsSharp\"] = \"\\uE427\";\n    // U+E433  3/4 tone flat\n    Glyphs[\"accidentalWyschnegradsky9TwelfthsFlat\"] = \"\\uE433\";\n    // U+E428  3/4 tone sharp\n    Glyphs[\"accidentalWyschnegradsky9TwelfthsSharp\"] = \"\\uE428\";\n    // U+E470  One-third-tone sharp (Xenakis)\n    Glyphs[\"accidentalXenakisOneThirdToneSharp\"] = \"\\uE470\";\n    // U+E471  Two-third-tones sharp (Xenakis)\n    Glyphs[\"accidentalXenakisTwoThirdTonesSharp\"] = \"\\uE471\";\n    // U+E86A  Choralmelodie (Berg)\n    Glyphs[\"analyticsChoralmelodie\"] = \"\\uE86A\";\n    // U+E863  End of stimme\n    Glyphs[\"analyticsEndStimme\"] = \"\\uE863\";\n    // U+E86B  Hauptrhythmus (Berg)\n    Glyphs[\"analyticsHauptrhythmus\"] = \"\\uE86B\";\n    // U+E860  Hauptstimme\n    Glyphs[\"analyticsHauptstimme\"] = \"\\uE860\";\n    // U+E869  Inversion 1\n    Glyphs[\"analyticsInversion1\"] = \"\\uE869\";\n    // U+E861  Nebenstimme\n    Glyphs[\"analyticsNebenstimme\"] = \"\\uE861\";\n    // U+E862  Start of stimme\n    Glyphs[\"analyticsStartStimme\"] = \"\\uE862\";\n    // U+E864  Theme\n    Glyphs[\"analyticsTheme\"] = \"\\uE864\";\n    // U+E868  Theme 1\n    Glyphs[\"analyticsTheme1\"] = \"\\uE868\";\n    // U+E867  Inversion of theme\n    Glyphs[\"analyticsThemeInversion\"] = \"\\uE867\";\n    // U+E865  Retrograde of theme\n    Glyphs[\"analyticsThemeRetrograde\"] = \"\\uE865\";\n    // U+E866  Retrograde inversion of theme\n    Glyphs[\"analyticsThemeRetrogradeInversion\"] = \"\\uE866\";\n    // U+E63C  Arpeggiato\n    Glyphs[\"arpeggiato\"] = \"\\uE63C\";\n    // U+E635  Arpeggiato down\n    Glyphs[\"arpeggiatoDown\"] = \"\\uE635\";\n    // U+E634  Arpeggiato up\n    Glyphs[\"arpeggiatoUp\"] = \"\\uE634\";\n    // U+EB64  Black arrow down (S)\n    Glyphs[\"arrowBlackDown\"] = \"\\uEB64\";\n    // U+EB65  Black arrow down-left (SW)\n    Glyphs[\"arrowBlackDownLeft\"] = \"\\uEB65\";\n    // U+EB63  Black arrow down-right (SE)\n    Glyphs[\"arrowBlackDownRight\"] = \"\\uEB63\";\n    // U+EB66  Black arrow left (W)\n    Glyphs[\"arrowBlackLeft\"] = \"\\uEB66\";\n    // U+EB62  Black arrow right (E)\n    Glyphs[\"arrowBlackRight\"] = \"\\uEB62\";\n    // U+EB60  Black arrow up (N)\n    Glyphs[\"arrowBlackUp\"] = \"\\uEB60\";\n    // U+EB67  Black arrow up-left (NW)\n    Glyphs[\"arrowBlackUpLeft\"] = \"\\uEB67\";\n    // U+EB61  Black arrow up-right (NE)\n    Glyphs[\"arrowBlackUpRight\"] = \"\\uEB61\";\n    // U+EB74  Open arrow down (S)\n    Glyphs[\"arrowOpenDown\"] = \"\\uEB74\";\n    // U+EB75  Open arrow down-left (SW)\n    Glyphs[\"arrowOpenDownLeft\"] = \"\\uEB75\";\n    // U+EB73  Open arrow down-right (SE)\n    Glyphs[\"arrowOpenDownRight\"] = \"\\uEB73\";\n    // U+EB76  Open arrow left (W)\n    Glyphs[\"arrowOpenLeft\"] = \"\\uEB76\";\n    // U+EB72  Open arrow right (E)\n    Glyphs[\"arrowOpenRight\"] = \"\\uEB72\";\n    // U+EB70  Open arrow up (N)\n    Glyphs[\"arrowOpenUp\"] = \"\\uEB70\";\n    // U+EB77  Open arrow up-left (NW)\n    Glyphs[\"arrowOpenUpLeft\"] = \"\\uEB77\";\n    // U+EB71  Open arrow up-right (NE)\n    Glyphs[\"arrowOpenUpRight\"] = \"\\uEB71\";\n    // U+EB6C  White arrow down (S)\n    Glyphs[\"arrowWhiteDown\"] = \"\\uEB6C\";\n    // U+EB6D  White arrow down-left (SW)\n    Glyphs[\"arrowWhiteDownLeft\"] = \"\\uEB6D\";\n    // U+EB6B  White arrow down-right (SE)\n    Glyphs[\"arrowWhiteDownRight\"] = \"\\uEB6B\";\n    // U+EB6E  White arrow left (W)\n    Glyphs[\"arrowWhiteLeft\"] = \"\\uEB6E\";\n    // U+EB6A  White arrow right (E)\n    Glyphs[\"arrowWhiteRight\"] = \"\\uEB6A\";\n    // U+EB68  White arrow up (N)\n    Glyphs[\"arrowWhiteUp\"] = \"\\uEB68\";\n    // U+EB6F  White arrow up-left (NW)\n    Glyphs[\"arrowWhiteUpLeft\"] = \"\\uEB6F\";\n    // U+EB69  White arrow up-right (NE)\n    Glyphs[\"arrowWhiteUpRight\"] = \"\\uEB69\";\n    // U+EB7C  Black arrowhead down (S)\n    Glyphs[\"arrowheadBlackDown\"] = \"\\uEB7C\";\n    // U+EB7D  Black arrowhead down-left (SW)\n    Glyphs[\"arrowheadBlackDownLeft\"] = \"\\uEB7D\";\n    // U+EB7B  Black arrowhead down-right (SE)\n    Glyphs[\"arrowheadBlackDownRight\"] = \"\\uEB7B\";\n    // U+EB7E  Black arrowhead left (W)\n    Glyphs[\"arrowheadBlackLeft\"] = \"\\uEB7E\";\n    // U+EB7A  Black arrowhead right (E)\n    Glyphs[\"arrowheadBlackRight\"] = \"\\uEB7A\";\n    // U+EB78  Black arrowhead up (N)\n    Glyphs[\"arrowheadBlackUp\"] = \"\\uEB78\";\n    // U+EB7F  Black arrowhead up-left (NW)\n    Glyphs[\"arrowheadBlackUpLeft\"] = \"\\uEB7F\";\n    // U+EB79  Black arrowhead up-right (NE)\n    Glyphs[\"arrowheadBlackUpRight\"] = \"\\uEB79\";\n    // U+EB8C  Open arrowhead down (S)\n    Glyphs[\"arrowheadOpenDown\"] = \"\\uEB8C\";\n    // U+EB8D  Open arrowhead down-left (SW)\n    Glyphs[\"arrowheadOpenDownLeft\"] = \"\\uEB8D\";\n    // U+EB8B  Open arrowhead down-right (SE)\n    Glyphs[\"arrowheadOpenDownRight\"] = \"\\uEB8B\";\n    // U+EB8E  Open arrowhead left (W)\n    Glyphs[\"arrowheadOpenLeft\"] = \"\\uEB8E\";\n    // U+EB8A  Open arrowhead right (E)\n    Glyphs[\"arrowheadOpenRight\"] = \"\\uEB8A\";\n    // U+EB88  Open arrowhead up (N)\n    Glyphs[\"arrowheadOpenUp\"] = \"\\uEB88\";\n    // U+EB8F  Open arrowhead up-left (NW)\n    Glyphs[\"arrowheadOpenUpLeft\"] = \"\\uEB8F\";\n    // U+EB89  Open arrowhead up-right (NE)\n    Glyphs[\"arrowheadOpenUpRight\"] = \"\\uEB89\";\n    // U+EB84  White arrowhead down (S)\n    Glyphs[\"arrowheadWhiteDown\"] = \"\\uEB84\";\n    // U+EB85  White arrowhead down-left (SW)\n    Glyphs[\"arrowheadWhiteDownLeft\"] = \"\\uEB85\";\n    // U+EB83  White arrowhead down-right (SE)\n    Glyphs[\"arrowheadWhiteDownRight\"] = \"\\uEB83\";\n    // U+EB86  White arrowhead left (W)\n    Glyphs[\"arrowheadWhiteLeft\"] = \"\\uEB86\";\n    // U+EB82  White arrowhead right (E)\n    Glyphs[\"arrowheadWhiteRight\"] = \"\\uEB82\";\n    // U+EB80  White arrowhead up (N)\n    Glyphs[\"arrowheadWhiteUp\"] = \"\\uEB80\";\n    // U+EB87  White arrowhead up-left (NW)\n    Glyphs[\"arrowheadWhiteUpLeft\"] = \"\\uEB87\";\n    // U+EB81  White arrowhead up-right (NE)\n    Glyphs[\"arrowheadWhiteUpRight\"] = \"\\uEB81\";\n    // U+E4A0  Accent above\n    Glyphs[\"articAccentAbove\"] = \"\\uE4A0\";\n    // U+E4A1  Accent below\n    Glyphs[\"articAccentBelow\"] = \"\\uE4A1\";\n    // U+E4B0  Accent-staccato above\n    Glyphs[\"articAccentStaccatoAbove\"] = \"\\uE4B0\";\n    // U+E4B1  Accent-staccato below\n    Glyphs[\"articAccentStaccatoBelow\"] = \"\\uE4B1\";\n    // U+E4BA  Laissez vibrer (l.v.) above\n    Glyphs[\"articLaissezVibrerAbove\"] = \"\\uE4BA\";\n    // U+E4BB  Laissez vibrer (l.v.) below\n    Glyphs[\"articLaissezVibrerBelow\"] = \"\\uE4BB\";\n    // U+E4AC  Marcato above\n    Glyphs[\"articMarcatoAbove\"] = \"\\uE4AC\";\n    // U+E4AD  Marcato below\n    Glyphs[\"articMarcatoBelow\"] = \"\\uE4AD\";\n    // U+E4AE  Marcato-staccato above\n    Glyphs[\"articMarcatoStaccatoAbove\"] = \"\\uE4AE\";\n    // U+E4AF  Marcato-staccato below\n    Glyphs[\"articMarcatoStaccatoBelow\"] = \"\\uE4AF\";\n    // U+E4BC  Marcato-tenuto above\n    Glyphs[\"articMarcatoTenutoAbove\"] = \"\\uE4BC\";\n    // U+E4BD  Marcato-tenuto below\n    Glyphs[\"articMarcatoTenutoBelow\"] = \"\\uE4BD\";\n    // U+ED40  Soft accent above\n    Glyphs[\"articSoftAccentAbove\"] = \"\\uED40\";\n    // U+ED41  Soft accent below\n    Glyphs[\"articSoftAccentBelow\"] = \"\\uED41\";\n    // U+ED42  Soft accent-staccato above\n    Glyphs[\"articSoftAccentStaccatoAbove\"] = \"\\uED42\";\n    // U+ED43  Soft accent-staccato below\n    Glyphs[\"articSoftAccentStaccatoBelow\"] = \"\\uED43\";\n    // U+ED44  Soft accent-tenuto above\n    Glyphs[\"articSoftAccentTenutoAbove\"] = \"\\uED44\";\n    // U+ED45  Soft accent-tenuto below\n    Glyphs[\"articSoftAccentTenutoBelow\"] = \"\\uED45\";\n    // U+ED46  Soft accent-tenuto-staccato above\n    Glyphs[\"articSoftAccentTenutoStaccatoAbove\"] = \"\\uED46\";\n    // U+ED47  Soft accent-tenuto-staccato below\n    Glyphs[\"articSoftAccentTenutoStaccatoBelow\"] = \"\\uED47\";\n    // U+E4A6  Staccatissimo above\n    Glyphs[\"articStaccatissimoAbove\"] = \"\\uE4A6\";\n    // U+E4A7  Staccatissimo below\n    Glyphs[\"articStaccatissimoBelow\"] = \"\\uE4A7\";\n    // U+E4AA  Staccatissimo stroke above\n    Glyphs[\"articStaccatissimoStrokeAbove\"] = \"\\uE4AA\";\n    // U+E4AB  Staccatissimo stroke below\n    Glyphs[\"articStaccatissimoStrokeBelow\"] = \"\\uE4AB\";\n    // U+E4A8  Staccatissimo wedge above\n    Glyphs[\"articStaccatissimoWedgeAbove\"] = \"\\uE4A8\";\n    // U+E4A9  Staccatissimo wedge below\n    Glyphs[\"articStaccatissimoWedgeBelow\"] = \"\\uE4A9\";\n    // U+E4A2  Staccato above\n    Glyphs[\"articStaccatoAbove\"] = \"\\uE4A2\";\n    // U+E4A3  Staccato below\n    Glyphs[\"articStaccatoBelow\"] = \"\\uE4A3\";\n    // U+E4B6  Stress above\n    Glyphs[\"articStressAbove\"] = \"\\uE4B6\";\n    // U+E4B7  Stress below\n    Glyphs[\"articStressBelow\"] = \"\\uE4B7\";\n    // U+E4A4  Tenuto above\n    Glyphs[\"articTenutoAbove\"] = \"\\uE4A4\";\n    // U+E4B4  Tenuto-accent above\n    Glyphs[\"articTenutoAccentAbove\"] = \"\\uE4B4\";\n    // U+E4B5  Tenuto-accent below\n    Glyphs[\"articTenutoAccentBelow\"] = \"\\uE4B5\";\n    // U+E4A5  Tenuto below\n    Glyphs[\"articTenutoBelow\"] = \"\\uE4A5\";\n    // U+E4B2  Louré (tenuto-staccato) above\n    Glyphs[\"articTenutoStaccatoAbove\"] = \"\\uE4B2\";\n    // U+E4B3  Louré (tenuto-staccato) below\n    Glyphs[\"articTenutoStaccatoBelow\"] = \"\\uE4B3\";\n    // U+E4B8  Unstress above\n    Glyphs[\"articUnstressAbove\"] = \"\\uE4B8\";\n    // U+E4B9  Unstress below\n    Glyphs[\"articUnstressBelow\"] = \"\\uE4B9\";\n    // U+E1E7  Augmentation dot\n    Glyphs[\"augmentationDot\"] = \"\\uE1E7\";\n    // U+E036  Dashed barline\n    Glyphs[\"barlineDashed\"] = \"\\uE036\";\n    // U+E037  Dotted barline\n    Glyphs[\"barlineDotted\"] = \"\\uE037\";\n    // U+E031  Double barline\n    Glyphs[\"barlineDouble\"] = \"\\uE031\";\n    // U+E032  Final barline\n    Glyphs[\"barlineFinal\"] = \"\\uE032\";\n    // U+E034  Heavy barline\n    Glyphs[\"barlineHeavy\"] = \"\\uE034\";\n    // U+E035  Heavy double barline\n    Glyphs[\"barlineHeavyHeavy\"] = \"\\uE035\";\n    // U+E033  Reverse final barline\n    Glyphs[\"barlineReverseFinal\"] = \"\\uE033\";\n    // U+E038  Short barline\n    Glyphs[\"barlineShort\"] = \"\\uE038\";\n    // U+E030  Single barline\n    Glyphs[\"barlineSingle\"] = \"\\uE030\";\n    // U+E039  Tick barline\n    Glyphs[\"barlineTick\"] = \"\\uE039\";\n    // U+EAF4  Accel./rit. beam 1 (widest)\n    Glyphs[\"beamAccelRit1\"] = \"\\uEAF4\";\n    // U+EAFD  Accel./rit. beam 10\n    Glyphs[\"beamAccelRit10\"] = \"\\uEAFD\";\n    // U+EAFE  Accel./rit. beam 11\n    Glyphs[\"beamAccelRit11\"] = \"\\uEAFE\";\n    // U+EAFF  Accel./rit. beam 12\n    Glyphs[\"beamAccelRit12\"] = \"\\uEAFF\";\n    // U+EB00  Accel./rit. beam 13\n    Glyphs[\"beamAccelRit13\"] = \"\\uEB00\";\n    // U+EB01  Accel./rit. beam 14\n    Glyphs[\"beamAccelRit14\"] = \"\\uEB01\";\n    // U+EB02  Accel./rit. beam 15 (narrowest)\n    Glyphs[\"beamAccelRit15\"] = \"\\uEB02\";\n    // U+EAF5  Accel./rit. beam 2\n    Glyphs[\"beamAccelRit2\"] = \"\\uEAF5\";\n    // U+EAF6  Accel./rit. beam 3\n    Glyphs[\"beamAccelRit3\"] = \"\\uEAF6\";\n    // U+EAF7  Accel./rit. beam 4\n    Glyphs[\"beamAccelRit4\"] = \"\\uEAF7\";\n    // U+EAF8  Accel./rit. beam 5\n    Glyphs[\"beamAccelRit5\"] = \"\\uEAF8\";\n    // U+EAF9  Accel./rit. beam 6\n    Glyphs[\"beamAccelRit6\"] = \"\\uEAF9\";\n    // U+EAFA  Accel./rit. beam 7\n    Glyphs[\"beamAccelRit7\"] = \"\\uEAFA\";\n    // U+EAFB  Accel./rit. beam 8\n    Glyphs[\"beamAccelRit8\"] = \"\\uEAFB\";\n    // U+EAFC  Accel./rit. beam 9\n    Glyphs[\"beamAccelRit9\"] = \"\\uEAFC\";\n    // U+EB03  Accel./rit. beam terminating line\n    Glyphs[\"beamAccelRitFinal\"] = \"\\uEB03\";\n    // U+E000  Brace\n    Glyphs[\"brace\"] = \"\\uE000\";\n    // U+E002  Bracket\n    Glyphs[\"bracket\"] = \"\\uE002\";\n    // U+E004  Bracket bottom\n    Glyphs[\"bracketBottom\"] = \"\\uE004\";\n    // U+E003  Bracket top\n    Glyphs[\"bracketTop\"] = \"\\uE003\";\n    // U+E5E3  Bend\n    Glyphs[\"brassBend\"] = \"\\uE5E3\";\n    // U+E5D6  Doit, long\n    Glyphs[\"brassDoitLong\"] = \"\\uE5D6\";\n    // U+E5D5  Doit, medium\n    Glyphs[\"brassDoitMedium\"] = \"\\uE5D5\";\n    // U+E5D4  Doit, short\n    Glyphs[\"brassDoitShort\"] = \"\\uE5D4\";\n    // U+E5D9  Lip fall, long\n    Glyphs[\"brassFallLipLong\"] = \"\\uE5D9\";\n    // U+E5D8  Lip fall, medium\n    Glyphs[\"brassFallLipMedium\"] = \"\\uE5D8\";\n    // U+E5D7  Lip fall, short\n    Glyphs[\"brassFallLipShort\"] = \"\\uE5D7\";\n    // U+E5DF  Rough fall, long\n    Glyphs[\"brassFallRoughLong\"] = \"\\uE5DF\";\n    // U+E5DE  Rough fall, medium\n    Glyphs[\"brassFallRoughMedium\"] = \"\\uE5DE\";\n    // U+E5DD  Rough fall, short\n    Glyphs[\"brassFallRoughShort\"] = \"\\uE5DD\";\n    // U+E5DC  Smooth fall, long\n    Glyphs[\"brassFallSmoothLong\"] = \"\\uE5DC\";\n    // U+E5DB  Smooth fall, medium\n    Glyphs[\"brassFallSmoothMedium\"] = \"\\uE5DB\";\n    // U+E5DA  Smooth fall, short\n    Glyphs[\"brassFallSmoothShort\"] = \"\\uE5DA\";\n    // U+E5E1  Flip\n    Glyphs[\"brassFlip\"] = \"\\uE5E1\";\n    // U+E5E8  Harmon mute, stem in\n    Glyphs[\"brassHarmonMuteClosed\"] = \"\\uE5E8\";\n    // U+E5E9  Harmon mute, stem extended, left\n    Glyphs[\"brassHarmonMuteStemHalfLeft\"] = \"\\uE5E9\";\n    // U+E5EA  Harmon mute, stem extended, right\n    Glyphs[\"brassHarmonMuteStemHalfRight\"] = \"\\uE5EA\";\n    // U+E5EB  Harmon mute, stem out\n    Glyphs[\"brassHarmonMuteStemOpen\"] = \"\\uE5EB\";\n    // U+E5E4  Jazz turn\n    Glyphs[\"brassJazzTurn\"] = \"\\uE5E4\";\n    // U+E5D3  Lift, long\n    Glyphs[\"brassLiftLong\"] = \"\\uE5D3\";\n    // U+E5D2  Lift, medium\n    Glyphs[\"brassLiftMedium\"] = \"\\uE5D2\";\n    // U+E5D1  Lift, short\n    Glyphs[\"brassLiftShort\"] = \"\\uE5D1\";\n    // U+E5EE  Smooth lift, long\n    Glyphs[\"brassLiftSmoothLong\"] = \"\\uE5EE\";\n    // U+E5ED  Smooth lift, medium\n    Glyphs[\"brassLiftSmoothMedium\"] = \"\\uE5ED\";\n    // U+E5EC  Smooth lift, short\n    Glyphs[\"brassLiftSmoothShort\"] = \"\\uE5EC\";\n    // U+E5E5  Muted (closed)\n    Glyphs[\"brassMuteClosed\"] = \"\\uE5E5\";\n    // U+E5E6  Half-muted (half-closed)\n    Glyphs[\"brassMuteHalfClosed\"] = \"\\uE5E6\";\n    // U+E5E7  Open\n    Glyphs[\"brassMuteOpen\"] = \"\\uE5E7\";\n    // U+E5E0  Plop\n    Glyphs[\"brassPlop\"] = \"\\uE5E0\";\n    // U+E5D0  Scoop\n    Glyphs[\"brassScoop\"] = \"\\uE5D0\";\n    // U+E5E2  Smear\n    Glyphs[\"brassSmear\"] = \"\\uE5E2\";\n    // U+E5EF  Valve trill\n    Glyphs[\"brassValveTrill\"] = \"\\uE5EF\";\n    // U+E4CE  Breath mark (comma)\n    Glyphs[\"breathMarkComma\"] = \"\\uE4CE\";\n    // U+E4D5  Breath mark (Salzedo)\n    Glyphs[\"breathMarkSalzedo\"] = \"\\uE4D5\";\n    // U+E4CF  Breath mark (tick-like)\n    Glyphs[\"breathMarkTick\"] = \"\\uE4CF\";\n    // U+E4D0  Breath mark (upbow-like)\n    Glyphs[\"breathMarkUpbow\"] = \"\\uE4D0\";\n    // U+E078  Bridge clef\n    Glyphs[\"bridgeClef\"] = \"\\uE078\";\n    // U+E22A  Buzz roll\n    Glyphs[\"buzzRoll\"] = \"\\uE22A\";\n    // U+E05C  C clef\n    Glyphs[\"cClef\"] = \"\\uE05C\";\n    // U+E05D  C clef ottava bassa\n    Glyphs[\"cClef8vb\"] = \"\\uE05D\";\n    // U+E05F  C clef, arrow down\n    Glyphs[\"cClefArrowDown\"] = \"\\uE05F\";\n    // U+E05E  C clef, arrow up\n    Glyphs[\"cClefArrowUp\"] = \"\\uE05E\";\n    // U+E07B  C clef change\n    Glyphs[\"cClefChange\"] = \"\\uE07B\";\n    // U+E061  Combining C clef\n    Glyphs[\"cClefCombining\"] = \"\\uE061\";\n    // U+E075  Reversed C clef\n    Glyphs[\"cClefReversed\"] = \"\\uE075\";\n    // U+E060  C clef (19th century)\n    Glyphs[\"cClefSquare\"] = \"\\uE060\";\n    // U+E4D1  Caesura\n    Glyphs[\"caesura\"] = \"\\uE4D1\";\n    // U+E4D4  Curved caesura\n    Glyphs[\"caesuraCurved\"] = \"\\uE4D4\";\n    // U+E4D3  Short caesura\n    Glyphs[\"caesuraShort\"] = \"\\uE4D3\";\n    // U+E4D7  Single stroke caesura\n    Glyphs[\"caesuraSingleStroke\"] = \"\\uE4D7\";\n    // U+E4D2  Thick caesura\n    Glyphs[\"caesuraThick\"] = \"\\uE4D2\";\n    // U+E9D6  Accentus above\n    Glyphs[\"chantAccentusAbove\"] = \"\\uE9D6\";\n    // U+E9D7  Accentus below\n    Glyphs[\"chantAccentusBelow\"] = \"\\uE9D7\";\n    // U+E994  Punctum auctum, ascending\n    Glyphs[\"chantAuctumAsc\"] = \"\\uE994\";\n    // U+E995  Punctum auctum, descending\n    Glyphs[\"chantAuctumDesc\"] = \"\\uE995\";\n    // U+E9D9  Augmentum (mora)\n    Glyphs[\"chantAugmentum\"] = \"\\uE9D9\";\n    // U+E8F8  Caesura\n    Glyphs[\"chantCaesura\"] = \"\\uE8F8\";\n    // U+E906  Plainchant C clef\n    Glyphs[\"chantCclef\"] = \"\\uE906\";\n    // U+E9D2  Circulus above\n    Glyphs[\"chantCirculusAbove\"] = \"\\uE9D2\";\n    // U+E9D3  Circulus below\n    Glyphs[\"chantCirculusBelow\"] = \"\\uE9D3\";\n    // U+E9BD  Connecting line, ascending 2nd\n    Glyphs[\"chantConnectingLineAsc2nd\"] = \"\\uE9BD\";\n    // U+E9BE  Connecting line, ascending 3rd\n    Glyphs[\"chantConnectingLineAsc3rd\"] = \"\\uE9BE\";\n    // U+E9BF  Connecting line, ascending 4th\n    Glyphs[\"chantConnectingLineAsc4th\"] = \"\\uE9BF\";\n    // U+E9C0  Connecting line, ascending 5th\n    Glyphs[\"chantConnectingLineAsc5th\"] = \"\\uE9C0\";\n    // U+E9C1  Connecting line, ascending 6th\n    Glyphs[\"chantConnectingLineAsc6th\"] = \"\\uE9C1\";\n    // U+EA08  Plainchant custos, stem down, high position\n    Glyphs[\"chantCustosStemDownPosHigh\"] = \"\\uEA08\";\n    // U+EA09  Plainchant custos, stem down, highest position\n    Glyphs[\"chantCustosStemDownPosHighest\"] = \"\\uEA09\";\n    // U+EA07  Plainchant custos, stem down, middle position\n    Glyphs[\"chantCustosStemDownPosMiddle\"] = \"\\uEA07\";\n    // U+EA05  Plainchant custos, stem up, low position\n    Glyphs[\"chantCustosStemUpPosLow\"] = \"\\uEA05\";\n    // U+EA04  Plainchant custos, stem up, lowest position\n    Glyphs[\"chantCustosStemUpPosLowest\"] = \"\\uEA04\";\n    // U+EA06  Plainchant custos, stem up, middle position\n    Glyphs[\"chantCustosStemUpPosMiddle\"] = \"\\uEA06\";\n    // U+E9B3  Punctum deminutum, lower\n    Glyphs[\"chantDeminutumLower\"] = \"\\uE9B3\";\n    // U+E9B2  Punctum deminutum, upper\n    Glyphs[\"chantDeminutumUpper\"] = \"\\uE9B2\";\n    // U+E8F6  Divisio finalis\n    Glyphs[\"chantDivisioFinalis\"] = \"\\uE8F6\";\n    // U+E8F4  Divisio maior\n    Glyphs[\"chantDivisioMaior\"] = \"\\uE8F4\";\n    // U+E8F5  Divisio maxima\n    Glyphs[\"chantDivisioMaxima\"] = \"\\uE8F5\";\n    // U+E8F3  Divisio minima\n    Glyphs[\"chantDivisioMinima\"] = \"\\uE8F3\";\n    // U+E9B4  Entry line, ascending 2nd\n    Glyphs[\"chantEntryLineAsc2nd\"] = \"\\uE9B4\";\n    // U+E9B5  Entry line, ascending 3rd\n    Glyphs[\"chantEntryLineAsc3rd\"] = \"\\uE9B5\";\n    // U+E9B6  Entry line, ascending 4th\n    Glyphs[\"chantEntryLineAsc4th\"] = \"\\uE9B6\";\n    // U+E9B7  Entry line, ascending 5th\n    Glyphs[\"chantEntryLineAsc5th\"] = \"\\uE9B7\";\n    // U+E9B8  Entry line, ascending 6th\n    Glyphs[\"chantEntryLineAsc6th\"] = \"\\uE9B8\";\n    // U+E9D8  Episema\n    Glyphs[\"chantEpisema\"] = \"\\uE9D8\";\n    // U+E902  Plainchant F clef\n    Glyphs[\"chantFclef\"] = \"\\uE902\";\n    // U+E9D0  Ictus above\n    Glyphs[\"chantIctusAbove\"] = \"\\uE9D0\";\n    // U+E9D1  Ictus below\n    Glyphs[\"chantIctusBelow\"] = \"\\uE9D1\";\n    // U+E9B9  Ligated stroke, descending 2nd\n    Glyphs[\"chantLigaturaDesc2nd\"] = \"\\uE9B9\";\n    // U+E9BA  Ligated stroke, descending 3rd\n    Glyphs[\"chantLigaturaDesc3rd\"] = \"\\uE9BA\";\n    // U+E9BB  Ligated stroke, descending 4th\n    Glyphs[\"chantLigaturaDesc4th\"] = \"\\uE9BB\";\n    // U+E9BC  Ligated stroke, descending 5th\n    Glyphs[\"chantLigaturaDesc5th\"] = \"\\uE9BC\";\n    // U+E99C  Oriscus ascending\n    Glyphs[\"chantOriscusAscending\"] = \"\\uE99C\";\n    // U+E99D  Oriscus descending\n    Glyphs[\"chantOriscusDescending\"] = \"\\uE99D\";\n    // U+E99E  Oriscus liquescens\n    Glyphs[\"chantOriscusLiquescens\"] = \"\\uE99E\";\n    // U+E9B0  Podatus, lower\n    Glyphs[\"chantPodatusLower\"] = \"\\uE9B0\";\n    // U+E9B1  Podatus, upper\n    Glyphs[\"chantPodatusUpper\"] = \"\\uE9B1\";\n    // U+E990  Punctum\n    Glyphs[\"chantPunctum\"] = \"\\uE990\";\n    // U+E998  Punctum cavum\n    Glyphs[\"chantPunctumCavum\"] = \"\\uE998\";\n    // U+E9A1  Punctum deminutum\n    Glyphs[\"chantPunctumDeminutum\"] = \"\\uE9A1\";\n    // U+E991  Punctum inclinatum\n    Glyphs[\"chantPunctumInclinatum\"] = \"\\uE991\";\n    // U+E992  Punctum inclinatum auctum\n    Glyphs[\"chantPunctumInclinatumAuctum\"] = \"\\uE992\";\n    // U+E993  Punctum inclinatum deminutum\n    Glyphs[\"chantPunctumInclinatumDeminutum\"] = \"\\uE993\";\n    // U+E999  Punctum linea\n    Glyphs[\"chantPunctumLinea\"] = \"\\uE999\";\n    // U+E99A  Punctum linea cavum\n    Glyphs[\"chantPunctumLineaCavum\"] = \"\\uE99A\";\n    // U+E996  Punctum virga\n    Glyphs[\"chantPunctumVirga\"] = \"\\uE996\";\n    // U+E997  Punctum virga, reversed\n    Glyphs[\"chantPunctumVirgaReversed\"] = \"\\uE997\";\n    // U+E99B  Quilisma\n    Glyphs[\"chantQuilisma\"] = \"\\uE99B\";\n    // U+E9D4  Semicirculus above\n    Glyphs[\"chantSemicirculusAbove\"] = \"\\uE9D4\";\n    // U+E9D5  Semicirculus below\n    Glyphs[\"chantSemicirculusBelow\"] = \"\\uE9D5\";\n    // U+E8F0  Plainchant staff\n    Glyphs[\"chantStaff\"] = \"\\uE8F0\";\n    // U+E8F2  Plainchant staff (narrow)\n    Glyphs[\"chantStaffNarrow\"] = \"\\uE8F2\";\n    // U+E8F1  Plainchant staff (wide)\n    Glyphs[\"chantStaffWide\"] = \"\\uE8F1\";\n    // U+E99F  Strophicus\n    Glyphs[\"chantStrophicus\"] = \"\\uE99F\";\n    // U+E9A0  Strophicus auctus\n    Glyphs[\"chantStrophicusAuctus\"] = \"\\uE9A0\";\n    // U+E9C2  Strophicus liquescens, 2nd\n    Glyphs[\"chantStrophicusLiquescens2nd\"] = \"\\uE9C2\";\n    // U+E9C3  Strophicus liquescens, 3rd\n    Glyphs[\"chantStrophicusLiquescens3rd\"] = \"\\uE9C3\";\n    // U+E9C4  Strophicus liquescens, 4th\n    Glyphs[\"chantStrophicusLiquescens4th\"] = \"\\uE9C4\";\n    // U+E9C5  Strophicus liquescens, 5th\n    Glyphs[\"chantStrophicusLiquescens5th\"] = \"\\uE9C5\";\n    // U+E8F7  Virgula\n    Glyphs[\"chantVirgula\"] = \"\\uE8F7\";\n    // U+E07E  15 for clefs\n    Glyphs[\"clef15\"] = \"\\uE07E\";\n    // U+E07D  8 for clefs\n    Glyphs[\"clef8\"] = \"\\uE07D\";\n    // U+E07F  Combining clef change\n    Glyphs[\"clefChangeCombining\"] = \"\\uE07F\";\n    // U+E048  Coda\n    Glyphs[\"coda\"] = \"\\uE048\";\n    // U+E049  Square coda\n    Glyphs[\"codaSquare\"] = \"\\uE049\";\n    // U+E897  Beat 2, compound time\n    Glyphs[\"conductorBeat2Compound\"] = \"\\uE897\";\n    // U+E894  Beat 2, simple time\n    Glyphs[\"conductorBeat2Simple\"] = \"\\uE894\";\n    // U+E898  Beat 3, compound time\n    Glyphs[\"conductorBeat3Compound\"] = \"\\uE898\";\n    // U+E895  Beat 3, simple time\n    Glyphs[\"conductorBeat3Simple\"] = \"\\uE895\";\n    // U+E899  Beat 4, compound time\n    Glyphs[\"conductorBeat4Compound\"] = \"\\uE899\";\n    // U+E896  Beat 4, simple time\n    Glyphs[\"conductorBeat4Simple\"] = \"\\uE896\";\n    // U+E891  Left-hand beat or cue\n    Glyphs[\"conductorLeftBeat\"] = \"\\uE891\";\n    // U+E892  Right-hand beat or cue\n    Glyphs[\"conductorRightBeat\"] = \"\\uE892\";\n    // U+E890  Strong beat or cue\n    Glyphs[\"conductorStrongBeat\"] = \"\\uE890\";\n    // U+E89A  Unconducted/free passages\n    Glyphs[\"conductorUnconducted\"] = \"\\uE89A\";\n    // U+E893  Weak beat or cue\n    Glyphs[\"conductorWeakBeat\"] = \"\\uE893\";\n    // U+E8E0  Begin beam\n    Glyphs[\"controlBeginBeam\"] = \"\\uE8E0\";\n    // U+E8E6  Begin phrase\n    Glyphs[\"controlBeginPhrase\"] = \"\\uE8E6\";\n    // U+E8E4  Begin slur\n    Glyphs[\"controlBeginSlur\"] = \"\\uE8E4\";\n    // U+E8E2  Begin tie\n    Glyphs[\"controlBeginTie\"] = \"\\uE8E2\";\n    // U+E8E1  End beam\n    Glyphs[\"controlEndBeam\"] = \"\\uE8E1\";\n    // U+E8E7  End phrase\n    Glyphs[\"controlEndPhrase\"] = \"\\uE8E7\";\n    // U+E8E5  End slur\n    Glyphs[\"controlEndSlur\"] = \"\\uE8E5\";\n    // U+E8E3  End tie\n    Glyphs[\"controlEndTie\"] = \"\\uE8E3\";\n    // U+ED64  Double flat\n    Glyphs[\"csymAccidentalDoubleFlat\"] = \"\\uED64\";\n    // U+ED63  Double sharp\n    Glyphs[\"csymAccidentalDoubleSharp\"] = \"\\uED63\";\n    // U+ED60  Flat\n    Glyphs[\"csymAccidentalFlat\"] = \"\\uED60\";\n    // U+ED61  Natural\n    Glyphs[\"csymAccidentalNatural\"] = \"\\uED61\";\n    // U+ED62  Sharp\n    Glyphs[\"csymAccidentalSharp\"] = \"\\uED62\";\n    // U+ED66  Triple flat\n    Glyphs[\"csymAccidentalTripleFlat\"] = \"\\uED66\";\n    // U+ED65  Triple sharp\n    Glyphs[\"csymAccidentalTripleSharp\"] = \"\\uED65\";\n    // U+E87B  Slash for altered bass note\n    Glyphs[\"csymAlteredBassSlash\"] = \"\\uE87B\";\n    // U+E872  Augmented\n    Glyphs[\"csymAugmented\"] = \"\\uE872\";\n    // U+E877  Double-height left bracket\n    Glyphs[\"csymBracketLeftTall\"] = \"\\uE877\";\n    // U+E878  Double-height right bracket\n    Glyphs[\"csymBracketRightTall\"] = \"\\uE878\";\n    // U+E87C  Slash for chord symbols arranged diagonally\n    Glyphs[\"csymDiagonalArrangementSlash\"] = \"\\uE87C\";\n    // U+E870  Diminished\n    Glyphs[\"csymDiminished\"] = \"\\uE870\";\n    // U+E871  Half-diminished\n    Glyphs[\"csymHalfDiminished\"] = \"\\uE871\";\n    // U+E873  Major seventh\n    Glyphs[\"csymMajorSeventh\"] = \"\\uE873\";\n    // U+E874  Minor\n    Glyphs[\"csymMinor\"] = \"\\uE874\";\n    // U+E875  Double-height left parenthesis\n    Glyphs[\"csymParensLeftTall\"] = \"\\uE875\";\n    // U+E879  Triple-height left parenthesis\n    Glyphs[\"csymParensLeftVeryTall\"] = \"\\uE879\";\n    // U+E876  Double-height right parenthesis\n    Glyphs[\"csymParensRightTall\"] = \"\\uE876\";\n    // U+E87A  Triple-height right parenthesis\n    Glyphs[\"csymParensRightVeryTall\"] = \"\\uE87A\";\n    // U+E4D6  Curlew (Britten)\n    Glyphs[\"curlewSign\"] = \"\\uE4D6\";\n    // U+E046  Da capo\n    Glyphs[\"daCapo\"] = \"\\uE046\";\n    // U+E045  Dal segno\n    Glyphs[\"dalSegno\"] = \"\\uE045\";\n    // U+EA3C  Daseian excellentes 1\n    Glyphs[\"daseianExcellentes1\"] = \"\\uEA3C\";\n    // U+EA3D  Daseian excellentes 2\n    Glyphs[\"daseianExcellentes2\"] = \"\\uEA3D\";\n    // U+EA3E  Daseian excellentes 3\n    Glyphs[\"daseianExcellentes3\"] = \"\\uEA3E\";\n    // U+EA3F  Daseian excellentes 4\n    Glyphs[\"daseianExcellentes4\"] = \"\\uEA3F\";\n    // U+EA34  Daseian finales 1\n    Glyphs[\"daseianFinales1\"] = \"\\uEA34\";\n    // U+EA35  Daseian finales 2\n    Glyphs[\"daseianFinales2\"] = \"\\uEA35\";\n    // U+EA36  Daseian finales 3\n    Glyphs[\"daseianFinales3\"] = \"\\uEA36\";\n    // U+EA37  Daseian finales 4\n    Glyphs[\"daseianFinales4\"] = \"\\uEA37\";\n    // U+EA30  Daseian graves 1\n    Glyphs[\"daseianGraves1\"] = \"\\uEA30\";\n    // U+EA31  Daseian graves 2\n    Glyphs[\"daseianGraves2\"] = \"\\uEA31\";\n    // U+EA32  Daseian graves 3\n    Glyphs[\"daseianGraves3\"] = \"\\uEA32\";\n    // U+EA33  Daseian graves 4\n    Glyphs[\"daseianGraves4\"] = \"\\uEA33\";\n    // U+EA40  Daseian residua 1\n    Glyphs[\"daseianResidua1\"] = \"\\uEA40\";\n    // U+EA41  Daseian residua 2\n    Glyphs[\"daseianResidua2\"] = \"\\uEA41\";\n    // U+EA38  Daseian superiores 1\n    Glyphs[\"daseianSuperiores1\"] = \"\\uEA38\";\n    // U+EA39  Daseian superiores 2\n    Glyphs[\"daseianSuperiores2\"] = \"\\uEA39\";\n    // U+EA3A  Daseian superiores 3\n    Glyphs[\"daseianSuperiores3\"] = \"\\uEA3A\";\n    // U+EA3B  Daseian superiores 4\n    Glyphs[\"daseianSuperiores4\"] = \"\\uEA3B\";\n    // U+E234  Double lateral roll (Stevens)\n    Glyphs[\"doubleLateralRollStevens\"] = \"\\uE234\";\n    // U+E5F0  Double-tongue above\n    Glyphs[\"doubleTongueAbove\"] = \"\\uE5F0\";\n    // U+E5F1  Double-tongue below\n    Glyphs[\"doubleTongueBelow\"] = \"\\uE5F1\";\n    // U+E546  Colon separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorColon\"] = \"\\uE546\";\n    // U+E547  Hyphen separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorHyphen\"] = \"\\uE547\";\n    // U+E549  Slash separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorSlash\"] = \"\\uE549\";\n    // U+E548  Space separator for combined dynamics\n    Glyphs[\"dynamicCombinedSeparatorSpace\"] = \"\\uE548\";\n    // U+E53E  Crescendo\n    Glyphs[\"dynamicCrescendoHairpin\"] = \"\\uE53E\";\n    // U+E53F  Diminuendo\n    Glyphs[\"dynamicDiminuendoHairpin\"] = \"\\uE53F\";\n    // U+E52F  ff\n    Glyphs[\"dynamicFF\"] = \"\\uE52F\";\n    // U+E530  fff\n    Glyphs[\"dynamicFFF\"] = \"\\uE530\";\n    // U+E531  ffff\n    Glyphs[\"dynamicFFFF\"] = \"\\uE531\";\n    // U+E532  fffff\n    Glyphs[\"dynamicFFFFF\"] = \"\\uE532\";\n    // U+E533  ffffff\n    Glyphs[\"dynamicFFFFFF\"] = \"\\uE533\";\n    // U+E522  Forte\n    Glyphs[\"dynamicForte\"] = \"\\uE522\";\n    // U+E534  Forte-piano\n    Glyphs[\"dynamicFortePiano\"] = \"\\uE534\";\n    // U+E535  Forzando\n    Glyphs[\"dynamicForzando\"] = \"\\uE535\";\n    // U+E544  Left bracket (for hairpins)\n    Glyphs[\"dynamicHairpinBracketLeft\"] = \"\\uE544\";\n    // U+E545  Right bracket (for hairpins)\n    Glyphs[\"dynamicHairpinBracketRight\"] = \"\\uE545\";\n    // U+E542  Left parenthesis (for hairpins)\n    Glyphs[\"dynamicHairpinParenthesisLeft\"] = \"\\uE542\";\n    // U+E543  Right parenthesis (for hairpins)\n    Glyphs[\"dynamicHairpinParenthesisRight\"] = \"\\uE543\";\n    // U+E52D  mf\n    Glyphs[\"dynamicMF\"] = \"\\uE52D\";\n    // U+E52C  mp\n    Glyphs[\"dynamicMP\"] = \"\\uE52C\";\n    // U+E540  Messa di voce\n    Glyphs[\"dynamicMessaDiVoce\"] = \"\\uE540\";\n    // U+E521  Mezzo\n    Glyphs[\"dynamicMezzo\"] = \"\\uE521\";\n    // U+E526  Niente\n    Glyphs[\"dynamicNiente\"] = \"\\uE526\";\n    // U+E541  Niente (for hairpins)\n    Glyphs[\"dynamicNienteForHairpin\"] = \"\\uE541\";\n    // U+E52E  pf\n    Glyphs[\"dynamicPF\"] = \"\\uE52E\";\n    // U+E52B  pp\n    Glyphs[\"dynamicPP\"] = \"\\uE52B\";\n    // U+E52A  ppp\n    Glyphs[\"dynamicPPP\"] = \"\\uE52A\";\n    // U+E529  pppp\n    Glyphs[\"dynamicPPPP\"] = \"\\uE529\";\n    // U+E528  ppppp\n    Glyphs[\"dynamicPPPPP\"] = \"\\uE528\";\n    // U+E527  pppppp\n    Glyphs[\"dynamicPPPPPP\"] = \"\\uE527\";\n    // U+E520  Piano\n    Glyphs[\"dynamicPiano\"] = \"\\uE520\";\n    // U+E523  Rinforzando\n    Glyphs[\"dynamicRinforzando\"] = \"\\uE523\";\n    // U+E53C  Rinforzando 1\n    Glyphs[\"dynamicRinforzando1\"] = \"\\uE53C\";\n    // U+E53D  Rinforzando 2\n    Glyphs[\"dynamicRinforzando2\"] = \"\\uE53D\";\n    // U+E524  Sforzando\n    Glyphs[\"dynamicSforzando\"] = \"\\uE524\";\n    // U+E536  Sforzando 1\n    Glyphs[\"dynamicSforzando1\"] = \"\\uE536\";\n    // U+E538  Sforzando-pianissimo\n    Glyphs[\"dynamicSforzandoPianissimo\"] = \"\\uE538\";\n    // U+E537  Sforzando-piano\n    Glyphs[\"dynamicSforzandoPiano\"] = \"\\uE537\";\n    // U+E539  Sforzato\n    Glyphs[\"dynamicSforzato\"] = \"\\uE539\";\n    // U+E53B  Sforzatissimo\n    Glyphs[\"dynamicSforzatoFF\"] = \"\\uE53B\";\n    // U+E53A  Sforzato-piano\n    Glyphs[\"dynamicSforzatoPiano\"] = \"\\uE53A\";\n    // U+E525  Z\n    Glyphs[\"dynamicZ\"] = \"\\uE525\";\n    // U+EB46  Eight channels (7.1 surround)\n    Glyphs[\"elecAudioChannelsEight\"] = \"\\uEB46\";\n    // U+EB43  Five channels\n    Glyphs[\"elecAudioChannelsFive\"] = \"\\uEB43\";\n    // U+EB42  Four channels\n    Glyphs[\"elecAudioChannelsFour\"] = \"\\uEB42\";\n    // U+EB3E  One channel (mono)\n    Glyphs[\"elecAudioChannelsOne\"] = \"\\uEB3E\";\n    // U+EB45  Seven channels\n    Glyphs[\"elecAudioChannelsSeven\"] = \"\\uEB45\";\n    // U+EB44  Six channels (5.1 surround)\n    Glyphs[\"elecAudioChannelsSix\"] = \"\\uEB44\";\n    // U+EB40  Three channels (frontal)\n    Glyphs[\"elecAudioChannelsThreeFrontal\"] = \"\\uEB40\";\n    // U+EB41  Three channels (surround)\n    Glyphs[\"elecAudioChannelsThreeSurround\"] = \"\\uEB41\";\n    // U+EB3F  Two channels (stereo)\n    Glyphs[\"elecAudioChannelsTwo\"] = \"\\uEB3F\";\n    // U+EB49  Audio in\n    Glyphs[\"elecAudioIn\"] = \"\\uEB49\";\n    // U+EB3C  Mono audio setup\n    Glyphs[\"elecAudioMono\"] = \"\\uEB3C\";\n    // U+EB4A  Audio out\n    Glyphs[\"elecAudioOut\"] = \"\\uEB4A\";\n    // U+EB3D  Stereo audio setup\n    Glyphs[\"elecAudioStereo\"] = \"\\uEB3D\";\n    // U+EB1B  Camera\n    Glyphs[\"elecCamera\"] = \"\\uEB1B\";\n    // U+EB4D  Data in\n    Glyphs[\"elecDataIn\"] = \"\\uEB4D\";\n    // U+EB4E  Data out\n    Glyphs[\"elecDataOut\"] = \"\\uEB4E\";\n    // U+EB13  Disc\n    Glyphs[\"elecDisc\"] = \"\\uEB13\";\n    // U+EB4F  Download\n    Glyphs[\"elecDownload\"] = \"\\uEB4F\";\n    // U+EB2B  Eject\n    Glyphs[\"elecEject\"] = \"\\uEB2B\";\n    // U+EB1F  Fast-forward\n    Glyphs[\"elecFastForward\"] = \"\\uEB1F\";\n    // U+EB11  Headphones\n    Glyphs[\"elecHeadphones\"] = \"\\uEB11\";\n    // U+EB12  Headset\n    Glyphs[\"elecHeadset\"] = \"\\uEB12\";\n    // U+EB47  Line in\n    Glyphs[\"elecLineIn\"] = \"\\uEB47\";\n    // U+EB48  Line out\n    Glyphs[\"elecLineOut\"] = \"\\uEB48\";\n    // U+EB23  Loop\n    Glyphs[\"elecLoop\"] = \"\\uEB23\";\n    // U+EB1A  Loudspeaker\n    Glyphs[\"elecLoudspeaker\"] = \"\\uEB1A\";\n    // U+EB36  MIDI controller 0%\n    Glyphs[\"elecMIDIController0\"] = \"\\uEB36\";\n    // U+EB3B  MIDI controller 100%\n    Glyphs[\"elecMIDIController100\"] = \"\\uEB3B\";\n    // U+EB37  MIDI controller 20%\n    Glyphs[\"elecMIDIController20\"] = \"\\uEB37\";\n    // U+EB38  MIDI controller 40%\n    Glyphs[\"elecMIDIController40\"] = \"\\uEB38\";\n    // U+EB39  MIDI controller 60%\n    Glyphs[\"elecMIDIController60\"] = \"\\uEB39\";\n    // U+EB3A  MIDI controller 80%\n    Glyphs[\"elecMIDIController80\"] = \"\\uEB3A\";\n    // U+EB34  MIDI in\n    Glyphs[\"elecMIDIIn\"] = \"\\uEB34\";\n    // U+EB35  MIDI out\n    Glyphs[\"elecMIDIOut\"] = \"\\uEB35\";\n    // U+EB10  Microphone\n    Glyphs[\"elecMicrophone\"] = \"\\uEB10\";\n    // U+EB28  Mute microphone\n    Glyphs[\"elecMicrophoneMute\"] = \"\\uEB28\";\n    // U+EB29  Unmute microphone\n    Glyphs[\"elecMicrophoneUnmute\"] = \"\\uEB29\";\n    // U+EB15  Mixing console\n    Glyphs[\"elecMixingConsole\"] = \"\\uEB15\";\n    // U+EB18  Monitor\n    Glyphs[\"elecMonitor\"] = \"\\uEB18\";\n    // U+EB26  Mute\n    Glyphs[\"elecMute\"] = \"\\uEB26\";\n    // U+EB1E  Pause\n    Glyphs[\"elecPause\"] = \"\\uEB1E\";\n    // U+EB1C  Play\n    Glyphs[\"elecPlay\"] = \"\\uEB1C\";\n    // U+EB2A  Power on/off\n    Glyphs[\"elecPowerOnOff\"] = \"\\uEB2A\";\n    // U+EB19  Projector\n    Glyphs[\"elecProjector\"] = \"\\uEB19\";\n    // U+EB24  Replay\n    Glyphs[\"elecReplay\"] = \"\\uEB24\";\n    // U+EB20  Rewind\n    Glyphs[\"elecRewind\"] = \"\\uEB20\";\n    // U+EB25  Shuffle\n    Glyphs[\"elecShuffle\"] = \"\\uEB25\";\n    // U+EB22  Skip backwards\n    Glyphs[\"elecSkipBackwards\"] = \"\\uEB22\";\n    // U+EB21  Skip forwards\n    Glyphs[\"elecSkipForwards\"] = \"\\uEB21\";\n    // U+EB1D  Stop\n    Glyphs[\"elecStop\"] = \"\\uEB1D\";\n    // U+EB14  Tape\n    Glyphs[\"elecTape\"] = \"\\uEB14\";\n    // U+EB16  USB connection\n    Glyphs[\"elecUSB\"] = \"\\uEB16\";\n    // U+EB27  Unmute\n    Glyphs[\"elecUnmute\"] = \"\\uEB27\";\n    // U+EB50  Upload\n    Glyphs[\"elecUpload\"] = \"\\uEB50\";\n    // U+EB17  Video camera\n    Glyphs[\"elecVideoCamera\"] = \"\\uEB17\";\n    // U+EB4B  Video in\n    Glyphs[\"elecVideoIn\"] = \"\\uEB4B\";\n    // U+EB4C  Video out\n    Glyphs[\"elecVideoOut\"] = \"\\uEB4C\";\n    // U+EB2C  Combining volume fader\n    Glyphs[\"elecVolumeFader\"] = \"\\uEB2C\";\n    // U+EB2D  Combining volume fader thumb\n    Glyphs[\"elecVolumeFaderThumb\"] = \"\\uEB2D\";\n    // U+EB2E  Volume level 0%\n    Glyphs[\"elecVolumeLevel0\"] = \"\\uEB2E\";\n    // U+EB33  Volume level 100%\n    Glyphs[\"elecVolumeLevel100\"] = \"\\uEB33\";\n    // U+EB2F  Volume level 20%\n    Glyphs[\"elecVolumeLevel20\"] = \"\\uEB2F\";\n    // U+EB30  Volume level 40%\n    Glyphs[\"elecVolumeLevel40\"] = \"\\uEB30\";\n    // U+EB31  Volume level 60%\n    Glyphs[\"elecVolumeLevel60\"] = \"\\uEB31\";\n    // U+EB32  Volume level 80%\n    Glyphs[\"elecVolumeLevel80\"] = \"\\uEB32\";\n    // U+E062  F clef\n    Glyphs[\"fClef\"] = \"\\uE062\";\n    // U+E066  F clef quindicesima alta\n    Glyphs[\"fClef15ma\"] = \"\\uE066\";\n    // U+E063  F clef quindicesima bassa\n    Glyphs[\"fClef15mb\"] = \"\\uE063\";\n    // U+E065  F clef ottava alta\n    Glyphs[\"fClef8va\"] = \"\\uE065\";\n    // U+E064  F clef ottava bassa\n    Glyphs[\"fClef8vb\"] = \"\\uE064\";\n    // U+E068  F clef, arrow down\n    Glyphs[\"fClefArrowDown\"] = \"\\uE068\";\n    // U+E067  F clef, arrow up\n    Glyphs[\"fClefArrowUp\"] = \"\\uE067\";\n    // U+E07C  F clef change\n    Glyphs[\"fClefChange\"] = \"\\uE07C\";\n    // U+E076  Reversed F clef\n    Glyphs[\"fClefReversed\"] = \"\\uE076\";\n    // U+E077  Turned F clef\n    Glyphs[\"fClefTurned\"] = \"\\uE077\";\n    // U+E4C0  Fermata above\n    Glyphs[\"fermataAbove\"] = \"\\uE4C0\";\n    // U+E4C1  Fermata below\n    Glyphs[\"fermataBelow\"] = \"\\uE4C1\";\n    // U+E4C6  Long fermata above\n    Glyphs[\"fermataLongAbove\"] = \"\\uE4C6\";\n    // U+E4C7  Long fermata below\n    Glyphs[\"fermataLongBelow\"] = \"\\uE4C7\";\n    // U+E4CA  Long fermata (Henze) above\n    Glyphs[\"fermataLongHenzeAbove\"] = \"\\uE4CA\";\n    // U+E4CB  Long fermata (Henze) below\n    Glyphs[\"fermataLongHenzeBelow\"] = \"\\uE4CB\";\n    // U+E4C4  Short fermata above\n    Glyphs[\"fermataShortAbove\"] = \"\\uE4C4\";\n    // U+E4C5  Short fermata below\n    Glyphs[\"fermataShortBelow\"] = \"\\uE4C5\";\n    // U+E4CC  Short fermata (Henze) above\n    Glyphs[\"fermataShortHenzeAbove\"] = \"\\uE4CC\";\n    // U+E4CD  Short fermata (Henze) below\n    Glyphs[\"fermataShortHenzeBelow\"] = \"\\uE4CD\";\n    // U+E4C8  Very long fermata above\n    Glyphs[\"fermataVeryLongAbove\"] = \"\\uE4C8\";\n    // U+E4C9  Very long fermata below\n    Glyphs[\"fermataVeryLongBelow\"] = \"\\uE4C9\";\n    // U+E4C2  Very short fermata above\n    Glyphs[\"fermataVeryShortAbove\"] = \"\\uE4C2\";\n    // U+E4C3  Very short fermata below\n    Glyphs[\"fermataVeryShortBelow\"] = \"\\uE4C3\";\n    // U+EA50  Figured bass 0\n    Glyphs[\"figbass0\"] = \"\\uEA50\";\n    // U+EA51  Figured bass 1\n    Glyphs[\"figbass1\"] = \"\\uEA51\";\n    // U+EA52  Figured bass 2\n    Glyphs[\"figbass2\"] = \"\\uEA52\";\n    // U+EA53  Figured bass 2 raised by half-step\n    Glyphs[\"figbass2Raised\"] = \"\\uEA53\";\n    // U+EA54  Figured bass 3\n    Glyphs[\"figbass3\"] = \"\\uEA54\";\n    // U+EA55  Figured bass 4\n    Glyphs[\"figbass4\"] = \"\\uEA55\";\n    // U+EA56  Figured bass 4 raised by half-step\n    Glyphs[\"figbass4Raised\"] = \"\\uEA56\";\n    // U+EA57  Figured bass 5\n    Glyphs[\"figbass5\"] = \"\\uEA57\";\n    // U+EA58  Figured bass 5 raised by half-step\n    Glyphs[\"figbass5Raised1\"] = \"\\uEA58\";\n    // U+EA59  Figured bass 5 raised by half-step 2\n    Glyphs[\"figbass5Raised2\"] = \"\\uEA59\";\n    // U+EA5A  Figured bass diminished 5\n    Glyphs[\"figbass5Raised3\"] = \"\\uEA5A\";\n    // U+EA5B  Figured bass 6\n    Glyphs[\"figbass6\"] = \"\\uEA5B\";\n    // U+EA5C  Figured bass 6 raised by half-step\n    Glyphs[\"figbass6Raised\"] = \"\\uEA5C\";\n    // U+EA6F  Figured bass 6 raised by half-step 2\n    Glyphs[\"figbass6Raised2\"] = \"\\uEA6F\";\n    // U+EA5D  Figured bass 7\n    Glyphs[\"figbass7\"] = \"\\uEA5D\";\n    // U+ECC0  Figured bass 7 diminished\n    Glyphs[\"figbass7Diminished\"] = \"\\uECC0\";\n    // U+EA5E  Figured bass 7 raised by half-step\n    Glyphs[\"figbass7Raised1\"] = \"\\uEA5E\";\n    // U+EA5F  Figured bass 7 lowered by a half-step\n    Glyphs[\"figbass7Raised2\"] = \"\\uEA5F\";\n    // U+EA60  Figured bass 8\n    Glyphs[\"figbass8\"] = \"\\uEA60\";\n    // U+EA61  Figured bass 9\n    Glyphs[\"figbass9\"] = \"\\uEA61\";\n    // U+EA62  Figured bass 9 raised by half-step\n    Glyphs[\"figbass9Raised\"] = \"\\uEA62\";\n    // U+EA68  Figured bass [\n    Glyphs[\"figbassBracketLeft\"] = \"\\uEA68\";\n    // U+EA69  Figured bass ]\n    Glyphs[\"figbassBracketRight\"] = \"\\uEA69\";\n    // U+EA6E  Combining lower\n    Glyphs[\"figbassCombiningLowering\"] = \"\\uEA6E\";\n    // U+EA6D  Combining raise\n    Glyphs[\"figbassCombiningRaising\"] = \"\\uEA6D\";\n    // U+EA63  Figured bass double flat\n    Glyphs[\"figbassDoubleFlat\"] = \"\\uEA63\";\n    // U+EA67  Figured bass double sharp\n    Glyphs[\"figbassDoubleSharp\"] = \"\\uEA67\";\n    // U+EA64  Figured bass flat\n    Glyphs[\"figbassFlat\"] = \"\\uEA64\";\n    // U+EA65  Figured bass natural\n    Glyphs[\"figbassNatural\"] = \"\\uEA65\";\n    // U+EA6A  Figured bass (\n    Glyphs[\"figbassParensLeft\"] = \"\\uEA6A\";\n    // U+EA6B  Figured bass )\n    Glyphs[\"figbassParensRight\"] = \"\\uEA6B\";\n    // U+EA6C  Figured bass +\n    Glyphs[\"figbassPlus\"] = \"\\uEA6C\";\n    // U+EA66  Figured bass sharp\n    Glyphs[\"figbassSharp\"] = \"\\uEA66\";\n    // U+ECC1  Figured bass triple flat\n    Glyphs[\"figbassTripleFlat\"] = \"\\uECC1\";\n    // U+ECC2  Figured bass triple sharp\n    Glyphs[\"figbassTripleSharp\"] = \"\\uECC2\";\n    // U+ED10  Fingering 0 (open string)\n    Glyphs[\"fingering0\"] = \"\\uED10\";\n    // U+ED80  Fingering 0 italic (open string)\n    Glyphs[\"fingering0Italic\"] = \"\\uED80\";\n    // U+ED11  Fingering 1 (thumb)\n    Glyphs[\"fingering1\"] = \"\\uED11\";\n    // U+ED81  Fingering 1 italic (thumb)\n    Glyphs[\"fingering1Italic\"] = \"\\uED81\";\n    // U+ED12  Fingering 2 (index finger)\n    Glyphs[\"fingering2\"] = \"\\uED12\";\n    // U+ED82  Fingering 2 italic (index finger)\n    Glyphs[\"fingering2Italic\"] = \"\\uED82\";\n    // U+ED13  Fingering 3 (middle finger)\n    Glyphs[\"fingering3\"] = \"\\uED13\";\n    // U+ED83  Fingering 3 italic (middle finger)\n    Glyphs[\"fingering3Italic\"] = \"\\uED83\";\n    // U+ED14  Fingering 4 (ring finger)\n    Glyphs[\"fingering4\"] = \"\\uED14\";\n    // U+ED84  Fingering 4 italic (ring finger)\n    Glyphs[\"fingering4Italic\"] = \"\\uED84\";\n    // U+ED15  Fingering 5 (little finger)\n    Glyphs[\"fingering5\"] = \"\\uED15\";\n    // U+ED85  Fingering 5 italic (little finger)\n    Glyphs[\"fingering5Italic\"] = \"\\uED85\";\n    // U+ED24  Fingering 6\n    Glyphs[\"fingering6\"] = \"\\uED24\";\n    // U+ED86  Fingering 6 italic\n    Glyphs[\"fingering6Italic\"] = \"\\uED86\";\n    // U+ED25  Fingering 7\n    Glyphs[\"fingering7\"] = \"\\uED25\";\n    // U+ED87  Fingering 7 italic\n    Glyphs[\"fingering7Italic\"] = \"\\uED87\";\n    // U+ED26  Fingering 8\n    Glyphs[\"fingering8\"] = \"\\uED26\";\n    // U+ED88  Fingering 8 italic\n    Glyphs[\"fingering8Italic\"] = \"\\uED88\";\n    // U+ED27  Fingering 9\n    Glyphs[\"fingering9\"] = \"\\uED27\";\n    // U+ED89  Fingering 9 italic\n    Glyphs[\"fingering9Italic\"] = \"\\uED89\";\n    // U+ED1B  Fingering a (anular; right-hand ring finger for guitar)\n    Glyphs[\"fingeringALower\"] = \"\\uED1B\";\n    // U+ED1C  Fingering c (right-hand little finger for guitar)\n    Glyphs[\"fingeringCLower\"] = \"\\uED1C\";\n    // U+ED1E  Fingering e (right-hand little finger for guitar)\n    Glyphs[\"fingeringELower\"] = \"\\uED1E\";\n    // U+ED19  Fingering i (indicio; right-hand index finger for guitar)\n    Glyphs[\"fingeringILower\"] = \"\\uED19\";\n    // U+ED2A  Fingering left bracket\n    Glyphs[\"fingeringLeftBracket\"] = \"\\uED2A\";\n    // U+ED8C  Fingering left bracket italic\n    Glyphs[\"fingeringLeftBracketItalic\"] = \"\\uED8C\";\n    // U+ED28  Fingering left parenthesis\n    Glyphs[\"fingeringLeftParenthesis\"] = \"\\uED28\";\n    // U+ED8A  Fingering left parenthesis italic\n    Glyphs[\"fingeringLeftParenthesisItalic\"] = \"\\uED8A\";\n    // U+ED1A  Fingering m (medio; right-hand middle finger for guitar)\n    Glyphs[\"fingeringMLower\"] = \"\\uED1A\";\n    // U+ED23  Multiple notes played by thumb or single finger\n    Glyphs[\"fingeringMultipleNotes\"] = \"\\uED23\";\n    // U+ED1F  Fingering o (right-hand little finger for guitar)\n    Glyphs[\"fingeringOLower\"] = \"\\uED1F\";\n    // U+ED17  Fingering p (pulgar; right-hand thumb for guitar)\n    Glyphs[\"fingeringPLower\"] = \"\\uED17\";\n    // U+ED8E  Fingering q (right-hand little finger for guitar)\n    Glyphs[\"fingeringQLower\"] = \"\\uED8E\";\n    // U+ED2B  Fingering right bracket\n    Glyphs[\"fingeringRightBracket\"] = \"\\uED2B\";\n    // U+ED8D  Fingering right bracket italic\n    Glyphs[\"fingeringRightBracketItalic\"] = \"\\uED8D\";\n    // U+ED29  Fingering right parenthesis\n    Glyphs[\"fingeringRightParenthesis\"] = \"\\uED29\";\n    // U+ED8B  Fingering right parenthesis italic\n    Glyphs[\"fingeringRightParenthesisItalic\"] = \"\\uED8B\";\n    // U+ED8F  Fingering s (right-hand little finger for guitar)\n    Glyphs[\"fingeringSLower\"] = \"\\uED8F\";\n    // U+ED2C  Fingering middle dot separator\n    Glyphs[\"fingeringSeparatorMiddleDot\"] = \"\\uED2C\";\n    // U+ED2D  Fingering white middle dot separator\n    Glyphs[\"fingeringSeparatorMiddleDotWhite\"] = \"\\uED2D\";\n    // U+ED2E  Fingering forward slash separator\n    Glyphs[\"fingeringSeparatorSlash\"] = \"\\uED2E\";\n    // U+ED20  Finger substitution above\n    Glyphs[\"fingeringSubstitutionAbove\"] = \"\\uED20\";\n    // U+ED21  Finger substitution below\n    Glyphs[\"fingeringSubstitutionBelow\"] = \"\\uED21\";\n    // U+ED22  Finger substitution dash\n    Glyphs[\"fingeringSubstitutionDash\"] = \"\\uED22\";\n    // U+ED18  Fingering t (right-hand thumb for guitar)\n    Glyphs[\"fingeringTLower\"] = \"\\uED18\";\n    // U+ED16  Fingering T (left-hand thumb for guitar)\n    Glyphs[\"fingeringTUpper\"] = \"\\uED16\";\n    // U+ED1D  Fingering x (right-hand little finger for guitar)\n    Glyphs[\"fingeringXLower\"] = \"\\uED1D\";\n    // U+E24F  Combining flag 8 (1024th) below\n    Glyphs[\"flag1024thDown\"] = \"\\uE24F\";\n    // U+E24E  Combining flag 8 (1024th) above\n    Glyphs[\"flag1024thUp\"] = \"\\uE24E\";\n    // U+E249  Combining flag 5 (128th) below\n    Glyphs[\"flag128thDown\"] = \"\\uE249\";\n    // U+E248  Combining flag 5 (128th) above\n    Glyphs[\"flag128thUp\"] = \"\\uE248\";\n    // U+E243  Combining flag 2 (16th) below\n    Glyphs[\"flag16thDown\"] = \"\\uE243\";\n    // U+E242  Combining flag 2 (16th) above\n    Glyphs[\"flag16thUp\"] = \"\\uE242\";\n    // U+E24B  Combining flag 6 (256th) below\n    Glyphs[\"flag256thDown\"] = \"\\uE24B\";\n    // U+E24A  Combining flag 6 (256th) above\n    Glyphs[\"flag256thUp\"] = \"\\uE24A\";\n    // U+E245  Combining flag 3 (32nd) below\n    Glyphs[\"flag32ndDown\"] = \"\\uE245\";\n    // U+E244  Combining flag 3 (32nd) above\n    Glyphs[\"flag32ndUp\"] = \"\\uE244\";\n    // U+E24D  Combining flag 7 (512th) below\n    Glyphs[\"flag512thDown\"] = \"\\uE24D\";\n    // U+E24C  Combining flag 7 (512th) above\n    Glyphs[\"flag512thUp\"] = \"\\uE24C\";\n    // U+E247  Combining flag 4 (64th) below\n    Glyphs[\"flag64thDown\"] = \"\\uE247\";\n    // U+E246  Combining flag 4 (64th) above\n    Glyphs[\"flag64thUp\"] = \"\\uE246\";\n    // U+E241  Combining flag 1 (8th) below\n    Glyphs[\"flag8thDown\"] = \"\\uE241\";\n    // U+E240  Combining flag 1 (8th) above\n    Glyphs[\"flag8thUp\"] = \"\\uE240\";\n    // U+E251  Internal combining flag below\n    Glyphs[\"flagInternalDown\"] = \"\\uE251\";\n    // U+E250  Internal combining flag above\n    Glyphs[\"flagInternalUp\"] = \"\\uE250\";\n    // U+E850  3-string fretboard\n    Glyphs[\"fretboard3String\"] = \"\\uE850\";\n    // U+E851  3-string fretboard at nut\n    Glyphs[\"fretboard3StringNut\"] = \"\\uE851\";\n    // U+E852  4-string fretboard\n    Glyphs[\"fretboard4String\"] = \"\\uE852\";\n    // U+E853  4-string fretboard at nut\n    Glyphs[\"fretboard4StringNut\"] = \"\\uE853\";\n    // U+E854  5-string fretboard\n    Glyphs[\"fretboard5String\"] = \"\\uE854\";\n    // U+E855  5-string fretboard at nut\n    Glyphs[\"fretboard5StringNut\"] = \"\\uE855\";\n    // U+E856  6-string fretboard\n    Glyphs[\"fretboard6String\"] = \"\\uE856\";\n    // U+E857  6-string fretboard at nut\n    Glyphs[\"fretboard6StringNut\"] = \"\\uE857\";\n    // U+E858  Fingered fret (filled circle)\n    Glyphs[\"fretboardFilledCircle\"] = \"\\uE858\";\n    // U+E85A  Open string (O)\n    Glyphs[\"fretboardO\"] = \"\\uE85A\";\n    // U+E859  String not played (X)\n    Glyphs[\"fretboardX\"] = \"\\uE859\";\n    // U+EA93  Function theory angle bracket left\n    Glyphs[\"functionAngleLeft\"] = \"\\uEA93\";\n    // U+EA94  Function theory angle bracket right\n    Glyphs[\"functionAngleRight\"] = \"\\uEA94\";\n    // U+EA8F  Function theory bracket left\n    Glyphs[\"functionBracketLeft\"] = \"\\uEA8F\";\n    // U+EA90  Function theory bracket right\n    Glyphs[\"functionBracketRight\"] = \"\\uEA90\";\n    // U+EA81  Function theory dominant of dominant\n    Glyphs[\"functionDD\"] = \"\\uEA81\";\n    // U+EA80  Function theory minor dominant\n    Glyphs[\"functionDLower\"] = \"\\uEA80\";\n    // U+EA7F  Function theory major dominant\n    Glyphs[\"functionDUpper\"] = \"\\uEA7F\";\n    // U+EA78  Function theory 8\n    Glyphs[\"functionEight\"] = \"\\uEA78\";\n    // U+EA99  Function theory F\n    Glyphs[\"functionFUpper\"] = \"\\uEA99\";\n    // U+EA75  Function theory 5\n    Glyphs[\"functionFive\"] = \"\\uEA75\";\n    // U+EA74  Function theory 4\n    Glyphs[\"functionFour\"] = \"\\uEA74\";\n    // U+EA84  Function theory g\n    Glyphs[\"functionGLower\"] = \"\\uEA84\";\n    // U+EA83  Function theory G\n    Glyphs[\"functionGUpper\"] = \"\\uEA83\";\n    // U+EA7C  Function theory greater than\n    Glyphs[\"functionGreaterThan\"] = \"\\uEA7C\";\n    // U+EA9B  Function theory i\n    Glyphs[\"functionILower\"] = \"\\uEA9B\";\n    // U+EA9A  Function theory I\n    Glyphs[\"functionIUpper\"] = \"\\uEA9A\";\n    // U+EA9D  Function theory k\n    Glyphs[\"functionKLower\"] = \"\\uEA9D\";\n    // U+EA9C  Function theory K\n    Glyphs[\"functionKUpper\"] = \"\\uEA9C\";\n    // U+EA9F  Function theory l\n    Glyphs[\"functionLLower\"] = \"\\uEA9F\";\n    // U+EA9E  Function theory L\n    Glyphs[\"functionLUpper\"] = \"\\uEA9E\";\n    // U+EA7A  Function theory less than\n    Glyphs[\"functionLessThan\"] = \"\\uEA7A\";\n    // U+ED01  Function theory m\n    Glyphs[\"functionMLower\"] = \"\\uED01\";\n    // U+ED00  Function theory M\n    Glyphs[\"functionMUpper\"] = \"\\uED00\";\n    // U+EA7B  Function theory minus\n    Glyphs[\"functionMinus\"] = \"\\uEA7B\";\n    // U+EA86  Function theory n\n    Glyphs[\"functionNLower\"] = \"\\uEA86\";\n    // U+EA85  Function theory N\n    Glyphs[\"functionNUpper\"] = \"\\uEA85\";\n    // U+ED02  Function theory superscript N\n    Glyphs[\"functionNUpperSuperscript\"] = \"\\uED02\";\n    // U+EA79  Function theory 9\n    Glyphs[\"functionNine\"] = \"\\uEA79\";\n    // U+EA71  Function theory 1\n    Glyphs[\"functionOne\"] = \"\\uEA71\";\n    // U+EA88  Function theory p\n    Glyphs[\"functionPLower\"] = \"\\uEA88\";\n    // U+EA87  Function theory P\n    Glyphs[\"functionPUpper\"] = \"\\uEA87\";\n    // U+EA91  Function theory parenthesis left\n    Glyphs[\"functionParensLeft\"] = \"\\uEA91\";\n    // U+EA92  Function theory parenthesis right\n    Glyphs[\"functionParensRight\"] = \"\\uEA92\";\n    // U+EA98  Function theory prefix plus\n    Glyphs[\"functionPlus\"] = \"\\uEA98\";\n    // U+ED03  Function theory r\n    Glyphs[\"functionRLower\"] = \"\\uED03\";\n    // U+EA95  Function theory repetition 1\n    Glyphs[\"functionRepetition1\"] = \"\\uEA95\";\n    // U+EA96  Function theory repetition 2\n    Glyphs[\"functionRepetition2\"] = \"\\uEA96\";\n    // U+EA97  Function theory prefix ring\n    Glyphs[\"functionRing\"] = \"\\uEA97\";\n    // U+EA8A  Function theory minor subdominant\n    Glyphs[\"functionSLower\"] = \"\\uEA8A\";\n    // U+EA7E  Function theory minor subdominant of subdominant\n    Glyphs[\"functionSSLower\"] = \"\\uEA7E\";\n    // U+EA7D  Function theory major subdominant of subdominant\n    Glyphs[\"functionSSUpper\"] = \"\\uEA7D\";\n    // U+EA89  Function theory major subdominant\n    Glyphs[\"functionSUpper\"] = \"\\uEA89\";\n    // U+EA77  Function theory 7\n    Glyphs[\"functionSeven\"] = \"\\uEA77\";\n    // U+EA76  Function theory 6\n    Glyphs[\"functionSix\"] = \"\\uEA76\";\n    // U+EA82  Function theory double dominant seventh\n    Glyphs[\"functionSlashedDD\"] = \"\\uEA82\";\n    // U+EA8C  Function theory minor tonic\n    Glyphs[\"functionTLower\"] = \"\\uEA8C\";\n    // U+EA8B  Function theory tonic\n    Glyphs[\"functionTUpper\"] = \"\\uEA8B\";\n    // U+EA73  Function theory 3\n    Glyphs[\"functionThree\"] = \"\\uEA73\";\n    // U+EA72  Function theory 2\n    Glyphs[\"functionTwo\"] = \"\\uEA72\";\n    // U+EA8E  Function theory v\n    Glyphs[\"functionVLower\"] = \"\\uEA8E\";\n    // U+EA8D  Function theory V\n    Glyphs[\"functionVUpper\"] = \"\\uEA8D\";\n    // U+EA70  Function theory 0\n    Glyphs[\"functionZero\"] = \"\\uEA70\";\n    // U+E050  G clef\n    Glyphs[\"gClef\"] = \"\\uE050\";\n    // U+E054  G clef quindicesima alta\n    Glyphs[\"gClef15ma\"] = \"\\uE054\";\n    // U+E051  G clef quindicesima bassa\n    Glyphs[\"gClef15mb\"] = \"\\uE051\";\n    // U+E053  G clef ottava alta\n    Glyphs[\"gClef8va\"] = \"\\uE053\";\n    // U+E052  G clef ottava bassa\n    Glyphs[\"gClef8vb\"] = \"\\uE052\";\n    // U+E056  G clef ottava bassa with C clef\n    Glyphs[\"gClef8vbCClef\"] = \"\\uE056\";\n    // U+E055  G clef ottava bassa (old style)\n    Glyphs[\"gClef8vbOld\"] = \"\\uE055\";\n    // U+E057  G clef, optionally ottava bassa\n    Glyphs[\"gClef8vbParens\"] = \"\\uE057\";\n    // U+E05B  G clef, arrow down\n    Glyphs[\"gClefArrowDown\"] = \"\\uE05B\";\n    // U+E05A  G clef, arrow up\n    Glyphs[\"gClefArrowUp\"] = \"\\uE05A\";\n    // U+E07A  G clef change\n    Glyphs[\"gClefChange\"] = \"\\uE07A\";\n    // U+E059  Combining G clef, number above\n    Glyphs[\"gClefLigatedNumberAbove\"] = \"\\uE059\";\n    // U+E058  Combining G clef, number below\n    Glyphs[\"gClefLigatedNumberBelow\"] = \"\\uE058\";\n    // U+E073  Reversed G clef\n    Glyphs[\"gClefReversed\"] = \"\\uE073\";\n    // U+E074  Turned G clef\n    Glyphs[\"gClefTurned\"] = \"\\uE074\";\n    // U+E586  Glissando down\n    Glyphs[\"glissandoDown\"] = \"\\uE586\";\n    // U+E585  Glissando up\n    Glyphs[\"glissandoUp\"] = \"\\uE585\";\n    // U+E561  Slashed grace note stem down\n    Glyphs[\"graceNoteAcciaccaturaStemDown\"] = \"\\uE561\";\n    // U+E560  Slashed grace note stem up\n    Glyphs[\"graceNoteAcciaccaturaStemUp\"] = \"\\uE560\";\n    // U+E563  Grace note stem down\n    Glyphs[\"graceNoteAppoggiaturaStemDown\"] = \"\\uE563\";\n    // U+E562  Grace note stem up\n    Glyphs[\"graceNoteAppoggiaturaStemUp\"] = \"\\uE562\";\n    // U+E565  Slash for stem down grace note\n    Glyphs[\"graceNoteSlashStemDown\"] = \"\\uE565\";\n    // U+E564  Slash for stem up grace note\n    Glyphs[\"graceNoteSlashStemUp\"] = \"\\uE564\";\n    // U+E848  Full barré\n    Glyphs[\"guitarBarreFull\"] = \"\\uE848\";\n    // U+E849  Half barré\n    Glyphs[\"guitarBarreHalf\"] = \"\\uE849\";\n    // U+E83F  Closed wah/volume pedal\n    Glyphs[\"guitarClosePedal\"] = \"\\uE83F\";\n    // U+E843  Fade in\n    Glyphs[\"guitarFadeIn\"] = \"\\uE843\";\n    // U+E844  Fade out\n    Glyphs[\"guitarFadeOut\"] = \"\\uE844\";\n    // U+E842  Golpe (tapping the pick guard)\n    Glyphs[\"guitarGolpe\"] = \"\\uE842\";\n    // U+E83E  Half-open wah/volume pedal\n    Glyphs[\"guitarHalfOpenPedal\"] = \"\\uE83E\";\n    // U+E840  Left-hand tapping\n    Glyphs[\"guitarLeftHandTapping\"] = \"\\uE840\";\n    // U+E83D  Open wah/volume pedal\n    Glyphs[\"guitarOpenPedal\"] = \"\\uE83D\";\n    // U+E841  Right-hand tapping\n    Glyphs[\"guitarRightHandTapping\"] = \"\\uE841\";\n    // U+E832  Guitar shake\n    Glyphs[\"guitarShake\"] = \"\\uE832\";\n    // U+E833  String number 0\n    Glyphs[\"guitarString0\"] = \"\\uE833\";\n    // U+E834  String number 1\n    Glyphs[\"guitarString1\"] = \"\\uE834\";\n    // U+E84A  String number 10\n    Glyphs[\"guitarString10\"] = \"\\uE84A\";\n    // U+E84B  String number 11\n    Glyphs[\"guitarString11\"] = \"\\uE84B\";\n    // U+E84C  String number 12\n    Glyphs[\"guitarString12\"] = \"\\uE84C\";\n    // U+E84D  String number 13\n    Glyphs[\"guitarString13\"] = \"\\uE84D\";\n    // U+E835  String number 2\n    Glyphs[\"guitarString2\"] = \"\\uE835\";\n    // U+E836  String number 3\n    Glyphs[\"guitarString3\"] = \"\\uE836\";\n    // U+E837  String number 4\n    Glyphs[\"guitarString4\"] = \"\\uE837\";\n    // U+E838  String number 5\n    Glyphs[\"guitarString5\"] = \"\\uE838\";\n    // U+E839  String number 6\n    Glyphs[\"guitarString6\"] = \"\\uE839\";\n    // U+E83A  String number 7\n    Glyphs[\"guitarString7\"] = \"\\uE83A\";\n    // U+E83B  String number 8\n    Glyphs[\"guitarString8\"] = \"\\uE83B\";\n    // U+E83C  String number 9\n    Glyphs[\"guitarString9\"] = \"\\uE83C\";\n    // U+E847  Strum direction down\n    Glyphs[\"guitarStrumDown\"] = \"\\uE847\";\n    // U+E846  Strum direction up\n    Glyphs[\"guitarStrumUp\"] = \"\\uE846\";\n    // U+E831  Guitar vibrato bar dip\n    Glyphs[\"guitarVibratoBarDip\"] = \"\\uE831\";\n    // U+E830  Guitar vibrato bar scoop\n    Glyphs[\"guitarVibratoBarScoop\"] = \"\\uE830\";\n    // U+EAB2  Vibrato wiggle segment\n    Glyphs[\"guitarVibratoStroke\"] = \"\\uEAB2\";\n    // U+E845  Volume swell\n    Glyphs[\"guitarVolumeSwell\"] = \"\\uE845\";\n    // U+EAB3  Wide vibrato wiggle segment\n    Glyphs[\"guitarWideVibratoStroke\"] = \"\\uEAB3\";\n    // U+E81F  Belltree\n    Glyphs[\"handbellsBelltree\"] = \"\\uE81F\";\n    // U+E81E  Damp 3\n    Glyphs[\"handbellsDamp3\"] = \"\\uE81E\";\n    // U+E81B  Echo\n    Glyphs[\"handbellsEcho1\"] = \"\\uE81B\";\n    // U+E81C  Echo 2\n    Glyphs[\"handbellsEcho2\"] = \"\\uE81C\";\n    // U+E81D  Gyro\n    Glyphs[\"handbellsGyro\"] = \"\\uE81D\";\n    // U+E812  Hand martellato\n    Glyphs[\"handbellsHandMartellato\"] = \"\\uE812\";\n    // U+E815  Mallet, bell on table\n    Glyphs[\"handbellsMalletBellOnTable\"] = \"\\uE815\";\n    // U+E814  Mallet, bell suspended\n    Glyphs[\"handbellsMalletBellSuspended\"] = \"\\uE814\";\n    // U+E816  Mallet lift\n    Glyphs[\"handbellsMalletLft\"] = \"\\uE816\";\n    // U+E810  Martellato\n    Glyphs[\"handbellsMartellato\"] = \"\\uE810\";\n    // U+E811  Martellato lift\n    Glyphs[\"handbellsMartellatoLift\"] = \"\\uE811\";\n    // U+E813  Muted martellato\n    Glyphs[\"handbellsMutedMartellato\"] = \"\\uE813\";\n    // U+E817  Pluck lift\n    Glyphs[\"handbellsPluckLift\"] = \"\\uE817\";\n    // U+E81A  Swing\n    Glyphs[\"handbellsSwing\"] = \"\\uE81A\";\n    // U+E819  Swing down\n    Glyphs[\"handbellsSwingDown\"] = \"\\uE819\";\n    // U+E818  Swing up\n    Glyphs[\"handbellsSwingUp\"] = \"\\uE818\";\n    // U+E821  Table pair of handbells\n    Glyphs[\"handbellsTablePairBells\"] = \"\\uE821\";\n    // U+E820  Table single handbell\n    Glyphs[\"handbellsTableSingleBell\"] = \"\\uE820\";\n    // U+E68F  Metal rod pictogram\n    Glyphs[\"harpMetalRod\"] = \"\\uE68F\";\n    // U+E681  Harp pedal centered (natural)\n    Glyphs[\"harpPedalCentered\"] = \"\\uE681\";\n    // U+E683  Harp pedal divider\n    Glyphs[\"harpPedalDivider\"] = \"\\uE683\";\n    // U+E682  Harp pedal lowered (sharp)\n    Glyphs[\"harpPedalLowered\"] = \"\\uE682\";\n    // U+E680  Harp pedal raised (flat)\n    Glyphs[\"harpPedalRaised\"] = \"\\uE680\";\n    // U+E695  Ascending aeolian chords (Salzedo)\n    Glyphs[\"harpSalzedoAeolianAscending\"] = \"\\uE695\";\n    // U+E696  Descending aeolian chords (Salzedo)\n    Glyphs[\"harpSalzedoAeolianDescending\"] = \"\\uE696\";\n    // U+E69A  Damp above (Salzedo)\n    Glyphs[\"harpSalzedoDampAbove\"] = \"\\uE69A\";\n    // U+E699  Damp below (Salzedo)\n    Glyphs[\"harpSalzedoDampBelow\"] = \"\\uE699\";\n    // U+E698  Damp with both hands (Salzedo)\n    Glyphs[\"harpSalzedoDampBothHands\"] = \"\\uE698\";\n    // U+E697  Damp only low strings (Salzedo)\n    Glyphs[\"harpSalzedoDampLowStrings\"] = \"\\uE697\";\n    // U+E68D  Fluidic sounds, left hand (Salzedo)\n    Glyphs[\"harpSalzedoFluidicSoundsLeft\"] = \"\\uE68D\";\n    // U+E68E  Fluidic sounds, right hand (Salzedo)\n    Glyphs[\"harpSalzedoFluidicSoundsRight\"] = \"\\uE68E\";\n    // U+E69C  Isolated sounds (Salzedo)\n    Glyphs[\"harpSalzedoIsolatedSounds\"] = \"\\uE69C\";\n    // U+E688  Metallic sounds (Salzedo)\n    Glyphs[\"harpSalzedoMetallicSounds\"] = \"\\uE688\";\n    // U+E69B  Metallic sounds, one string (Salzedo)\n    Glyphs[\"harpSalzedoMetallicSoundsOneString\"] = \"\\uE69B\";\n    // U+E68C  Muffle totally (Salzedo)\n    Glyphs[\"harpSalzedoMuffleTotally\"] = \"\\uE68C\";\n    // U+E685  Oboic flux (Salzedo)\n    Glyphs[\"harpSalzedoOboicFlux\"] = \"\\uE685\";\n    // U+E68A  Play at upper end of strings (Salzedo)\n    Glyphs[\"harpSalzedoPlayUpperEnd\"] = \"\\uE68A\";\n    // U+E684  Slide with suppleness (Salzedo)\n    Glyphs[\"harpSalzedoSlideWithSuppleness\"] = \"\\uE684\";\n    // U+E69D  Snare drum effect (Salzedo)\n    Glyphs[\"harpSalzedoSnareDrum\"] = \"\\uE69D\";\n    // U+E689  Tam-tam sounds (Salzedo)\n    Glyphs[\"harpSalzedoTamTamSounds\"] = \"\\uE689\";\n    // U+E686  Thunder effect (Salzedo)\n    Glyphs[\"harpSalzedoThunderEffect\"] = \"\\uE686\";\n    // U+E68B  Timpanic sounds (Salzedo)\n    Glyphs[\"harpSalzedoTimpanicSounds\"] = \"\\uE68B\";\n    // U+E687  Whistling sounds (Salzedo)\n    Glyphs[\"harpSalzedoWhistlingSounds\"] = \"\\uE687\";\n    // U+E694  Combining string noise for stem\n    Glyphs[\"harpStringNoiseStem\"] = \"\\uE694\";\n    // U+E690  Tuning key pictogram\n    Glyphs[\"harpTuningKey\"] = \"\\uE690\";\n    // U+E693  Retune strings for glissando\n    Glyphs[\"harpTuningKeyGlissando\"] = \"\\uE693\";\n    // U+E691  Use handle of tuning key pictogram\n    Glyphs[\"harpTuningKeyHandle\"] = \"\\uE691\";\n    // U+E692  Use shank of tuning key pictogram\n    Glyphs[\"harpTuningKeyShank\"] = \"\\uE692\";\n    // U+ED70  Indian drum clef\n    Glyphs[\"indianDrumClef\"] = \"\\uED70\";\n    // U+EDE2  Back-chug\n    Glyphs[\"kahnBackChug\"] = \"\\uEDE2\";\n    // U+EDD8  Back-flap\n    Glyphs[\"kahnBackFlap\"] = \"\\uEDD8\";\n    // U+EDE1  Back-riff\n    Glyphs[\"kahnBackRiff\"] = \"\\uEDE1\";\n    // U+EDDA  Back-rip\n    Glyphs[\"kahnBackRip\"] = \"\\uEDDA\";\n    // U+EDC6  Ball-change\n    Glyphs[\"kahnBallChange\"] = \"\\uEDC6\";\n    // U+EDCD  Ball-dig\n    Glyphs[\"kahnBallDig\"] = \"\\uEDCD\";\n    // U+EDA7  Brush-backward\n    Glyphs[\"kahnBrushBackward\"] = \"\\uEDA7\";\n    // U+EDA6  Brush-forward\n    Glyphs[\"kahnBrushForward\"] = \"\\uEDA6\";\n    // U+EDDD  Chug\n    Glyphs[\"kahnChug\"] = \"\\uEDDD\";\n    // U+EDB8  Clap\n    Glyphs[\"kahnClap\"] = \"\\uEDB8\";\n    // U+EDBA  Double-snap\n    Glyphs[\"kahnDoubleSnap\"] = \"\\uEDBA\";\n    // U+EDEB  Double-wing\n    Glyphs[\"kahnDoubleWing\"] = \"\\uEDEB\";\n    // U+EDB2  Draw-step\n    Glyphs[\"kahnDrawStep\"] = \"\\uEDB2\";\n    // U+EDB3  Draw-tap\n    Glyphs[\"kahnDrawTap\"] = \"\\uEDB3\";\n    // U+EDCF  Flam\n    Glyphs[\"kahnFlam\"] = \"\\uEDCF\";\n    // U+EDD5  Flap\n    Glyphs[\"kahnFlap\"] = \"\\uEDD5\";\n    // U+EDD7  Flap-step\n    Glyphs[\"kahnFlapStep\"] = \"\\uEDD7\";\n    // U+EDA9  Flat\n    Glyphs[\"kahnFlat\"] = \"\\uEDA9\";\n    // U+EDB0  Flea-hop\n    Glyphs[\"kahnFleaHop\"] = \"\\uEDB0\";\n    // U+EDB1  Flea-tap\n    Glyphs[\"kahnFleaTap\"] = \"\\uEDB1\";\n    // U+EDA8  Grace-tap\n    Glyphs[\"kahnGraceTap\"] = \"\\uEDA8\";\n    // U+EDD1  Grace-tap-change\n    Glyphs[\"kahnGraceTapChange\"] = \"\\uEDD1\";\n    // U+EDD0  Grace-tap-hop\n    Glyphs[\"kahnGraceTapHop\"] = \"\\uEDD0\";\n    // U+EDD3  Grace-tap-stamp\n    Glyphs[\"kahnGraceTapStamp\"] = \"\\uEDD3\";\n    // U+EDAA  Heel\n    Glyphs[\"kahnHeel\"] = \"\\uEDAA\";\n    // U+EDC9  Heel-change\n    Glyphs[\"kahnHeelChange\"] = \"\\uEDC9\";\n    // U+EDBB  Heel-click\n    Glyphs[\"kahnHeelClick\"] = \"\\uEDBB\";\n    // U+EDB6  Heel-drop\n    Glyphs[\"kahnHeelDrop\"] = \"\\uEDB6\";\n    // U+EDC4  Heel-step\n    Glyphs[\"kahnHeelStep\"] = \"\\uEDC4\";\n    // U+EDCB  Heel-tap\n    Glyphs[\"kahnHeelTap\"] = \"\\uEDCB\";\n    // U+EDA2  Hop\n    Glyphs[\"kahnHop\"] = \"\\uEDA2\";\n    // U+EDA5  Jump-apart\n    Glyphs[\"kahnJumpApart\"] = \"\\uEDA5\";\n    // U+EDA4  Jump-together\n    Glyphs[\"kahnJumpTogether\"] = \"\\uEDA4\";\n    // U+EDAD  Knee-inward\n    Glyphs[\"kahnKneeInward\"] = \"\\uEDAD\";\n    // U+EDAC  Knee-outward\n    Glyphs[\"kahnKneeOutward\"] = \"\\uEDAC\";\n    // U+EDA3  Leap\n    Glyphs[\"kahnLeap\"] = \"\\uEDA3\";\n    // U+EDD2  Leap-flat-foot\n    Glyphs[\"kahnLeapFlatFoot\"] = \"\\uEDD2\";\n    // U+EDD4  Leap-heel-click\n    Glyphs[\"kahnLeapHeelClick\"] = \"\\uEDD4\";\n    // U+EDBF  Left-catch\n    Glyphs[\"kahnLeftCatch\"] = \"\\uEDBF\";\n    // U+EDBD  Left-cross\n    Glyphs[\"kahnLeftCross\"] = \"\\uEDBD\";\n    // U+EDEE  Left-foot\n    Glyphs[\"kahnLeftFoot\"] = \"\\uEDEE\";\n    // U+EDC1  Left-toe-strike\n    Glyphs[\"kahnLeftToeStrike\"] = \"\\uEDC1\";\n    // U+EDF0  Left-turn\n    Glyphs[\"kahnLeftTurn\"] = \"\\uEDF0\";\n    // U+EDEC  Over-the-top\n    Glyphs[\"kahnOverTheTop\"] = \"\\uEDEC\";\n    // U+EDED  Over-the-top-tap\n    Glyphs[\"kahnOverTheTopTap\"] = \"\\uEDED\";\n    // U+EDE3  Pull\n    Glyphs[\"kahnPull\"] = \"\\uEDE3\";\n    // U+EDDE  Push\n    Glyphs[\"kahnPush\"] = \"\\uEDDE\";\n    // U+EDE0  Riff\n    Glyphs[\"kahnRiff\"] = \"\\uEDE0\";\n    // U+EDE7  Riffle\n    Glyphs[\"kahnRiffle\"] = \"\\uEDE7\";\n    // U+EDC0  Right-catch\n    Glyphs[\"kahnRightCatch\"] = \"\\uEDC0\";\n    // U+EDBE  Right-cross\n    Glyphs[\"kahnRightCross\"] = \"\\uEDBE\";\n    // U+EDEF  Right-foot\n    Glyphs[\"kahnRightFoot\"] = \"\\uEDEF\";\n    // U+EDC2  Right-toe-strike\n    Glyphs[\"kahnRightToeStrike\"] = \"\\uEDC2\";\n    // U+EDF1  Right-turn\n    Glyphs[\"kahnRightTurn\"] = \"\\uEDF1\";\n    // U+EDD6  Rip\n    Glyphs[\"kahnRip\"] = \"\\uEDD6\";\n    // U+EDE8  Ripple\n    Glyphs[\"kahnRipple\"] = \"\\uEDE8\";\n    // U+EDAE  Scrape\n    Glyphs[\"kahnScrape\"] = \"\\uEDAE\";\n    // U+EDDC  Scuff\n    Glyphs[\"kahnScuff\"] = \"\\uEDDC\";\n    // U+EDE6  Scuffle\n    Glyphs[\"kahnScuffle\"] = \"\\uEDE6\";\n    // U+EDE5  Shuffle\n    Glyphs[\"kahnShuffle\"] = \"\\uEDE5\";\n    // U+EDCE  Slam\n    Glyphs[\"kahnSlam\"] = \"\\uEDCE\";\n    // U+EDD9  Slap\n    Glyphs[\"kahnSlap\"] = \"\\uEDD9\";\n    // U+EDB4  Slide-step\n    Glyphs[\"kahnSlideStep\"] = \"\\uEDB4\";\n    // U+EDB5  Slide-tap\n    Glyphs[\"kahnSlideTap\"] = \"\\uEDB5\";\n    // U+EDB9  Snap\n    Glyphs[\"kahnSnap\"] = \"\\uEDB9\";\n    // U+EDC3  Stamp\n    Glyphs[\"kahnStamp\"] = \"\\uEDC3\";\n    // U+EDC8  Stamp-stamp\n    Glyphs[\"kahnStampStamp\"] = \"\\uEDC8\";\n    // U+EDA0  Step\n    Glyphs[\"kahnStep\"] = \"\\uEDA0\";\n    // U+EDC7  Step-stamp\n    Glyphs[\"kahnStepStamp\"] = \"\\uEDC7\";\n    // U+EDCA  Stomp\n    Glyphs[\"kahnStomp\"] = \"\\uEDCA\";\n    // U+EDDB  Stomp-brush\n    Glyphs[\"kahnStompBrush\"] = \"\\uEDDB\";\n    // U+EDA1  Tap\n    Glyphs[\"kahnTap\"] = \"\\uEDA1\";\n    // U+EDAB  Toe\n    Glyphs[\"kahnToe\"] = \"\\uEDAB\";\n    // U+EDBC  Toe-click\n    Glyphs[\"kahnToeClick\"] = \"\\uEDBC\";\n    // U+EDB7  Toe-drop\n    Glyphs[\"kahnToeDrop\"] = \"\\uEDB7\";\n    // U+EDC5  Toe-step\n    Glyphs[\"kahnToeStep\"] = \"\\uEDC5\";\n    // U+EDCC  Toe-tap\n    Glyphs[\"kahnToeTap\"] = \"\\uEDCC\";\n    // U+EDAF  Trench\n    Glyphs[\"kahnTrench\"] = \"\\uEDAF\";\n    // U+EDE9  Wing\n    Glyphs[\"kahnWing\"] = \"\\uEDE9\";\n    // U+EDEA  Wing-change\n    Glyphs[\"kahnWingChange\"] = \"\\uEDEA\";\n    // U+EDE4  Zank\n    Glyphs[\"kahnZank\"] = \"\\uEDE4\";\n    // U+EDDF  Zink\n    Glyphs[\"kahnZink\"] = \"\\uEDDF\";\n    // U+E668  Clavichord bebung, 2 finger movements (above)\n    Glyphs[\"keyboardBebung2DotsAbove\"] = \"\\uE668\";\n    // U+E669  Clavichord bebung, 2 finger movements (below)\n    Glyphs[\"keyboardBebung2DotsBelow\"] = \"\\uE669\";\n    // U+E66A  Clavichord bebung, 3 finger movements (above)\n    Glyphs[\"keyboardBebung3DotsAbove\"] = \"\\uE66A\";\n    // U+E66B  Clavichord bebung, 3 finger movements (below)\n    Glyphs[\"keyboardBebung3DotsBelow\"] = \"\\uE66B\";\n    // U+E66C  Clavichord bebung, 4 finger movements (above)\n    Glyphs[\"keyboardBebung4DotsAbove\"] = \"\\uE66C\";\n    // U+E66D  Clavichord bebung, 4 finger movements (below)\n    Glyphs[\"keyboardBebung4DotsBelow\"] = \"\\uE66D\";\n    // U+E65E  Left pedal pictogram\n    Glyphs[\"keyboardLeftPedalPictogram\"] = \"\\uE65E\";\n    // U+E65F  Middle pedal pictogram\n    Glyphs[\"keyboardMiddlePedalPictogram\"] = \"\\uE65F\";\n    // U+E653  Pedal d\n    Glyphs[\"keyboardPedalD\"] = \"\\uE653\";\n    // U+E654  Pedal dot\n    Glyphs[\"keyboardPedalDot\"] = \"\\uE654\";\n    // U+E652  Pedal e\n    Glyphs[\"keyboardPedalE\"] = \"\\uE652\";\n    // U+E656  Half-pedal mark\n    Glyphs[\"keyboardPedalHalf\"] = \"\\uE656\";\n    // U+E65B  Half pedal mark 1\n    Glyphs[\"keyboardPedalHalf2\"] = \"\\uE65B\";\n    // U+E65C  Half pedal mark 2\n    Glyphs[\"keyboardPedalHalf3\"] = \"\\uE65C\";\n    // U+E661  Pedal heel 1\n    Glyphs[\"keyboardPedalHeel1\"] = \"\\uE661\";\n    // U+E662  Pedal heel 2\n    Glyphs[\"keyboardPedalHeel2\"] = \"\\uE662\";\n    // U+E663  Pedal heel 3 (Davis)\n    Glyphs[\"keyboardPedalHeel3\"] = \"\\uE663\";\n    // U+E674  Pedal heel to toe\n    Glyphs[\"keyboardPedalHeelToToe\"] = \"\\uE674\";\n    // U+E666  Pedal heel or toe\n    Glyphs[\"keyboardPedalHeelToe\"] = \"\\uE666\";\n    // U+E673  Pedal hook end\n    Glyphs[\"keyboardPedalHookEnd\"] = \"\\uE673\";\n    // U+E672  Pedal hook start\n    Glyphs[\"keyboardPedalHookStart\"] = \"\\uE672\";\n    // U+E658  Pedal hyphen\n    Glyphs[\"keyboardPedalHyphen\"] = \"\\uE658\";\n    // U+E651  Pedal P\n    Glyphs[\"keyboardPedalP\"] = \"\\uE651\";\n    // U+E676  Left parenthesis for pedal marking\n    Glyphs[\"keyboardPedalParensLeft\"] = \"\\uE676\";\n    // U+E677  Right parenthesis for pedal marking\n    Glyphs[\"keyboardPedalParensRight\"] = \"\\uE677\";\n    // U+E650  Pedal mark\n    Glyphs[\"keyboardPedalPed\"] = \"\\uE650\";\n    // U+E65A  Pedal S\n    Glyphs[\"keyboardPedalS\"] = \"\\uE65A\";\n    // U+E659  Sostenuto pedal mark\n    Glyphs[\"keyboardPedalSost\"] = \"\\uE659\";\n    // U+E664  Pedal toe 1\n    Glyphs[\"keyboardPedalToe1\"] = \"\\uE664\";\n    // U+E665  Pedal toe 2\n    Glyphs[\"keyboardPedalToe2\"] = \"\\uE665\";\n    // U+E675  Pedal toe to heel\n    Glyphs[\"keyboardPedalToeToHeel\"] = \"\\uE675\";\n    // U+E655  Pedal up mark\n    Glyphs[\"keyboardPedalUp\"] = \"\\uE655\";\n    // U+E657  Pedal up notch\n    Glyphs[\"keyboardPedalUpNotch\"] = \"\\uE657\";\n    // U+E65D  Pedal up special\n    Glyphs[\"keyboardPedalUpSpecial\"] = \"\\uE65D\";\n    // U+E670  Play with left hand\n    Glyphs[\"keyboardPlayWithLH\"] = \"\\uE670\";\n    // U+E671  Play with left hand (end)\n    Glyphs[\"keyboardPlayWithLHEnd\"] = \"\\uE671\";\n    // U+E66E  Play with right hand\n    Glyphs[\"keyboardPlayWithRH\"] = \"\\uE66E\";\n    // U+E66F  Play with right hand (end)\n    Glyphs[\"keyboardPlayWithRHEnd\"] = \"\\uE66F\";\n    // U+E667  Pluck strings inside piano (Maderna)\n    Glyphs[\"keyboardPluckInside\"] = \"\\uE667\";\n    // U+E660  Right pedal pictogram\n    Glyphs[\"keyboardRightPedalPictogram\"] = \"\\uE660\";\n    // U+EC3E  Kievan flat\n    Glyphs[\"kievanAccidentalFlat\"] = \"\\uEC3E\";\n    // U+EC3D  Kievan sharp\n    Glyphs[\"kievanAccidentalSharp\"] = \"\\uEC3D\";\n    // U+EC3C  Kievan augmentation dot\n    Glyphs[\"kievanAugmentationDot\"] = \"\\uEC3C\";\n    // U+EC30  Kievan C clef (tse-fa-ut)\n    Glyphs[\"kievanCClef\"] = \"\\uEC30\";\n    // U+EC31  Kievan ending symbol\n    Glyphs[\"kievanEndingSymbol\"] = \"\\uEC31\";\n    // U+EC3A  Kievan eighth note, stem down\n    Glyphs[\"kievanNote8thStemDown\"] = \"\\uEC3A\";\n    // U+EC39  Kievan eighth note, stem up\n    Glyphs[\"kievanNote8thStemUp\"] = \"\\uEC39\";\n    // U+EC3B  Kievan beam\n    Glyphs[\"kievanNoteBeam\"] = \"\\uEC3B\";\n    // U+EC35  Kievan half note (on staff line)\n    Glyphs[\"kievanNoteHalfStaffLine\"] = \"\\uEC35\";\n    // U+EC36  Kievan half note (in staff space)\n    Glyphs[\"kievanNoteHalfStaffSpace\"] = \"\\uEC36\";\n    // U+EC38  Kievan quarter note, stem down\n    Glyphs[\"kievanNoteQuarterStemDown\"] = \"\\uEC38\";\n    // U+EC37  Kievan quarter note, stem up\n    Glyphs[\"kievanNoteQuarterStemUp\"] = \"\\uEC37\";\n    // U+EC32  Kievan reciting note\n    Glyphs[\"kievanNoteReciting\"] = \"\\uEC32\";\n    // U+EC33  Kievan whole note\n    Glyphs[\"kievanNoteWhole\"] = \"\\uEC33\";\n    // U+EC34  Kievan final whole note\n    Glyphs[\"kievanNoteWholeFinal\"] = \"\\uEC34\";\n    // U+EC40  Do hand sign\n    Glyphs[\"kodalyHandDo\"] = \"\\uEC40\";\n    // U+EC43  Fa hand sign\n    Glyphs[\"kodalyHandFa\"] = \"\\uEC43\";\n    // U+EC45  La hand sign\n    Glyphs[\"kodalyHandLa\"] = \"\\uEC45\";\n    // U+EC42  Mi hand sign\n    Glyphs[\"kodalyHandMi\"] = \"\\uEC42\";\n    // U+EC41  Re hand sign\n    Glyphs[\"kodalyHandRe\"] = \"\\uEC41\";\n    // U+EC44  So hand sign\n    Glyphs[\"kodalyHandSo\"] = \"\\uEC44\";\n    // U+EC46  Ti hand sign\n    Glyphs[\"kodalyHandTi\"] = \"\\uEC46\";\n    // U+E04C  Left repeat sign within bar\n    Glyphs[\"leftRepeatSmall\"] = \"\\uE04C\";\n    // U+E022  Leger line\n    Glyphs[\"legerLine\"] = \"\\uE022\";\n    // U+E024  Leger line (narrow)\n    Glyphs[\"legerLineNarrow\"] = \"\\uE024\";\n    // U+E023  Leger line (wide)\n    Glyphs[\"legerLineWide\"] = \"\\uE023\";\n    // U+EBA4  Lute tablature end repeat barline\n    Glyphs[\"luteBarlineEndRepeat\"] = \"\\uEBA4\";\n    // U+EBA5  Lute tablature final barline\n    Glyphs[\"luteBarlineFinal\"] = \"\\uEBA5\";\n    // U+EBA3  Lute tablature start repeat barline\n    Glyphs[\"luteBarlineStartRepeat\"] = \"\\uEBA3\";\n    // U+EBAB  16th note (semiquaver) duration sign\n    Glyphs[\"luteDuration16th\"] = \"\\uEBAB\";\n    // U+EBAC  32nd note (demisemiquaver) duration sign\n    Glyphs[\"luteDuration32nd\"] = \"\\uEBAC\";\n    // U+EBAA  Eighth note (quaver) duration sign\n    Glyphs[\"luteDuration8th\"] = \"\\uEBAA\";\n    // U+EBA6  Double whole note (breve) duration sign\n    Glyphs[\"luteDurationDoubleWhole\"] = \"\\uEBA6\";\n    // U+EBA8  Half note (minim) duration sign\n    Glyphs[\"luteDurationHalf\"] = \"\\uEBA8\";\n    // U+EBA9  Quarter note (crotchet) duration sign\n    Glyphs[\"luteDurationQuarter\"] = \"\\uEBA9\";\n    // U+EBA7  Whole note (semibreve) duration sign\n    Glyphs[\"luteDurationWhole\"] = \"\\uEBA7\";\n    // U+EBAE  Right-hand fingering, first finger\n    Glyphs[\"luteFingeringRHFirst\"] = \"\\uEBAE\";\n    // U+EBAF  Right-hand fingering, second finger\n    Glyphs[\"luteFingeringRHSecond\"] = \"\\uEBAF\";\n    // U+EBB0  Right-hand fingering, third finger\n    Glyphs[\"luteFingeringRHThird\"] = \"\\uEBB0\";\n    // U+EBAD  Right-hand fingering, thumb\n    Glyphs[\"luteFingeringRHThumb\"] = \"\\uEBAD\";\n    // U+EBD0  10th course (diapason)\n    Glyphs[\"luteFrench10thCourse\"] = \"\\uEBD0\";\n    // U+EBCD  Seventh course (diapason)\n    Glyphs[\"luteFrench7thCourse\"] = \"\\uEBCD\";\n    // U+EBCE  Eighth course (diapason)\n    Glyphs[\"luteFrench8thCourse\"] = \"\\uEBCE\";\n    // U+EBCF  Ninth course (diapason)\n    Glyphs[\"luteFrench9thCourse\"] = \"\\uEBCF\";\n    // U+EBD5  Appoggiatura from above\n    Glyphs[\"luteFrenchAppoggiaturaAbove\"] = \"\\uEBD5\";\n    // U+EBD4  Appoggiatura from below\n    Glyphs[\"luteFrenchAppoggiaturaBelow\"] = \"\\uEBD4\";\n    // U+EBC0  Open string (a)\n    Glyphs[\"luteFrenchFretA\"] = \"\\uEBC0\";\n    // U+EBC1  First fret (b)\n    Glyphs[\"luteFrenchFretB\"] = \"\\uEBC1\";\n    // U+EBC2  Second fret (c)\n    Glyphs[\"luteFrenchFretC\"] = \"\\uEBC2\";\n    // U+EBC3  Third fret (d)\n    Glyphs[\"luteFrenchFretD\"] = \"\\uEBC3\";\n    // U+EBC4  Fourth fret (e)\n    Glyphs[\"luteFrenchFretE\"] = \"\\uEBC4\";\n    // U+EBC5  Fifth fret (f)\n    Glyphs[\"luteFrenchFretF\"] = \"\\uEBC5\";\n    // U+EBC6  Sixth fret (g)\n    Glyphs[\"luteFrenchFretG\"] = \"\\uEBC6\";\n    // U+EBC7  Seventh fret (h)\n    Glyphs[\"luteFrenchFretH\"] = \"\\uEBC7\";\n    // U+EBC8  Eighth fret (i)\n    Glyphs[\"luteFrenchFretI\"] = \"\\uEBC8\";\n    // U+EBC9  Ninth fret (k)\n    Glyphs[\"luteFrenchFretK\"] = \"\\uEBC9\";\n    // U+EBCA  10th fret (l)\n    Glyphs[\"luteFrenchFretL\"] = \"\\uEBCA\";\n    // U+EBCB  11th fret (m)\n    Glyphs[\"luteFrenchFretM\"] = \"\\uEBCB\";\n    // U+EBCC  12th fret (n)\n    Glyphs[\"luteFrenchFretN\"] = \"\\uEBCC\";\n    // U+EBD3  Inverted mordent\n    Glyphs[\"luteFrenchMordentInverted\"] = \"\\uEBD3\";\n    // U+EBD2  Mordent with lower auxiliary\n    Glyphs[\"luteFrenchMordentLower\"] = \"\\uEBD2\";\n    // U+EBD1  Mordent with upper auxiliary\n    Glyphs[\"luteFrenchMordentUpper\"] = \"\\uEBD1\";\n    // U+EC00  5th course, 1st fret (a)\n    Glyphs[\"luteGermanALower\"] = \"\\uEC00\";\n    // U+EC17  6th course, 1st fret (A)\n    Glyphs[\"luteGermanAUpper\"] = \"\\uEC17\";\n    // U+EC01  4th course, 1st fret (b)\n    Glyphs[\"luteGermanBLower\"] = \"\\uEC01\";\n    // U+EC18  6th course, 2nd fret (B)\n    Glyphs[\"luteGermanBUpper\"] = \"\\uEC18\";\n    // U+EC02  3rd course, 1st fret (c)\n    Glyphs[\"luteGermanCLower\"] = \"\\uEC02\";\n    // U+EC19  6th course, 3rd fret (C)\n    Glyphs[\"luteGermanCUpper\"] = \"\\uEC19\";\n    // U+EC03  2nd course, 1st fret (d)\n    Glyphs[\"luteGermanDLower\"] = \"\\uEC03\";\n    // U+EC1A  6th course, 4th fret (D)\n    Glyphs[\"luteGermanDUpper\"] = \"\\uEC1A\";\n    // U+EC04  1st course, 1st fret (e)\n    Glyphs[\"luteGermanELower\"] = \"\\uEC04\";\n    // U+EC1B  6th course, 5th fret (E)\n    Glyphs[\"luteGermanEUpper\"] = \"\\uEC1B\";\n    // U+EC05  5th course, 2nd fret (f)\n    Glyphs[\"luteGermanFLower\"] = \"\\uEC05\";\n    // U+EC1C  6th course, 6th fret (F)\n    Glyphs[\"luteGermanFUpper\"] = \"\\uEC1C\";\n    // U+EC06  4th course, 2nd fret (g)\n    Glyphs[\"luteGermanGLower\"] = \"\\uEC06\";\n    // U+EC1D  6th course, 7th fret (G)\n    Glyphs[\"luteGermanGUpper\"] = \"\\uEC1D\";\n    // U+EC07  3rd course, 2nd fret (h)\n    Glyphs[\"luteGermanHLower\"] = \"\\uEC07\";\n    // U+EC1E  6th course, 8th fret (H)\n    Glyphs[\"luteGermanHUpper\"] = \"\\uEC1E\";\n    // U+EC08  2nd course, 2nd fret (i)\n    Glyphs[\"luteGermanILower\"] = \"\\uEC08\";\n    // U+EC1F  6th course, 9th fret (I)\n    Glyphs[\"luteGermanIUpper\"] = \"\\uEC1F\";\n    // U+EC09  1st course, 2nd fret (k)\n    Glyphs[\"luteGermanKLower\"] = \"\\uEC09\";\n    // U+EC20  6th course, 10th fret (K)\n    Glyphs[\"luteGermanKUpper\"] = \"\\uEC20\";\n    // U+EC0A  5th course, 3rd fret (l)\n    Glyphs[\"luteGermanLLower\"] = \"\\uEC0A\";\n    // U+EC21  6th course, 11th fret (L)\n    Glyphs[\"luteGermanLUpper\"] = \"\\uEC21\";\n    // U+EC0B  4th course, 3rd fret (m)\n    Glyphs[\"luteGermanMLower\"] = \"\\uEC0B\";\n    // U+EC22  6th course, 12th fret (M)\n    Glyphs[\"luteGermanMUpper\"] = \"\\uEC22\";\n    // U+EC0C  3rd course, 3rd fret (n)\n    Glyphs[\"luteGermanNLower\"] = \"\\uEC0C\";\n    // U+EC23  6th course, 13th fret (N)\n    Glyphs[\"luteGermanNUpper\"] = \"\\uEC23\";\n    // U+EC0D  2nd course, 3rd fret (o)\n    Glyphs[\"luteGermanOLower\"] = \"\\uEC0D\";\n    // U+EC0E  1st course, 3rd fret (p)\n    Glyphs[\"luteGermanPLower\"] = \"\\uEC0E\";\n    // U+EC0F  5th course, 4th fret (q)\n    Glyphs[\"luteGermanQLower\"] = \"\\uEC0F\";\n    // U+EC10  4th course, 4th fret (r)\n    Glyphs[\"luteGermanRLower\"] = \"\\uEC10\";\n    // U+EC11  3rd course, 4th fret (s)\n    Glyphs[\"luteGermanSLower\"] = \"\\uEC11\";\n    // U+EC12  2nd course, 4th fret (t)\n    Glyphs[\"luteGermanTLower\"] = \"\\uEC12\";\n    // U+EC13  1st course, 4th fret (v)\n    Glyphs[\"luteGermanVLower\"] = \"\\uEC13\";\n    // U+EC14  5th course, 5th fret (x)\n    Glyphs[\"luteGermanXLower\"] = \"\\uEC14\";\n    // U+EC15  4th course, 5th fret (y)\n    Glyphs[\"luteGermanYLower\"] = \"\\uEC15\";\n    // U+EC16  3rd course, 5th fret (z)\n    Glyphs[\"luteGermanZLower\"] = \"\\uEC16\";\n    // U+EBF1  C sol fa ut clef\n    Glyphs[\"luteItalianClefCSolFaUt\"] = \"\\uEBF1\";\n    // U+EBF0  F fa ut clef\n    Glyphs[\"luteItalianClefFFaUt\"] = \"\\uEBF0\";\n    // U+EBE0  Open string (0)\n    Glyphs[\"luteItalianFret0\"] = \"\\uEBE0\";\n    // U+EBE1  First fret (1)\n    Glyphs[\"luteItalianFret1\"] = \"\\uEBE1\";\n    // U+EBE2  Second fret (2)\n    Glyphs[\"luteItalianFret2\"] = \"\\uEBE2\";\n    // U+EBE3  Third fret (3)\n    Glyphs[\"luteItalianFret3\"] = \"\\uEBE3\";\n    // U+EBE4  Fourth fret (4)\n    Glyphs[\"luteItalianFret4\"] = \"\\uEBE4\";\n    // U+EBE5  Fifth fret (5)\n    Glyphs[\"luteItalianFret5\"] = \"\\uEBE5\";\n    // U+EBE6  Sixth fret (6)\n    Glyphs[\"luteItalianFret6\"] = \"\\uEBE6\";\n    // U+EBE7  Seventh fret (7)\n    Glyphs[\"luteItalianFret7\"] = \"\\uEBE7\";\n    // U+EBE8  Eighth fret (8)\n    Glyphs[\"luteItalianFret8\"] = \"\\uEBE8\";\n    // U+EBE9  Ninth fret (9)\n    Glyphs[\"luteItalianFret9\"] = \"\\uEBE9\";\n    // U+EBF4  Hold finger in place\n    Glyphs[\"luteItalianHoldFinger\"] = \"\\uEBF4\";\n    // U+EBF3  Hold note\n    Glyphs[\"luteItalianHoldNote\"] = \"\\uEBF3\";\n    // U+EBF5  Release finger\n    Glyphs[\"luteItalianReleaseFinger\"] = \"\\uEBF5\";\n    // U+EBEA  Fast tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoFast\"] = \"\\uEBEA\";\n    // U+EBEC  Neither fast nor slow tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoNeitherFastNorSlow\"] = \"\\uEBEC\";\n    // U+EBED  Slow tempo indication (de Mudarra)\n    Glyphs[\"luteItalianTempoSlow\"] = \"\\uEBED\";\n    // U+EBEB  Somewhat fast tempo indication (de Narvaez)\n    Glyphs[\"luteItalianTempoSomewhatFast\"] = \"\\uEBEB\";\n    // U+EBEE  Very slow indication (de Narvaez)\n    Glyphs[\"luteItalianTempoVerySlow\"] = \"\\uEBEE\";\n    // U+EBEF  Triple time indication\n    Glyphs[\"luteItalianTimeTriple\"] = \"\\uEBEF\";\n    // U+EBF2  Single-finger tremolo or mordent\n    Glyphs[\"luteItalianTremolo\"] = \"\\uEBF2\";\n    // U+EBF6  Vibrato (verre cassé)\n    Glyphs[\"luteItalianVibrato\"] = \"\\uEBF6\";\n    // U+EBA0  Lute tablature staff, 6 courses\n    Glyphs[\"luteStaff6Lines\"] = \"\\uEBA0\";\n    // U+EBA2  Lute tablature staff, 6 courses (narrow)\n    Glyphs[\"luteStaff6LinesNarrow\"] = \"\\uEBA2\";\n    // U+EBA1  Lute tablature staff, 6 courses (wide)\n    Glyphs[\"luteStaff6LinesWide\"] = \"\\uEBA1\";\n    // U+E551  Elision\n    Glyphs[\"lyricsElision\"] = \"\\uE551\";\n    // U+E550  Narrow elision\n    Glyphs[\"lyricsElisionNarrow\"] = \"\\uE550\";\n    // U+E552  Wide elision\n    Glyphs[\"lyricsElisionWide\"] = \"\\uE552\";\n    // U+E553  Baseline hyphen\n    Glyphs[\"lyricsHyphenBaseline\"] = \"\\uE553\";\n    // U+E554  Non-breaking baseline hyphen\n    Glyphs[\"lyricsHyphenBaselineNonBreaking\"] = \"\\uE554\";\n    // U+E555  Text repeats\n    Glyphs[\"lyricsTextRepeat\"] = \"\\uE555\";\n    // U+E9E1  Flat, hard b (mi)\n    Glyphs[\"medRenFlatHardB\"] = \"\\uE9E1\";\n    // U+E9E0  Flat, soft b (fa)\n    Glyphs[\"medRenFlatSoftB\"] = \"\\uE9E0\";\n    // U+E9E4  Flat with dot\n    Glyphs[\"medRenFlatWithDot\"] = \"\\uE9E4\";\n    // U+EA24  G clef (Corpus Monodicum)\n    Glyphs[\"medRenGClefCMN\"] = \"\\uEA24\";\n    // U+EA22  Liquescence\n    Glyphs[\"medRenLiquescenceCMN\"] = \"\\uEA22\";\n    // U+EA26  Liquescent ascending (Corpus Monodicum)\n    Glyphs[\"medRenLiquescentAscCMN\"] = \"\\uEA26\";\n    // U+EA27  Liquescent descending (Corpus Monodicum)\n    Glyphs[\"medRenLiquescentDescCMN\"] = \"\\uEA27\";\n    // U+E9E2  Natural\n    Glyphs[\"medRenNatural\"] = \"\\uE9E2\";\n    // U+E9E5  Natural with interrupted cross\n    Glyphs[\"medRenNaturalWithCross\"] = \"\\uE9E5\";\n    // U+EA2A  Oriscus (Corpus Monodicum)\n    Glyphs[\"medRenOriscusCMN\"] = \"\\uEA2A\";\n    // U+EA23  Plica\n    Glyphs[\"medRenPlicaCMN\"] = \"\\uEA23\";\n    // U+EA25  Punctum (Corpus Monodicum)\n    Glyphs[\"medRenPunctumCMN\"] = \"\\uEA25\";\n    // U+EA28  Quilisma (Corpus Monodicum)\n    Glyphs[\"medRenQuilismaCMN\"] = \"\\uEA28\";\n    // U+E9E3  Croix\n    Glyphs[\"medRenSharpCroix\"] = \"\\uE9E3\";\n    // U+EA29  Strophicus (Corpus Monodicum)\n    Glyphs[\"medRenStrophicusCMN\"] = \"\\uEA29\";\n    // U+EA10  Alteration sign\n    Glyphs[\"mensuralAlterationSign\"] = \"\\uEA10\";\n    // U+E952  Black mensural brevis\n    Glyphs[\"mensuralBlackBrevis\"] = \"\\uE952\";\n    // U+E956  Black mensural void brevis\n    Glyphs[\"mensuralBlackBrevisVoid\"] = \"\\uE956\";\n    // U+E95A  Black mensural dragma\n    Glyphs[\"mensuralBlackDragma\"] = \"\\uE95A\";\n    // U+E951  Black mensural longa\n    Glyphs[\"mensuralBlackLonga\"] = \"\\uE951\";\n    // U+E950  Black mensural maxima\n    Glyphs[\"mensuralBlackMaxima\"] = \"\\uE950\";\n    // U+E954  Black mensural minima\n    Glyphs[\"mensuralBlackMinima\"] = \"\\uE954\";\n    // U+E958  Black mensural void minima\n    Glyphs[\"mensuralBlackMinimaVoid\"] = \"\\uE958\";\n    // U+E953  Black mensural semibrevis\n    Glyphs[\"mensuralBlackSemibrevis\"] = \"\\uE953\";\n    // U+E959  Black mensural semibrevis caudata\n    Glyphs[\"mensuralBlackSemibrevisCaudata\"] = \"\\uE959\";\n    // U+E95B  Black mensural oblique semibrevis\n    Glyphs[\"mensuralBlackSemibrevisOblique\"] = \"\\uE95B\";\n    // U+E957  Black mensural void semibrevis\n    Glyphs[\"mensuralBlackSemibrevisVoid\"] = \"\\uE957\";\n    // U+E955  Black mensural semiminima\n    Glyphs[\"mensuralBlackSemiminima\"] = \"\\uE955\";\n    // U+E905  Mensural C clef\n    Glyphs[\"mensuralCclef\"] = \"\\uE905\";\n    // U+E90A  Petrucci C clef, high position\n    Glyphs[\"mensuralCclefPetrucciPosHigh\"] = \"\\uE90A\";\n    // U+E90B  Petrucci C clef, highest position\n    Glyphs[\"mensuralCclefPetrucciPosHighest\"] = \"\\uE90B\";\n    // U+E908  Petrucci C clef, low position\n    Glyphs[\"mensuralCclefPetrucciPosLow\"] = \"\\uE908\";\n    // U+E907  Petrucci C clef, lowest position\n    Glyphs[\"mensuralCclefPetrucciPosLowest\"] = \"\\uE907\";\n    // U+E909  Petrucci C clef, middle position\n    Glyphs[\"mensuralCclefPetrucciPosMiddle\"] = \"\\uE909\";\n    // U+EA0F  Coloration end, round\n    Glyphs[\"mensuralColorationEndRound\"] = \"\\uEA0F\";\n    // U+EA0D  Coloration end, square\n    Glyphs[\"mensuralColorationEndSquare\"] = \"\\uEA0D\";\n    // U+EA0E  Coloration start, round\n    Glyphs[\"mensuralColorationStartRound\"] = \"\\uEA0E\";\n    // U+EA0C  Coloration start, square\n    Glyphs[\"mensuralColorationStartSquare\"] = \"\\uEA0C\";\n    // U+E940  Combining stem diagonal\n    Glyphs[\"mensuralCombStemDiagonal\"] = \"\\uE940\";\n    // U+E93F  Combining stem down\n    Glyphs[\"mensuralCombStemDown\"] = \"\\uE93F\";\n    // U+E948  Combining stem with extended flag down\n    Glyphs[\"mensuralCombStemDownFlagExtended\"] = \"\\uE948\";\n    // U+E946  Combining stem with flared flag down\n    Glyphs[\"mensuralCombStemDownFlagFlared\"] = \"\\uE946\";\n    // U+E94C  Combining stem with fusa flag down\n    Glyphs[\"mensuralCombStemDownFlagFusa\"] = \"\\uE94C\";\n    // U+E944  Combining stem with flag left down\n    Glyphs[\"mensuralCombStemDownFlagLeft\"] = \"\\uE944\";\n    // U+E942  Combining stem with flag right down\n    Glyphs[\"mensuralCombStemDownFlagRight\"] = \"\\uE942\";\n    // U+E94A  Combining stem with semiminima flag down\n    Glyphs[\"mensuralCombStemDownFlagSemiminima\"] = \"\\uE94A\";\n    // U+E93E  Combining stem up\n    Glyphs[\"mensuralCombStemUp\"] = \"\\uE93E\";\n    // U+E947  Combining stem with extended flag up\n    Glyphs[\"mensuralCombStemUpFlagExtended\"] = \"\\uE947\";\n    // U+E945  Combining stem with flared flag up\n    Glyphs[\"mensuralCombStemUpFlagFlared\"] = \"\\uE945\";\n    // U+E94B  Combining stem with fusa flag up\n    Glyphs[\"mensuralCombStemUpFlagFusa\"] = \"\\uE94B\";\n    // U+E943  Combining stem with flag left up\n    Glyphs[\"mensuralCombStemUpFlagLeft\"] = \"\\uE943\";\n    // U+E941  Combining stem with flag right up\n    Glyphs[\"mensuralCombStemUpFlagRight\"] = \"\\uE941\";\n    // U+E949  Combining stem with semiminima flag up\n    Glyphs[\"mensuralCombStemUpFlagSemiminima\"] = \"\\uE949\";\n    // U+EA0A  Checkmark custos\n    Glyphs[\"mensuralCustosCheckmark\"] = \"\\uEA0A\";\n    // U+EA03  Mensural custos down\n    Glyphs[\"mensuralCustosDown\"] = \"\\uEA03\";\n    // U+EA0B  Turn-like custos\n    Glyphs[\"mensuralCustosTurn\"] = \"\\uEA0B\";\n    // U+EA02  Mensural custos up\n    Glyphs[\"mensuralCustosUp\"] = \"\\uEA02\";\n    // U+E903  Mensural F clef\n    Glyphs[\"mensuralFclef\"] = \"\\uE903\";\n    // U+E904  Petrucci F clef\n    Glyphs[\"mensuralFclefPetrucci\"] = \"\\uE904\";\n    // U+E900  Mensural G clef\n    Glyphs[\"mensuralGclef\"] = \"\\uE900\";\n    // U+E901  Petrucci G clef\n    Glyphs[\"mensuralGclefPetrucci\"] = \"\\uE901\";\n    // U+E92D  Modus imperfectum, vertical\n    Glyphs[\"mensuralModusImperfectumVert\"] = \"\\uE92D\";\n    // U+E92C  Modus perfectum, vertical\n    Glyphs[\"mensuralModusPerfectumVert\"] = \"\\uE92C\";\n    // U+E934  Longa/brevis notehead, black\n    Glyphs[\"mensuralNoteheadLongaBlack\"] = \"\\uE934\";\n    // U+E936  Longa/brevis notehead, black and void\n    Glyphs[\"mensuralNoteheadLongaBlackVoid\"] = \"\\uE936\";\n    // U+E935  Longa/brevis notehead, void\n    Glyphs[\"mensuralNoteheadLongaVoid\"] = \"\\uE935\";\n    // U+E937  Longa/brevis notehead, white\n    Glyphs[\"mensuralNoteheadLongaWhite\"] = \"\\uE937\";\n    // U+E930  Maxima notehead, black\n    Glyphs[\"mensuralNoteheadMaximaBlack\"] = \"\\uE930\";\n    // U+E932  Maxima notehead, black and void\n    Glyphs[\"mensuralNoteheadMaximaBlackVoid\"] = \"\\uE932\";\n    // U+E931  Maxima notehead, void\n    Glyphs[\"mensuralNoteheadMaximaVoid\"] = \"\\uE931\";\n    // U+E933  Maxima notehead, white\n    Glyphs[\"mensuralNoteheadMaximaWhite\"] = \"\\uE933\";\n    // U+E93C  Minima notehead, white\n    Glyphs[\"mensuralNoteheadMinimaWhite\"] = \"\\uE93C\";\n    // U+E938  Semibrevis notehead, black\n    Glyphs[\"mensuralNoteheadSemibrevisBlack\"] = \"\\uE938\";\n    // U+E93A  Semibrevis notehead, black and void\n    Glyphs[\"mensuralNoteheadSemibrevisBlackVoid\"] = \"\\uE93A\";\n    // U+E93B  Semibrevis notehead, black and void (turned)\n    Glyphs[\"mensuralNoteheadSemibrevisBlackVoidTurned\"] = \"\\uE93B\";\n    // U+E939  Semibrevis notehead, void\n    Glyphs[\"mensuralNoteheadSemibrevisVoid\"] = \"\\uE939\";\n    // U+E93D  Semiminima/fusa notehead, white\n    Glyphs[\"mensuralNoteheadSemiminimaWhite\"] = \"\\uE93D\";\n    // U+E970  Oblique form, ascending 2nd, black\n    Glyphs[\"mensuralObliqueAsc2ndBlack\"] = \"\\uE970\";\n    // U+E972  Oblique form, ascending 2nd, black and void\n    Glyphs[\"mensuralObliqueAsc2ndBlackVoid\"] = \"\\uE972\";\n    // U+E971  Oblique form, ascending 2nd, void\n    Glyphs[\"mensuralObliqueAsc2ndVoid\"] = \"\\uE971\";\n    // U+E973  Oblique form, ascending 2nd, white\n    Glyphs[\"mensuralObliqueAsc2ndWhite\"] = \"\\uE973\";\n    // U+E974  Oblique form, ascending 3rd, black\n    Glyphs[\"mensuralObliqueAsc3rdBlack\"] = \"\\uE974\";\n    // U+E976  Oblique form, ascending 3rd, black and void\n    Glyphs[\"mensuralObliqueAsc3rdBlackVoid\"] = \"\\uE976\";\n    // U+E975  Oblique form, ascending 3rd, void\n    Glyphs[\"mensuralObliqueAsc3rdVoid\"] = \"\\uE975\";\n    // U+E977  Oblique form, ascending 3rd, white\n    Glyphs[\"mensuralObliqueAsc3rdWhite\"] = \"\\uE977\";\n    // U+E978  Oblique form, ascending 4th, black\n    Glyphs[\"mensuralObliqueAsc4thBlack\"] = \"\\uE978\";\n    // U+E97A  Oblique form, ascending 4th, black and void\n    Glyphs[\"mensuralObliqueAsc4thBlackVoid\"] = \"\\uE97A\";\n    // U+E979  Oblique form, ascending 4th, void\n    Glyphs[\"mensuralObliqueAsc4thVoid\"] = \"\\uE979\";\n    // U+E97B  Oblique form, ascending 4th, white\n    Glyphs[\"mensuralObliqueAsc4thWhite\"] = \"\\uE97B\";\n    // U+E97C  Oblique form, ascending 5th, black\n    Glyphs[\"mensuralObliqueAsc5thBlack\"] = \"\\uE97C\";\n    // U+E97E  Oblique form, ascending 5th, black and void\n    Glyphs[\"mensuralObliqueAsc5thBlackVoid\"] = \"\\uE97E\";\n    // U+E97D  Oblique form, ascending 5th, void\n    Glyphs[\"mensuralObliqueAsc5thVoid\"] = \"\\uE97D\";\n    // U+E97F  Oblique form, ascending 5th, white\n    Glyphs[\"mensuralObliqueAsc5thWhite\"] = \"\\uE97F\";\n    // U+E980  Oblique form, descending 2nd, black\n    Glyphs[\"mensuralObliqueDesc2ndBlack\"] = \"\\uE980\";\n    // U+E982  Oblique form, descending 2nd, black and void\n    Glyphs[\"mensuralObliqueDesc2ndBlackVoid\"] = \"\\uE982\";\n    // U+E981  Oblique form, descending 2nd, void\n    Glyphs[\"mensuralObliqueDesc2ndVoid\"] = \"\\uE981\";\n    // U+E983  Oblique form, descending 2nd, white\n    Glyphs[\"mensuralObliqueDesc2ndWhite\"] = \"\\uE983\";\n    // U+E984  Oblique form, descending 3rd, black\n    Glyphs[\"mensuralObliqueDesc3rdBlack\"] = \"\\uE984\";\n    // U+E986  Oblique form, descending 3rd, black and void\n    Glyphs[\"mensuralObliqueDesc3rdBlackVoid\"] = \"\\uE986\";\n    // U+E985  Oblique form, descending 3rd, void\n    Glyphs[\"mensuralObliqueDesc3rdVoid\"] = \"\\uE985\";\n    // U+E987  Oblique form, descending 3rd, white\n    Glyphs[\"mensuralObliqueDesc3rdWhite\"] = \"\\uE987\";\n    // U+E988  Oblique form, descending 4th, black\n    Glyphs[\"mensuralObliqueDesc4thBlack\"] = \"\\uE988\";\n    // U+E98A  Oblique form, descending 4th, black and void\n    Glyphs[\"mensuralObliqueDesc4thBlackVoid\"] = \"\\uE98A\";\n    // U+E989  Oblique form, descending 4th, void\n    Glyphs[\"mensuralObliqueDesc4thVoid\"] = \"\\uE989\";\n    // U+E98B  Oblique form, descending 4th, white\n    Glyphs[\"mensuralObliqueDesc4thWhite\"] = \"\\uE98B\";\n    // U+E98C  Oblique form, descending 5th, black\n    Glyphs[\"mensuralObliqueDesc5thBlack\"] = \"\\uE98C\";\n    // U+E98E  Oblique form, descending 5th, black and void\n    Glyphs[\"mensuralObliqueDesc5thBlackVoid\"] = \"\\uE98E\";\n    // U+E98D  Oblique form, descending 5th, void\n    Glyphs[\"mensuralObliqueDesc5thVoid\"] = \"\\uE98D\";\n    // U+E98F  Oblique form, descending 5th, white\n    Glyphs[\"mensuralObliqueDesc5thWhite\"] = \"\\uE98F\";\n    // U+E910  Tempus perfectum cum prolatione perfecta (9/8)\n    Glyphs[\"mensuralProlation1\"] = \"\\uE910\";\n    // U+E919  Tempus imperfectum cum prolatione imperfecta diminution 4\n    Glyphs[\"mensuralProlation10\"] = \"\\uE919\";\n    // U+E91A  Tempus imperfectum cum prolatione imperfecta diminution 5\n    Glyphs[\"mensuralProlation11\"] = \"\\uE91A\";\n    // U+E911  Tempus perfectum cum prolatione imperfecta (3/4)\n    Glyphs[\"mensuralProlation2\"] = \"\\uE911\";\n    // U+E912  Tempus perfectum cum prolatione imperfecta diminution 1 (3/8)\n    Glyphs[\"mensuralProlation3\"] = \"\\uE912\";\n    // U+E913  Tempus perfectum cum prolatione perfecta diminution 2 (9/16)\n    Glyphs[\"mensuralProlation4\"] = \"\\uE913\";\n    // U+E914  Tempus imperfectum cum prolatione perfecta (6/8)\n    Glyphs[\"mensuralProlation5\"] = \"\\uE914\";\n    // U+E915  Tempus imperfectum cum prolatione imperfecta (2/4)\n    Glyphs[\"mensuralProlation6\"] = \"\\uE915\";\n    // U+E916  Tempus imperfectum cum prolatione imperfecta diminution 1 (2/2)\n    Glyphs[\"mensuralProlation7\"] = \"\\uE916\";\n    // U+E917  Tempus imperfectum cum prolatione imperfecta diminution 2 (6/16)\n    Glyphs[\"mensuralProlation8\"] = \"\\uE917\";\n    // U+E918  Tempus imperfectum cum prolatione imperfecta diminution 3 (2/2)\n    Glyphs[\"mensuralProlation9\"] = \"\\uE918\";\n    // U+E920  Combining dot\n    Glyphs[\"mensuralProlationCombiningDot\"] = \"\\uE920\";\n    // U+E924  Combining void dot\n    Glyphs[\"mensuralProlationCombiningDotVoid\"] = \"\\uE924\";\n    // U+E925  Combining vertical stroke\n    Glyphs[\"mensuralProlationCombiningStroke\"] = \"\\uE925\";\n    // U+E922  Combining three dots horizontal\n    Glyphs[\"mensuralProlationCombiningThreeDots\"] = \"\\uE922\";\n    // U+E923  Combining three dots triangular\n    Glyphs[\"mensuralProlationCombiningThreeDotsTri\"] = \"\\uE923\";\n    // U+E921  Combining two dots\n    Glyphs[\"mensuralProlationCombiningTwoDots\"] = \"\\uE921\";\n    // U+E926  Mensural proportion 1\n    Glyphs[\"mensuralProportion1\"] = \"\\uE926\";\n    // U+E927  Mensural proportion 2\n    Glyphs[\"mensuralProportion2\"] = \"\\uE927\";\n    // U+E928  Mensural proportion 3\n    Glyphs[\"mensuralProportion3\"] = \"\\uE928\";\n    // U+E929  Mensural proportion 4\n    Glyphs[\"mensuralProportion4\"] = \"\\uE929\";\n    // U+EE90  Mensural proportion 5\n    Glyphs[\"mensuralProportion5\"] = \"\\uEE90\";\n    // U+EE91  Mensural proportion 6\n    Glyphs[\"mensuralProportion6\"] = \"\\uEE91\";\n    // U+EE92  Mensural proportion 7\n    Glyphs[\"mensuralProportion7\"] = \"\\uEE92\";\n    // U+EE93  Mensural proportion 8\n    Glyphs[\"mensuralProportion8\"] = \"\\uEE93\";\n    // U+EE94  Mensural proportion 9\n    Glyphs[\"mensuralProportion9\"] = \"\\uEE94\";\n    // U+E92B  Mensural proportion major\n    Glyphs[\"mensuralProportionMajor\"] = \"\\uE92B\";\n    // U+E92A  Mensural proportion minor\n    Glyphs[\"mensuralProportionMinor\"] = \"\\uE92A\";\n    // U+E91C  Proportio dupla 1\n    Glyphs[\"mensuralProportionProportioDupla1\"] = \"\\uE91C\";\n    // U+E91D  Proportio dupla 2\n    Glyphs[\"mensuralProportionProportioDupla2\"] = \"\\uE91D\";\n    // U+E91F  Proportio quadrupla\n    Glyphs[\"mensuralProportionProportioQuadrupla\"] = \"\\uE91F\";\n    // U+E91E  Proportio tripla\n    Glyphs[\"mensuralProportionProportioTripla\"] = \"\\uE91E\";\n    // U+E91B  Tempus perfectum\n    Glyphs[\"mensuralProportionTempusPerfectum\"] = \"\\uE91B\";\n    // U+E9F3  Brevis rest\n    Glyphs[\"mensuralRestBrevis\"] = \"\\uE9F3\";\n    // U+E9F7  Fusa rest\n    Glyphs[\"mensuralRestFusa\"] = \"\\uE9F7\";\n    // U+E9F2  Longa imperfecta rest\n    Glyphs[\"mensuralRestLongaImperfecta\"] = \"\\uE9F2\";\n    // U+E9F1  Longa perfecta rest\n    Glyphs[\"mensuralRestLongaPerfecta\"] = \"\\uE9F1\";\n    // U+E9F0  Maxima rest\n    Glyphs[\"mensuralRestMaxima\"] = \"\\uE9F0\";\n    // U+E9F5  Minima rest\n    Glyphs[\"mensuralRestMinima\"] = \"\\uE9F5\";\n    // U+E9F4  Semibrevis rest\n    Glyphs[\"mensuralRestSemibrevis\"] = \"\\uE9F4\";\n    // U+E9F8  Semifusa rest\n    Glyphs[\"mensuralRestSemifusa\"] = \"\\uE9F8\";\n    // U+E9F6  Semiminima rest\n    Glyphs[\"mensuralRestSemiminima\"] = \"\\uE9F6\";\n    // U+EA01  Signum congruentiae down\n    Glyphs[\"mensuralSignumDown\"] = \"\\uEA01\";\n    // U+EA00  Signum congruentiae up\n    Glyphs[\"mensuralSignumUp\"] = \"\\uEA00\";\n    // U+E92F  Tempus imperfectum, horizontal\n    Glyphs[\"mensuralTempusImperfectumHoriz\"] = \"\\uE92F\";\n    // U+E92E  Tempus perfectum, horizontal\n    Glyphs[\"mensuralTempusPerfectumHoriz\"] = \"\\uE92E\";\n    // U+E95E  White mensural brevis\n    Glyphs[\"mensuralWhiteBrevis\"] = \"\\uE95E\";\n    // U+E961  White mensural fusa\n    Glyphs[\"mensuralWhiteFusa\"] = \"\\uE961\";\n    // U+E95D  White mensural longa\n    Glyphs[\"mensuralWhiteLonga\"] = \"\\uE95D\";\n    // U+E95C  White mensural maxima\n    Glyphs[\"mensuralWhiteMaxima\"] = \"\\uE95C\";\n    // U+E95F  White mensural minima\n    Glyphs[\"mensuralWhiteMinima\"] = \"\\uE95F\";\n    // U+E962  White mensural semibrevis\n    Glyphs[\"mensuralWhiteSemibrevis\"] = \"\\uE962\";\n    // U+E960  White mensural semiminima\n    Glyphs[\"mensuralWhiteSemiminima\"] = \"\\uE960\";\n    // U+ECB7  Augmentation dot\n    Glyphs[\"metAugmentationDot\"] = \"\\uECB7\";\n    // U+ECB6  1024th note (semihemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote1024thDown\"] = \"\\uECB6\";\n    // U+ECB5  1024th note (semihemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote1024thUp\"] = \"\\uECB5\";\n    // U+ECB0  128th note (semihemidemisemiquaver) stem down\n    Glyphs[\"metNote128thDown\"] = \"\\uECB0\";\n    // U+ECAF  128th note (semihemidemisemiquaver) stem up\n    Glyphs[\"metNote128thUp\"] = \"\\uECAF\";\n    // U+ECAA  16th note (semiquaver) stem down\n    Glyphs[\"metNote16thDown\"] = \"\\uECAA\";\n    // U+ECA9  16th note (semiquaver) stem up\n    Glyphs[\"metNote16thUp\"] = \"\\uECA9\";\n    // U+ECB2  256th note (demisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote256thDown\"] = \"\\uECB2\";\n    // U+ECB1  256th note (demisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote256thUp\"] = \"\\uECB1\";\n    // U+ECAC  32nd note (demisemiquaver) stem down\n    Glyphs[\"metNote32ndDown\"] = \"\\uECAC\";\n    // U+ECAB  32nd note (demisemiquaver) stem up\n    Glyphs[\"metNote32ndUp\"] = \"\\uECAB\";\n    // U+ECB4  512th note (hemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"metNote512thDown\"] = \"\\uECB4\";\n    // U+ECB3  512th note (hemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"metNote512thUp\"] = \"\\uECB3\";\n    // U+ECAE  64th note (hemidemisemiquaver) stem down\n    Glyphs[\"metNote64thDown\"] = \"\\uECAE\";\n    // U+ECAD  64th note (hemidemisemiquaver) stem up\n    Glyphs[\"metNote64thUp\"] = \"\\uECAD\";\n    // U+ECA8  Eighth note (quaver) stem down\n    Glyphs[\"metNote8thDown\"] = \"\\uECA8\";\n    // U+ECA7  Eighth note (quaver) stem up\n    Glyphs[\"metNote8thUp\"] = \"\\uECA7\";\n    // U+ECA0  Double whole note (breve)\n    Glyphs[\"metNoteDoubleWhole\"] = \"\\uECA0\";\n    // U+ECA1  Double whole note (square)\n    Glyphs[\"metNoteDoubleWholeSquare\"] = \"\\uECA1\";\n    // U+ECA4  Half note (minim) stem down\n    Glyphs[\"metNoteHalfDown\"] = \"\\uECA4\";\n    // U+ECA3  Half note (minim) stem up\n    Glyphs[\"metNoteHalfUp\"] = \"\\uECA3\";\n    // U+ECA6  Quarter note (crotchet) stem down\n    Glyphs[\"metNoteQuarterDown\"] = \"\\uECA6\";\n    // U+ECA5  Quarter note (crotchet) stem up\n    Glyphs[\"metNoteQuarterUp\"] = \"\\uECA5\";\n    // U+ECA2  Whole note (semibreve)\n    Glyphs[\"metNoteWhole\"] = \"\\uECA2\";\n    // U+EC63  Left-pointing arrow for metric modulation\n    Glyphs[\"metricModulationArrowLeft\"] = \"\\uEC63\";\n    // U+EC64  Right-pointing arrow for metric modulation\n    Glyphs[\"metricModulationArrowRight\"] = \"\\uEC64\";\n    // U+EC61  Do not copy\n    Glyphs[\"miscDoNotCopy\"] = \"\\uEC61\";\n    // U+EC60  Do not photocopy\n    Glyphs[\"miscDoNotPhotocopy\"] = \"\\uEC60\";\n    // U+EC62  Eyeglasses\n    Glyphs[\"miscEyeglasses\"] = \"\\uEC62\";\n    // U+E1E6  1024th note (semihemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"note1024thDown\"] = \"\\uE1E6\";\n    // U+E1E5  1024th note (semihemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"note1024thUp\"] = \"\\uE1E5\";\n    // U+E1E0  128th note (semihemidemisemiquaver) stem down\n    Glyphs[\"note128thDown\"] = \"\\uE1E0\";\n    // U+E1DF  128th note (semihemidemisemiquaver) stem up\n    Glyphs[\"note128thUp\"] = \"\\uE1DF\";\n    // U+E1DA  16th note (semiquaver) stem down\n    Glyphs[\"note16thDown\"] = \"\\uE1DA\";\n    // U+E1D9  16th note (semiquaver) stem up\n    Glyphs[\"note16thUp\"] = \"\\uE1D9\";\n    // U+E1E2  256th note (demisemihemidemisemiquaver) stem down\n    Glyphs[\"note256thDown\"] = \"\\uE1E2\";\n    // U+E1E1  256th note (demisemihemidemisemiquaver) stem up\n    Glyphs[\"note256thUp\"] = \"\\uE1E1\";\n    // U+E1DC  32nd note (demisemiquaver) stem down\n    Glyphs[\"note32ndDown\"] = \"\\uE1DC\";\n    // U+E1DB  32nd note (demisemiquaver) stem up\n    Glyphs[\"note32ndUp\"] = \"\\uE1DB\";\n    // U+E1E4  512th note (hemidemisemihemidemisemiquaver) stem down\n    Glyphs[\"note512thDown\"] = \"\\uE1E4\";\n    // U+E1E3  512th note (hemidemisemihemidemisemiquaver) stem up\n    Glyphs[\"note512thUp\"] = \"\\uE1E3\";\n    // U+E1DE  64th note (hemidemisemiquaver) stem down\n    Glyphs[\"note64thDown\"] = \"\\uE1DE\";\n    // U+E1DD  64th note (hemidemisemiquaver) stem up\n    Glyphs[\"note64thUp\"] = \"\\uE1DD\";\n    // U+E1D8  Eighth note (quaver) stem down\n    Glyphs[\"note8thDown\"] = \"\\uE1D8\";\n    // U+E1D7  Eighth note (quaver) stem up\n    Glyphs[\"note8thUp\"] = \"\\uE1D7\";\n    // U+E197  A (black note)\n    Glyphs[\"noteABlack\"] = \"\\uE197\";\n    // U+E196  A flat (black note)\n    Glyphs[\"noteAFlatBlack\"] = \"\\uE196\";\n    // U+E17F  A flat (half note)\n    Glyphs[\"noteAFlatHalf\"] = \"\\uE17F\";\n    // U+E168  A flat (whole note)\n    Glyphs[\"noteAFlatWhole\"] = \"\\uE168\";\n    // U+E180  A (half note)\n    Glyphs[\"noteAHalf\"] = \"\\uE180\";\n    // U+E198  A sharp (black note)\n    Glyphs[\"noteASharpBlack\"] = \"\\uE198\";\n    // U+E181  A sharp (half note)\n    Glyphs[\"noteASharpHalf\"] = \"\\uE181\";\n    // U+E16A  A sharp (whole note)\n    Glyphs[\"noteASharpWhole\"] = \"\\uE16A\";\n    // U+E169  A (whole note)\n    Glyphs[\"noteAWhole\"] = \"\\uE169\";\n    // U+E19A  B (black note)\n    Glyphs[\"noteBBlack\"] = \"\\uE19A\";\n    // U+E199  B flat (black note)\n    Glyphs[\"noteBFlatBlack\"] = \"\\uE199\";\n    // U+E182  B flat (half note)\n    Glyphs[\"noteBFlatHalf\"] = \"\\uE182\";\n    // U+E16B  B flat (whole note)\n    Glyphs[\"noteBFlatWhole\"] = \"\\uE16B\";\n    // U+E183  B (half note)\n    Glyphs[\"noteBHalf\"] = \"\\uE183\";\n    // U+E19B  B sharp (black note)\n    Glyphs[\"noteBSharpBlack\"] = \"\\uE19B\";\n    // U+E184  B sharp (half note)\n    Glyphs[\"noteBSharpHalf\"] = \"\\uE184\";\n    // U+E16D  B sharp (whole note)\n    Glyphs[\"noteBSharpWhole\"] = \"\\uE16D\";\n    // U+E16C  B (whole note)\n    Glyphs[\"noteBWhole\"] = \"\\uE16C\";\n    // U+E19D  C (black note)\n    Glyphs[\"noteCBlack\"] = \"\\uE19D\";\n    // U+E19C  C flat (black note)\n    Glyphs[\"noteCFlatBlack\"] = \"\\uE19C\";\n    // U+E185  C flat (half note)\n    Glyphs[\"noteCFlatHalf\"] = \"\\uE185\";\n    // U+E16E  C flat (whole note)\n    Glyphs[\"noteCFlatWhole\"] = \"\\uE16E\";\n    // U+E186  C (half note)\n    Glyphs[\"noteCHalf\"] = \"\\uE186\";\n    // U+E19E  C sharp (black note)\n    Glyphs[\"noteCSharpBlack\"] = \"\\uE19E\";\n    // U+E187  C sharp (half note)\n    Glyphs[\"noteCSharpHalf\"] = \"\\uE187\";\n    // U+E170  C sharp (whole note)\n    Glyphs[\"noteCSharpWhole\"] = \"\\uE170\";\n    // U+E16F  C (whole note)\n    Glyphs[\"noteCWhole\"] = \"\\uE16F\";\n    // U+E1A0  D (black note)\n    Glyphs[\"noteDBlack\"] = \"\\uE1A0\";\n    // U+E19F  D flat (black note)\n    Glyphs[\"noteDFlatBlack\"] = \"\\uE19F\";\n    // U+E188  D flat (half note)\n    Glyphs[\"noteDFlatHalf\"] = \"\\uE188\";\n    // U+E171  D flat (whole note)\n    Glyphs[\"noteDFlatWhole\"] = \"\\uE171\";\n    // U+E189  D (half note)\n    Glyphs[\"noteDHalf\"] = \"\\uE189\";\n    // U+E1A1  D sharp (black note)\n    Glyphs[\"noteDSharpBlack\"] = \"\\uE1A1\";\n    // U+E18A  D sharp (half note)\n    Glyphs[\"noteDSharpHalf\"] = \"\\uE18A\";\n    // U+E173  D sharp (whole note)\n    Glyphs[\"noteDSharpWhole\"] = \"\\uE173\";\n    // U+E172  D (whole note)\n    Glyphs[\"noteDWhole\"] = \"\\uE172\";\n    // U+EEF2  Di (black note)\n    Glyphs[\"noteDiBlack\"] = \"\\uEEF2\";\n    // U+EEE9  Di (half note)\n    Glyphs[\"noteDiHalf\"] = \"\\uEEE9\";\n    // U+EEE0  Di (whole note)\n    Glyphs[\"noteDiWhole\"] = \"\\uEEE0\";\n    // U+E160  Do (black note)\n    Glyphs[\"noteDoBlack\"] = \"\\uE160\";\n    // U+E158  Do (half note)\n    Glyphs[\"noteDoHalf\"] = \"\\uE158\";\n    // U+E150  Do (whole note)\n    Glyphs[\"noteDoWhole\"] = \"\\uE150\";\n    // U+E1D0  Double whole note (breve)\n    Glyphs[\"noteDoubleWhole\"] = \"\\uE1D0\";\n    // U+E1D1  Double whole note (square)\n    Glyphs[\"noteDoubleWholeSquare\"] = \"\\uE1D1\";\n    // U+E1A3  E (black note)\n    Glyphs[\"noteEBlack\"] = \"\\uE1A3\";\n    // U+E1A2  E flat (black note)\n    Glyphs[\"noteEFlatBlack\"] = \"\\uE1A2\";\n    // U+E18B  E flat (half note)\n    Glyphs[\"noteEFlatHalf\"] = \"\\uE18B\";\n    // U+E174  E flat (whole note)\n    Glyphs[\"noteEFlatWhole\"] = \"\\uE174\";\n    // U+E18C  E (half note)\n    Glyphs[\"noteEHalf\"] = \"\\uE18C\";\n    // U+E1A4  E sharp (black note)\n    Glyphs[\"noteESharpBlack\"] = \"\\uE1A4\";\n    // U+E18D  E sharp (half note)\n    Glyphs[\"noteESharpHalf\"] = \"\\uE18D\";\n    // U+E176  E sharp (whole note)\n    Glyphs[\"noteESharpWhole\"] = \"\\uE176\";\n    // U+E175  E (whole note)\n    Glyphs[\"noteEWhole\"] = \"\\uE175\";\n    // U+E1AF  Empty black note\n    Glyphs[\"noteEmptyBlack\"] = \"\\uE1AF\";\n    // U+E1AE  Empty half note\n    Glyphs[\"noteEmptyHalf\"] = \"\\uE1AE\";\n    // U+E1AD  Empty whole note\n    Glyphs[\"noteEmptyWhole\"] = \"\\uE1AD\";\n    // U+E1A6  F (black note)\n    Glyphs[\"noteFBlack\"] = \"\\uE1A6\";\n    // U+E1A5  F flat (black note)\n    Glyphs[\"noteFFlatBlack\"] = \"\\uE1A5\";\n    // U+E18E  F flat (half note)\n    Glyphs[\"noteFFlatHalf\"] = \"\\uE18E\";\n    // U+E177  F flat (whole note)\n    Glyphs[\"noteFFlatWhole\"] = \"\\uE177\";\n    // U+E18F  F (half note)\n    Glyphs[\"noteFHalf\"] = \"\\uE18F\";\n    // U+E1A7  F sharp (black note)\n    Glyphs[\"noteFSharpBlack\"] = \"\\uE1A7\";\n    // U+E190  F sharp (half note)\n    Glyphs[\"noteFSharpHalf\"] = \"\\uE190\";\n    // U+E179  F sharp (whole note)\n    Glyphs[\"noteFSharpWhole\"] = \"\\uE179\";\n    // U+E178  F (whole note)\n    Glyphs[\"noteFWhole\"] = \"\\uE178\";\n    // U+E163  Fa (black note)\n    Glyphs[\"noteFaBlack\"] = \"\\uE163\";\n    // U+E15B  Fa (half note)\n    Glyphs[\"noteFaHalf\"] = \"\\uE15B\";\n    // U+E153  Fa (whole note)\n    Glyphs[\"noteFaWhole\"] = \"\\uE153\";\n    // U+EEF6  Fi (black note)\n    Glyphs[\"noteFiBlack\"] = \"\\uEEF6\";\n    // U+EEED  Fi (half note)\n    Glyphs[\"noteFiHalf\"] = \"\\uEEED\";\n    // U+EEE4  Fi (whole note)\n    Glyphs[\"noteFiWhole\"] = \"\\uEEE4\";\n    // U+E1A9  G (black note)\n    Glyphs[\"noteGBlack\"] = \"\\uE1A9\";\n    // U+E1A8  G flat (black note)\n    Glyphs[\"noteGFlatBlack\"] = \"\\uE1A8\";\n    // U+E191  G flat (half note)\n    Glyphs[\"noteGFlatHalf\"] = \"\\uE191\";\n    // U+E17A  G flat (whole note)\n    Glyphs[\"noteGFlatWhole\"] = \"\\uE17A\";\n    // U+E192  G (half note)\n    Glyphs[\"noteGHalf\"] = \"\\uE192\";\n    // U+E1AA  G sharp (black note)\n    Glyphs[\"noteGSharpBlack\"] = \"\\uE1AA\";\n    // U+E193  G sharp (half note)\n    Glyphs[\"noteGSharpHalf\"] = \"\\uE193\";\n    // U+E17C  G sharp (whole note)\n    Glyphs[\"noteGSharpWhole\"] = \"\\uE17C\";\n    // U+E17B  G (whole note)\n    Glyphs[\"noteGWhole\"] = \"\\uE17B\";\n    // U+E1AB  H (black note)\n    Glyphs[\"noteHBlack\"] = \"\\uE1AB\";\n    // U+E194  H (half note)\n    Glyphs[\"noteHHalf\"] = \"\\uE194\";\n    // U+E1AC  H sharp (black note)\n    Glyphs[\"noteHSharpBlack\"] = \"\\uE1AC\";\n    // U+E195  H sharp (half note)\n    Glyphs[\"noteHSharpHalf\"] = \"\\uE195\";\n    // U+E17E  H sharp (whole note)\n    Glyphs[\"noteHSharpWhole\"] = \"\\uE17E\";\n    // U+E17D  H (whole note)\n    Glyphs[\"noteHWhole\"] = \"\\uE17D\";\n    // U+E1D4  Half note (minim) stem down\n    Glyphs[\"noteHalfDown\"] = \"\\uE1D4\";\n    // U+E1D3  Half note (minim) stem up\n    Glyphs[\"noteHalfUp\"] = \"\\uE1D3\";\n    // U+E165  La (black note)\n    Glyphs[\"noteLaBlack\"] = \"\\uE165\";\n    // U+E15D  La (half note)\n    Glyphs[\"noteLaHalf\"] = \"\\uE15D\";\n    // U+E155  La (whole note)\n    Glyphs[\"noteLaWhole\"] = \"\\uE155\";\n    // U+EEF9  Le (black note)\n    Glyphs[\"noteLeBlack\"] = \"\\uEEF9\";\n    // U+EEF0  Le (half note)\n    Glyphs[\"noteLeHalf\"] = \"\\uEEF0\";\n    // U+EEE7  Le (whole note)\n    Glyphs[\"noteLeWhole\"] = \"\\uEEE7\";\n    // U+EEF8  Li (black note)\n    Glyphs[\"noteLiBlack\"] = \"\\uEEF8\";\n    // U+EEEF  Li (half note)\n    Glyphs[\"noteLiHalf\"] = \"\\uEEEF\";\n    // U+EEE6  Li (whole note)\n    Glyphs[\"noteLiWhole\"] = \"\\uEEE6\";\n    // U+EEF5  Me (black note)\n    Glyphs[\"noteMeBlack\"] = \"\\uEEF5\";\n    // U+EEEC  Me (half note)\n    Glyphs[\"noteMeHalf\"] = \"\\uEEEC\";\n    // U+EEE3  Me (whole note)\n    Glyphs[\"noteMeWhole\"] = \"\\uEEE3\";\n    // U+E162  Mi (black note)\n    Glyphs[\"noteMiBlack\"] = \"\\uE162\";\n    // U+E15A  Mi (half note)\n    Glyphs[\"noteMiHalf\"] = \"\\uE15A\";\n    // U+E152  Mi (whole note)\n    Glyphs[\"noteMiWhole\"] = \"\\uE152\";\n    // U+E1D6  Quarter note (crotchet) stem down\n    Glyphs[\"noteQuarterDown\"] = \"\\uE1D6\";\n    // U+E1D5  Quarter note (crotchet) stem up\n    Glyphs[\"noteQuarterUp\"] = \"\\uE1D5\";\n    // U+EEF4  Ra (black note)\n    Glyphs[\"noteRaBlack\"] = \"\\uEEF4\";\n    // U+EEEB  Ra (half note)\n    Glyphs[\"noteRaHalf\"] = \"\\uEEEB\";\n    // U+EEE2  Ra (whole note)\n    Glyphs[\"noteRaWhole\"] = \"\\uEEE2\";\n    // U+E161  Re (black note)\n    Glyphs[\"noteReBlack\"] = \"\\uE161\";\n    // U+E159  Re (half note)\n    Glyphs[\"noteReHalf\"] = \"\\uE159\";\n    // U+E151  Re (whole note)\n    Glyphs[\"noteReWhole\"] = \"\\uE151\";\n    // U+EEF3  Ri (black note)\n    Glyphs[\"noteRiBlack\"] = \"\\uEEF3\";\n    // U+EEEA  Ri (half note)\n    Glyphs[\"noteRiHalf\"] = \"\\uEEEA\";\n    // U+EEE1  Ri (whole note)\n    Glyphs[\"noteRiWhole\"] = \"\\uEEE1\";\n    // U+EEF7  Se (black note)\n    Glyphs[\"noteSeBlack\"] = \"\\uEEF7\";\n    // U+EEEE  Se (half note)\n    Glyphs[\"noteSeHalf\"] = \"\\uEEEE\";\n    // U+EEE5  Se (whole note)\n    Glyphs[\"noteSeWhole\"] = \"\\uEEE5\";\n    // U+E1C9  Arrowhead left black (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftBlack\"] = \"\\uE1C9\";\n    // U+ECDC  Arrowhead left double whole (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftDoubleWhole\"] = \"\\uECDC\";\n    // U+E1C8  Arrowhead left white (Funk 7-shape re)\n    Glyphs[\"noteShapeArrowheadLeftWhite\"] = \"\\uE1C8\";\n    // U+E1B9  Diamond black (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondBlack\"] = \"\\uE1B9\";\n    // U+ECD4  Diamond double whole (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondDoubleWhole\"] = \"\\uECD4\";\n    // U+E1B8  Diamond white (4-shape mi; 7-shape mi)\n    Glyphs[\"noteShapeDiamondWhite\"] = \"\\uE1B8\";\n    // U+E1C5  Isosceles triangle black (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleBlack\"] = \"\\uE1C5\";\n    // U+ECDA  Isosceles triangle double whole (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleDoubleWhole\"] = \"\\uECDA\";\n    // U+E1C4  Isosceles triangle white (Walker 7-shape ti)\n    Glyphs[\"noteShapeIsoscelesTriangleWhite\"] = \"\\uE1C4\";\n    // U+E1C1  Inverted keystone black (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneBlack\"] = \"\\uE1C1\";\n    // U+ECD8  Inverted keystone double whole (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneDoubleWhole\"] = \"\\uECD8\";\n    // U+E1C0  Inverted keystone white (Walker 7-shape do)\n    Glyphs[\"noteShapeKeystoneWhite\"] = \"\\uE1C0\";\n    // U+E1BD  Moon black (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonBlack\"] = \"\\uE1BD\";\n    // U+ECD6  Moon double whole (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonDoubleWhole\"] = \"\\uECD6\";\n    // U+E1C7  Moon left black (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftBlack\"] = \"\\uE1C7\";\n    // U+ECDB  Moon left double whole (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftDoubleWhole\"] = \"\\uECDB\";\n    // U+E1C6  Moon left white (Funk 7-shape do)\n    Glyphs[\"noteShapeMoonLeftWhite\"] = \"\\uE1C6\";\n    // U+E1BC  Moon white (Aikin 7-shape re)\n    Glyphs[\"noteShapeMoonWhite\"] = \"\\uE1BC\";\n    // U+E1C3  Quarter moon black (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonBlack\"] = \"\\uE1C3\";\n    // U+ECD9  Quarter moon double whole (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonDoubleWhole\"] = \"\\uECD9\";\n    // U+E1C2  Quarter moon white (Walker 7-shape re)\n    Glyphs[\"noteShapeQuarterMoonWhite\"] = \"\\uE1C2\";\n    // U+E1B1  Round black (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundBlack\"] = \"\\uE1B1\";\n    // U+ECD0  Round double whole (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundDoubleWhole\"] = \"\\uECD0\";\n    // U+E1B0  Round white (4-shape sol; 7-shape so)\n    Glyphs[\"noteShapeRoundWhite\"] = \"\\uE1B0\";\n    // U+E1B3  Square black (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareBlack\"] = \"\\uE1B3\";\n    // U+ECD1  Square double whole (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareDoubleWhole\"] = \"\\uECD1\";\n    // U+E1B2  Square white (4-shape la; Aikin 7-shape la)\n    Glyphs[\"noteShapeSquareWhite\"] = \"\\uE1B2\";\n    // U+E1B7  Triangle left black (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftBlack\"] = \"\\uE1B7\";\n    // U+ECD3  Triangle left double whole (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftDoubleWhole\"] = \"\\uECD3\";\n    // U+E1B6  Triangle left white (stem up; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleLeftWhite\"] = \"\\uE1B6\";\n    // U+E1B5  Triangle right black (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightBlack\"] = \"\\uE1B5\";\n    // U+ECD2  Triangle right double whole (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightDoubleWhole\"] = \"\\uECD2\";\n    // U+E1B4  Triangle right white (stem down; 4-shape fa; 7-shape fa)\n    Glyphs[\"noteShapeTriangleRightWhite\"] = \"\\uE1B4\";\n    // U+E1BF  Triangle-round black (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundBlack\"] = \"\\uE1BF\";\n    // U+ECD7  Triangle-round white (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundDoubleWhole\"] = \"\\uECD7\";\n    // U+E1CB  Triangle-round left black (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftBlack\"] = \"\\uE1CB\";\n    // U+ECDD  Triangle-round left double whole (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftDoubleWhole\"] = \"\\uECDD\";\n    // U+E1CA  Triangle-round left white (Funk 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundLeftWhite\"] = \"\\uE1CA\";\n    // U+E1BE  Triangle-round white (Aikin 7-shape ti)\n    Glyphs[\"noteShapeTriangleRoundWhite\"] = \"\\uE1BE\";\n    // U+E1BB  Triangle up black (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpBlack\"] = \"\\uE1BB\";\n    // U+ECD5  Triangle up double whole (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpDoubleWhole\"] = \"\\uECD5\";\n    // U+E1BA  Triangle up white (Aikin 7-shape do)\n    Glyphs[\"noteShapeTriangleUpWhite\"] = \"\\uE1BA\";\n    // U+E167  Si (black note)\n    Glyphs[\"noteSiBlack\"] = \"\\uE167\";\n    // U+E15F  Si (half note)\n    Glyphs[\"noteSiHalf\"] = \"\\uE15F\";\n    // U+E157  Si (whole note)\n    Glyphs[\"noteSiWhole\"] = \"\\uE157\";\n    // U+E164  So (black note)\n    Glyphs[\"noteSoBlack\"] = \"\\uE164\";\n    // U+E15C  So (half note)\n    Glyphs[\"noteSoHalf\"] = \"\\uE15C\";\n    // U+E154  So (whole note)\n    Glyphs[\"noteSoWhole\"] = \"\\uE154\";\n    // U+EEFA  Te (black note)\n    Glyphs[\"noteTeBlack\"] = \"\\uEEFA\";\n    // U+EEF1  Te (half note)\n    Glyphs[\"noteTeHalf\"] = \"\\uEEF1\";\n    // U+EEE8  Te (whole note)\n    Glyphs[\"noteTeWhole\"] = \"\\uEEE8\";\n    // U+E166  Ti (black note)\n    Glyphs[\"noteTiBlack\"] = \"\\uE166\";\n    // U+E15E  Ti (half note)\n    Glyphs[\"noteTiHalf\"] = \"\\uE15E\";\n    // U+E156  Ti (whole note)\n    Glyphs[\"noteTiWhole\"] = \"\\uE156\";\n    // U+E1D2  Whole note (semibreve)\n    Glyphs[\"noteWhole\"] = \"\\uE1D2\";\n    // U+E0A4  Black notehead\n    Glyphs[\"noteheadBlack\"] = \"\\uE0A4\";\n    // U+E0F7  Circle slash notehead\n    Glyphs[\"noteheadCircleSlash\"] = \"\\uE0F7\";\n    // U+E0B3  Circle X notehead\n    Glyphs[\"noteheadCircleX\"] = \"\\uE0B3\";\n    // U+E0B0  Circle X double whole\n    Glyphs[\"noteheadCircleXDoubleWhole\"] = \"\\uE0B0\";\n    // U+E0B2  Circle X half\n    Glyphs[\"noteheadCircleXHalf\"] = \"\\uE0B2\";\n    // U+E0B1  Circle X whole\n    Glyphs[\"noteheadCircleXWhole\"] = \"\\uE0B1\";\n    // U+E0E4  Circled black notehead\n    Glyphs[\"noteheadCircledBlack\"] = \"\\uE0E4\";\n    // U+E0E8  Black notehead in large circle\n    Glyphs[\"noteheadCircledBlackLarge\"] = \"\\uE0E8\";\n    // U+E0E7  Circled double whole notehead\n    Glyphs[\"noteheadCircledDoubleWhole\"] = \"\\uE0E7\";\n    // U+E0EB  Double whole notehead in large circle\n    Glyphs[\"noteheadCircledDoubleWholeLarge\"] = \"\\uE0EB\";\n    // U+E0E5  Circled half notehead\n    Glyphs[\"noteheadCircledHalf\"] = \"\\uE0E5\";\n    // U+E0E9  Half notehead in large circle\n    Glyphs[\"noteheadCircledHalfLarge\"] = \"\\uE0E9\";\n    // U+E0E6  Circled whole notehead\n    Glyphs[\"noteheadCircledWhole\"] = \"\\uE0E6\";\n    // U+E0EA  Whole notehead in large circle\n    Glyphs[\"noteheadCircledWholeLarge\"] = \"\\uE0EA\";\n    // U+E0EC  Cross notehead in large circle\n    Glyphs[\"noteheadCircledXLarge\"] = \"\\uE0EC\";\n    // U+E124  Double whole note cluster, 2nd\n    Glyphs[\"noteheadClusterDoubleWhole2nd\"] = \"\\uE124\";\n    // U+E128  Double whole note cluster, 3rd\n    Glyphs[\"noteheadClusterDoubleWhole3rd\"] = \"\\uE128\";\n    // U+E12E  Combining double whole note cluster, bottom\n    Glyphs[\"noteheadClusterDoubleWholeBottom\"] = \"\\uE12E\";\n    // U+E12D  Combining double whole note cluster, middle\n    Glyphs[\"noteheadClusterDoubleWholeMiddle\"] = \"\\uE12D\";\n    // U+E12C  Combining double whole note cluster, top\n    Glyphs[\"noteheadClusterDoubleWholeTop\"] = \"\\uE12C\";\n    // U+E126  Half note cluster, 2nd\n    Glyphs[\"noteheadClusterHalf2nd\"] = \"\\uE126\";\n    // U+E12A  Half note cluster, 3rd\n    Glyphs[\"noteheadClusterHalf3rd\"] = \"\\uE12A\";\n    // U+E134  Combining half note cluster, bottom\n    Glyphs[\"noteheadClusterHalfBottom\"] = \"\\uE134\";\n    // U+E133  Combining half note cluster, middle\n    Glyphs[\"noteheadClusterHalfMiddle\"] = \"\\uE133\";\n    // U+E132  Combining half note cluster, top\n    Glyphs[\"noteheadClusterHalfTop\"] = \"\\uE132\";\n    // U+E127  Quarter note cluster, 2nd\n    Glyphs[\"noteheadClusterQuarter2nd\"] = \"\\uE127\";\n    // U+E12B  Quarter note cluster, 3rd\n    Glyphs[\"noteheadClusterQuarter3rd\"] = \"\\uE12B\";\n    // U+E137  Combining quarter note cluster, bottom\n    Glyphs[\"noteheadClusterQuarterBottom\"] = \"\\uE137\";\n    // U+E136  Combining quarter note cluster, middle\n    Glyphs[\"noteheadClusterQuarterMiddle\"] = \"\\uE136\";\n    // U+E135  Combining quarter note cluster, top\n    Glyphs[\"noteheadClusterQuarterTop\"] = \"\\uE135\";\n    // U+E123  Cluster notehead black (round)\n    Glyphs[\"noteheadClusterRoundBlack\"] = \"\\uE123\";\n    // U+E122  Cluster notehead white (round)\n    Glyphs[\"noteheadClusterRoundWhite\"] = \"\\uE122\";\n    // U+E121  Cluster notehead black (square)\n    Glyphs[\"noteheadClusterSquareBlack\"] = \"\\uE121\";\n    // U+E120  Cluster notehead white (square)\n    Glyphs[\"noteheadClusterSquareWhite\"] = \"\\uE120\";\n    // U+E125  Whole note cluster, 2nd\n    Glyphs[\"noteheadClusterWhole2nd\"] = \"\\uE125\";\n    // U+E129  Whole note cluster, 3rd\n    Glyphs[\"noteheadClusterWhole3rd\"] = \"\\uE129\";\n    // U+E131  Combining whole note cluster, bottom\n    Glyphs[\"noteheadClusterWholeBottom\"] = \"\\uE131\";\n    // U+E130  Combining whole note cluster, middle\n    Glyphs[\"noteheadClusterWholeMiddle\"] = \"\\uE130\";\n    // U+E12F  Combining whole note cluster, top\n    Glyphs[\"noteheadClusterWholeTop\"] = \"\\uE12F\";\n    // U+EEAE  4/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhNoteSeriesHalf\"] = \"\\uEEAE\";\n    // U+EEAD  8/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhNoteSeriesWhole\"] = \"\\uEEAD\";\n    // U+EEAF  2/11 note (eleventh note series, Cowell)\n    Glyphs[\"noteheadCowellEleventhSeriesBlack\"] = \"\\uEEAF\";\n    // U+EEB5  2/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesBlack\"] = \"\\uEEB5\";\n    // U+EEB4  4/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesHalf\"] = \"\\uEEB4\";\n    // U+EEB3  8/15 note (fifteenth note series, Cowell)\n    Glyphs[\"noteheadCowellFifteenthNoteSeriesWhole\"] = \"\\uEEB3\";\n    // U+EEA6  1/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesBlack\"] = \"\\uEEA6\";\n    // U+EEA5  2/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesHalf\"] = \"\\uEEA5\";\n    // U+EEA4  4/5 note (fifth note series, Cowell)\n    Glyphs[\"noteheadCowellFifthNoteSeriesWhole\"] = \"\\uEEA4\";\n    // U+EEAC  2/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesBlack\"] = \"\\uEEAC\";\n    // U+EEAB  4/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesHalf\"] = \"\\uEEAB\";\n    // U+EEAA  8/9 note (ninth note series, Cowell)\n    Glyphs[\"noteheadCowellNinthNoteSeriesWhole\"] = \"\\uEEAA\";\n    // U+EEA9  1/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesBlack\"] = \"\\uEEA9\";\n    // U+EEA8  2/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesHalf\"] = \"\\uEEA8\";\n    // U+EEA7  4/7 note (seventh note series, Cowell)\n    Glyphs[\"noteheadCowellSeventhNoteSeriesWhole\"] = \"\\uEEA7\";\n    // U+EEA3  1/6 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesBlack\"] = \"\\uEEA3\";\n    // U+EEA2  1/3 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesHalf\"] = \"\\uEEA2\";\n    // U+EEA1  2/3 note (third note series, Cowell)\n    Glyphs[\"noteheadCowellThirdNoteSeriesWhole\"] = \"\\uEEA1\";\n    // U+EEB2  2/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesBlack\"] = \"\\uEEB2\";\n    // U+EEB1  4/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesHalf\"] = \"\\uEEB1\";\n    // U+EEB0  8/13 note (thirteenth note series, Cowell)\n    Glyphs[\"noteheadCowellThirteenthNoteSeriesWhole\"] = \"\\uEEB0\";\n    // U+E0DB  Diamond black notehead\n    Glyphs[\"noteheadDiamondBlack\"] = \"\\uE0DB\";\n    // U+E0E2  Diamond black notehead (old)\n    Glyphs[\"noteheadDiamondBlackOld\"] = \"\\uE0E2\";\n    // U+E0DC  Diamond black notehead (wide)\n    Glyphs[\"noteheadDiamondBlackWide\"] = \"\\uE0DC\";\n    // U+E139  Black diamond cluster, 2nd\n    Glyphs[\"noteheadDiamondClusterBlack2nd\"] = \"\\uE139\";\n    // U+E13B  Black diamond cluster, 3rd\n    Glyphs[\"noteheadDiamondClusterBlack3rd\"] = \"\\uE13B\";\n    // U+E141  Combining black diamond cluster, bottom\n    Glyphs[\"noteheadDiamondClusterBlackBottom\"] = \"\\uE141\";\n    // U+E140  Combining black diamond cluster, middle\n    Glyphs[\"noteheadDiamondClusterBlackMiddle\"] = \"\\uE140\";\n    // U+E13F  Combining black diamond cluster, top\n    Glyphs[\"noteheadDiamondClusterBlackTop\"] = \"\\uE13F\";\n    // U+E138  White diamond cluster, 2nd\n    Glyphs[\"noteheadDiamondClusterWhite2nd\"] = \"\\uE138\";\n    // U+E13A  White diamond cluster, 3rd\n    Glyphs[\"noteheadDiamondClusterWhite3rd\"] = \"\\uE13A\";\n    // U+E13E  Combining white diamond cluster, bottom\n    Glyphs[\"noteheadDiamondClusterWhiteBottom\"] = \"\\uE13E\";\n    // U+E13D  Combining white diamond cluster, middle\n    Glyphs[\"noteheadDiamondClusterWhiteMiddle\"] = \"\\uE13D\";\n    // U+E13C  Combining white diamond cluster, top\n    Glyphs[\"noteheadDiamondClusterWhiteTop\"] = \"\\uE13C\";\n    // U+E0D7  Diamond double whole notehead\n    Glyphs[\"noteheadDiamondDoubleWhole\"] = \"\\uE0D7\";\n    // U+E0DF  Diamond double whole notehead (old)\n    Glyphs[\"noteheadDiamondDoubleWholeOld\"] = \"\\uE0DF\";\n    // U+E0D9  Diamond half notehead\n    Glyphs[\"noteheadDiamondHalf\"] = \"\\uE0D9\";\n    // U+E0E3  Half-filled diamond notehead\n    Glyphs[\"noteheadDiamondHalfFilled\"] = \"\\uE0E3\";\n    // U+E0E1  Diamond half notehead (old)\n    Glyphs[\"noteheadDiamondHalfOld\"] = \"\\uE0E1\";\n    // U+E0DA  Diamond half notehead (wide)\n    Glyphs[\"noteheadDiamondHalfWide\"] = \"\\uE0DA\";\n    // U+E0FC  Open diamond notehead\n    Glyphs[\"noteheadDiamondOpen\"] = \"\\uE0FC\";\n    // U+E0DD  Diamond white notehead\n    Glyphs[\"noteheadDiamondWhite\"] = \"\\uE0DD\";\n    // U+E0DE  Diamond white notehead (wide)\n    Glyphs[\"noteheadDiamondWhiteWide\"] = \"\\uE0DE\";\n    // U+E0D8  Diamond whole notehead\n    Glyphs[\"noteheadDiamondWhole\"] = \"\\uE0D8\";\n    // U+E0E0  Diamond whole notehead (old)\n    Glyphs[\"noteheadDiamondWholeOld\"] = \"\\uE0E0\";\n    // U+E0A0  Double whole (breve) notehead\n    Glyphs[\"noteheadDoubleWhole\"] = \"\\uE0A0\";\n    // U+E0A1  Double whole (breve) notehead (square)\n    Glyphs[\"noteheadDoubleWholeSquare\"] = \"\\uE0A1\";\n    // U+E0B4  Double whole notehead with X\n    Glyphs[\"noteheadDoubleWholeWithX\"] = \"\\uE0B4\";\n    // U+E0A3  Half (minim) notehead\n    Glyphs[\"noteheadHalf\"] = \"\\uE0A3\";\n    // U+E0FB  Filled half (minim) notehead\n    Glyphs[\"noteheadHalfFilled\"] = \"\\uE0FB\";\n    // U+E0B6  Half notehead with X\n    Glyphs[\"noteheadHalfWithX\"] = \"\\uE0B6\";\n    // U+E0F8  Heavy X notehead\n    Glyphs[\"noteheadHeavyX\"] = \"\\uE0F8\";\n    // U+E0F9  Heavy X with hat notehead\n    Glyphs[\"noteheadHeavyXHat\"] = \"\\uE0F9\";\n    // U+E0F4  Large arrow down (lowest pitch) black notehead\n    Glyphs[\"noteheadLargeArrowDownBlack\"] = \"\\uE0F4\";\n    // U+E0F1  Large arrow down (lowest pitch) double whole notehead\n    Glyphs[\"noteheadLargeArrowDownDoubleWhole\"] = \"\\uE0F1\";\n    // U+E0F3  Large arrow down (lowest pitch) half notehead\n    Glyphs[\"noteheadLargeArrowDownHalf\"] = \"\\uE0F3\";\n    // U+E0F2  Large arrow down (lowest pitch) whole notehead\n    Glyphs[\"noteheadLargeArrowDownWhole\"] = \"\\uE0F2\";\n    // U+E0F0  Large arrow up (highest pitch) black notehead\n    Glyphs[\"noteheadLargeArrowUpBlack\"] = \"\\uE0F0\";\n    // U+E0ED  Large arrow up (highest pitch) double whole notehead\n    Glyphs[\"noteheadLargeArrowUpDoubleWhole\"] = \"\\uE0ED\";\n    // U+E0EF  Large arrow up (highest pitch) half notehead\n    Glyphs[\"noteheadLargeArrowUpHalf\"] = \"\\uE0EF\";\n    // U+E0EE  Large arrow up (highest pitch) whole notehead\n    Glyphs[\"noteheadLargeArrowUpWhole\"] = \"\\uE0EE\";\n    // U+E0CB  Moon notehead black\n    Glyphs[\"noteheadMoonBlack\"] = \"\\uE0CB\";\n    // U+E0CA  Moon notehead white\n    Glyphs[\"noteheadMoonWhite\"] = \"\\uE0CA\";\n    // U+EEA0  Sine notehead (Nancarrow)\n    Glyphs[\"noteheadNancarrowSine\"] = \"\\uEEA0\";\n    // U+E0A5  Null notehead\n    Glyphs[\"noteheadNull\"] = \"\\uE0A5\";\n    // U+E0CE  Parenthesis notehead\n    Glyphs[\"noteheadParenthesis\"] = \"\\uE0CE\";\n    // U+E0F5  Opening parenthesis\n    Glyphs[\"noteheadParenthesisLeft\"] = \"\\uE0F5\";\n    // U+E0F6  Closing parenthesis\n    Glyphs[\"noteheadParenthesisRight\"] = \"\\uE0F6\";\n    // U+E0AF  Plus notehead black\n    Glyphs[\"noteheadPlusBlack\"] = \"\\uE0AF\";\n    // U+E0AC  Plus notehead double whole\n    Glyphs[\"noteheadPlusDoubleWhole\"] = \"\\uE0AC\";\n    // U+E0AE  Plus notehead half\n    Glyphs[\"noteheadPlusHalf\"] = \"\\uE0AE\";\n    // U+E0AD  Plus notehead whole\n    Glyphs[\"noteheadPlusWhole\"] = \"\\uE0AD\";\n    // U+E144  Combining black rectangular cluster, bottom\n    Glyphs[\"noteheadRectangularClusterBlackBottom\"] = \"\\uE144\";\n    // U+E143  Combining black rectangular cluster, middle\n    Glyphs[\"noteheadRectangularClusterBlackMiddle\"] = \"\\uE143\";\n    // U+E142  Combining black rectangular cluster, top\n    Glyphs[\"noteheadRectangularClusterBlackTop\"] = \"\\uE142\";\n    // U+E147  Combining white rectangular cluster, bottom\n    Glyphs[\"noteheadRectangularClusterWhiteBottom\"] = \"\\uE147\";\n    // U+E146  Combining white rectangular cluster, middle\n    Glyphs[\"noteheadRectangularClusterWhiteMiddle\"] = \"\\uE146\";\n    // U+E145  Combining white rectangular cluster, top\n    Glyphs[\"noteheadRectangularClusterWhiteTop\"] = \"\\uE145\";\n    // U+E113  Round black notehead\n    Glyphs[\"noteheadRoundBlack\"] = \"\\uE113\";\n    // U+E11C  Round black notehead, double slashed\n    Glyphs[\"noteheadRoundBlackDoubleSlashed\"] = \"\\uE11C\";\n    // U+E110  Large round black notehead\n    Glyphs[\"noteheadRoundBlackLarge\"] = \"\\uE110\";\n    // U+E118  Round black notehead, slashed\n    Glyphs[\"noteheadRoundBlackSlashed\"] = \"\\uE118\";\n    // U+E116  Large round black notehead, slashed\n    Glyphs[\"noteheadRoundBlackSlashedLarge\"] = \"\\uE116\";\n    // U+E114  Round white notehead\n    Glyphs[\"noteheadRoundWhite\"] = \"\\uE114\";\n    // U+E11D  Round white notehead, double slashed\n    Glyphs[\"noteheadRoundWhiteDoubleSlashed\"] = \"\\uE11D\";\n    // U+E111  Large round white notehead\n    Glyphs[\"noteheadRoundWhiteLarge\"] = \"\\uE111\";\n    // U+E119  Round white notehead, slashed\n    Glyphs[\"noteheadRoundWhiteSlashed\"] = \"\\uE119\";\n    // U+E117  Large round white notehead, slashed\n    Glyphs[\"noteheadRoundWhiteSlashedLarge\"] = \"\\uE117\";\n    // U+E115  Round white notehead with dot\n    Glyphs[\"noteheadRoundWhiteWithDot\"] = \"\\uE115\";\n    // U+E112  Large round white notehead with dot\n    Glyphs[\"noteheadRoundWhiteWithDotLarge\"] = \"\\uE112\";\n    // U+E104  Large white diamond\n    Glyphs[\"noteheadSlashDiamondWhite\"] = \"\\uE104\";\n    // U+E101  Slash with horizontal ends\n    Glyphs[\"noteheadSlashHorizontalEnds\"] = \"\\uE101\";\n    // U+E108  Muted slash with horizontal ends\n    Glyphs[\"noteheadSlashHorizontalEndsMuted\"] = \"\\uE108\";\n    // U+E100  Slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEnds\"] = \"\\uE100\";\n    // U+E107  Muted slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEndsMuted\"] = \"\\uE107\";\n    // U+E105  Small slash with vertical ends\n    Glyphs[\"noteheadSlashVerticalEndsSmall\"] = \"\\uE105\";\n    // U+E10A  White slash double whole\n    Glyphs[\"noteheadSlashWhiteDoubleWhole\"] = \"\\uE10A\";\n    // U+E103  White slash half\n    Glyphs[\"noteheadSlashWhiteHalf\"] = \"\\uE103\";\n    // U+E109  Muted white slash\n    Glyphs[\"noteheadSlashWhiteMuted\"] = \"\\uE109\";\n    // U+E102  White slash whole\n    Glyphs[\"noteheadSlashWhiteWhole\"] = \"\\uE102\";\n    // U+E106  Large X notehead\n    Glyphs[\"noteheadSlashX\"] = \"\\uE106\";\n    // U+E0CF  Slashed black notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedBlack1\"] = \"\\uE0CF\";\n    // U+E0D0  Slashed black notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedBlack2\"] = \"\\uE0D0\";\n    // U+E0D5  Slashed double whole notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedDoubleWhole1\"] = \"\\uE0D5\";\n    // U+E0D6  Slashed double whole notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedDoubleWhole2\"] = \"\\uE0D6\";\n    // U+E0D1  Slashed half notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedHalf1\"] = \"\\uE0D1\";\n    // U+E0D2  Slashed half notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedHalf2\"] = \"\\uE0D2\";\n    // U+E0D3  Slashed whole notehead (bottom left to top right)\n    Glyphs[\"noteheadSlashedWhole1\"] = \"\\uE0D3\";\n    // U+E0D4  Slashed whole notehead (top left to bottom right)\n    Glyphs[\"noteheadSlashedWhole2\"] = \"\\uE0D4\";\n    // U+E0B9  Square notehead black\n    Glyphs[\"noteheadSquareBlack\"] = \"\\uE0B9\";\n    // U+E11A  Large square black notehead\n    Glyphs[\"noteheadSquareBlackLarge\"] = \"\\uE11A\";\n    // U+E11B  Large square white notehead\n    Glyphs[\"noteheadSquareBlackWhite\"] = \"\\uE11B\";\n    // U+E0B8  Square notehead white\n    Glyphs[\"noteheadSquareWhite\"] = \"\\uE0B8\";\n    // U+E0C7  Triangle notehead down black\n    Glyphs[\"noteheadTriangleDownBlack\"] = \"\\uE0C7\";\n    // U+E0C3  Triangle notehead down double whole\n    Glyphs[\"noteheadTriangleDownDoubleWhole\"] = \"\\uE0C3\";\n    // U+E0C5  Triangle notehead down half\n    Glyphs[\"noteheadTriangleDownHalf\"] = \"\\uE0C5\";\n    // U+E0C6  Triangle notehead down white\n    Glyphs[\"noteheadTriangleDownWhite\"] = \"\\uE0C6\";\n    // U+E0C4  Triangle notehead down whole\n    Glyphs[\"noteheadTriangleDownWhole\"] = \"\\uE0C4\";\n    // U+E0C0  Triangle notehead left black\n    Glyphs[\"noteheadTriangleLeftBlack\"] = \"\\uE0C0\";\n    // U+E0BF  Triangle notehead left white\n    Glyphs[\"noteheadTriangleLeftWhite\"] = \"\\uE0BF\";\n    // U+E0C2  Triangle notehead right black\n    Glyphs[\"noteheadTriangleRightBlack\"] = \"\\uE0C2\";\n    // U+E0C1  Triangle notehead right white\n    Glyphs[\"noteheadTriangleRightWhite\"] = \"\\uE0C1\";\n    // U+E0CD  Triangle-round notehead down black\n    Glyphs[\"noteheadTriangleRoundDownBlack\"] = \"\\uE0CD\";\n    // U+E0CC  Triangle-round notehead down white\n    Glyphs[\"noteheadTriangleRoundDownWhite\"] = \"\\uE0CC\";\n    // U+E0BE  Triangle notehead up black\n    Glyphs[\"noteheadTriangleUpBlack\"] = \"\\uE0BE\";\n    // U+E0BA  Triangle notehead up double whole\n    Glyphs[\"noteheadTriangleUpDoubleWhole\"] = \"\\uE0BA\";\n    // U+E0BC  Triangle notehead up half\n    Glyphs[\"noteheadTriangleUpHalf\"] = \"\\uE0BC\";\n    // U+E0C9  Triangle notehead up right black\n    Glyphs[\"noteheadTriangleUpRightBlack\"] = \"\\uE0C9\";\n    // U+E0C8  Triangle notehead up right white\n    Glyphs[\"noteheadTriangleUpRightWhite\"] = \"\\uE0C8\";\n    // U+E0BD  Triangle notehead up white\n    Glyphs[\"noteheadTriangleUpWhite\"] = \"\\uE0BD\";\n    // U+E0BB  Triangle notehead up whole\n    Glyphs[\"noteheadTriangleUpWhole\"] = \"\\uE0BB\";\n    // U+E0B7  Void notehead with X\n    Glyphs[\"noteheadVoidWithX\"] = \"\\uE0B7\";\n    // U+E0A2  Whole (semibreve) notehead\n    Glyphs[\"noteheadWhole\"] = \"\\uE0A2\";\n    // U+E0FA  Filled whole (semibreve) notehead\n    Glyphs[\"noteheadWholeFilled\"] = \"\\uE0FA\";\n    // U+E0B5  Whole notehead with X\n    Glyphs[\"noteheadWholeWithX\"] = \"\\uE0B5\";\n    // U+E0A9  X notehead black\n    Glyphs[\"noteheadXBlack\"] = \"\\uE0A9\";\n    // U+E0A6  X notehead double whole\n    Glyphs[\"noteheadXDoubleWhole\"] = \"\\uE0A6\";\n    // U+E0A8  X notehead half\n    Glyphs[\"noteheadXHalf\"] = \"\\uE0A8\";\n    // U+E0AA  Ornate X notehead\n    Glyphs[\"noteheadXOrnate\"] = \"\\uE0AA\";\n    // U+E0AB  Ornate X notehead in ellipse\n    Glyphs[\"noteheadXOrnateEllipse\"] = \"\\uE0AB\";\n    // U+E0A7  X notehead whole\n    Glyphs[\"noteheadXWhole\"] = \"\\uE0A7\";\n    // U+EC91  a (baseline)\n    Glyphs[\"octaveBaselineA\"] = \"\\uEC91\";\n    // U+EC93  b (baseline)\n    Glyphs[\"octaveBaselineB\"] = \"\\uEC93\";\n    // U+EC95  m (baseline)\n    Glyphs[\"octaveBaselineM\"] = \"\\uEC95\";\n    // U+EC97  v (baseline)\n    Glyphs[\"octaveBaselineV\"] = \"\\uEC97\";\n    // U+E51F  Bassa\n    Glyphs[\"octaveBassa\"] = \"\\uE51F\";\n    // U+EC90  Loco\n    Glyphs[\"octaveLoco\"] = \"\\uEC90\";\n    // U+E51A  Left parenthesis for octave signs\n    Glyphs[\"octaveParensLeft\"] = \"\\uE51A\";\n    // U+E51B  Right parenthesis for octave signs\n    Glyphs[\"octaveParensRight\"] = \"\\uE51B\";\n    // U+EC92  a (superscript)\n    Glyphs[\"octaveSuperscriptA\"] = \"\\uEC92\";\n    // U+EC94  b (superscript)\n    Glyphs[\"octaveSuperscriptB\"] = \"\\uEC94\";\n    // U+EC96  m (superscript)\n    Glyphs[\"octaveSuperscriptM\"] = \"\\uEC96\";\n    // U+EC98  v (superscript)\n    Glyphs[\"octaveSuperscriptV\"] = \"\\uEC98\";\n    // U+E233  One-handed roll (Stevens)\n    Glyphs[\"oneHandedRollStevens\"] = \"\\uE233\";\n    // U+EE2E  Two Fusae\n    Glyphs[\"organGerman2Fusae\"] = \"\\uEE2E\";\n    // U+EE2C  Two Minimae\n    Glyphs[\"organGerman2Minimae\"] = \"\\uEE2C\";\n    // U+EE19  Combining double octave line above\n    Glyphs[\"organGerman2OctaveUp\"] = \"\\uEE19\";\n    // U+EE2F  Two Semifusae\n    Glyphs[\"organGerman2Semifusae\"] = \"\\uEE2F\";\n    // U+EE2D  Two Semiminimae\n    Glyphs[\"organGerman2Semiminimae\"] = \"\\uEE2D\";\n    // U+EE32  Three Fusae\n    Glyphs[\"organGerman3Fusae\"] = \"\\uEE32\";\n    // U+EE30  Three Minimae\n    Glyphs[\"organGerman3Minimae\"] = \"\\uEE30\";\n    // U+EE33  Three Semifusae\n    Glyphs[\"organGerman3Semifusae\"] = \"\\uEE33\";\n    // U+EE31  Three Semiminimae\n    Glyphs[\"organGerman3Semiminimae\"] = \"\\uEE31\";\n    // U+EE36  Four Fusae\n    Glyphs[\"organGerman4Fusae\"] = \"\\uEE36\";\n    // U+EE34  Four Minimae\n    Glyphs[\"organGerman4Minimae\"] = \"\\uEE34\";\n    // U+EE37  Four Semifusae\n    Glyphs[\"organGerman4Semifusae\"] = \"\\uEE37\";\n    // U+EE35  Four Semiminimae\n    Glyphs[\"organGerman4Semiminimae\"] = \"\\uEE35\";\n    // U+EE3A  Five Fusae\n    Glyphs[\"organGerman5Fusae\"] = \"\\uEE3A\";\n    // U+EE38  Five Minimae\n    Glyphs[\"organGerman5Minimae\"] = \"\\uEE38\";\n    // U+EE3B  Five Semifusae\n    Glyphs[\"organGerman5Semifusae\"] = \"\\uEE3B\";\n    // U+EE39  Five Semiminimae\n    Glyphs[\"organGerman5Semiminimae\"] = \"\\uEE39\";\n    // U+EE3E  Six Fusae\n    Glyphs[\"organGerman6Fusae\"] = \"\\uEE3E\";\n    // U+EE3C  Six Minimae\n    Glyphs[\"organGerman6Minimae\"] = \"\\uEE3C\";\n    // U+EE3F  Six Semifusae\n    Glyphs[\"organGerman6Semifusae\"] = \"\\uEE3F\";\n    // U+EE3D  Six Semiminimae\n    Glyphs[\"organGerman6Semiminimae\"] = \"\\uEE3D\";\n    // U+EE15  German organ tablature small A\n    Glyphs[\"organGermanALower\"] = \"\\uEE15\";\n    // U+EE09  German organ tablature great A\n    Glyphs[\"organGermanAUpper\"] = \"\\uEE09\";\n    // U+EE1C  Rhythm Dot\n    Glyphs[\"organGermanAugmentationDot\"] = \"\\uEE1C\";\n    // U+EE16  German organ tablature small B\n    Glyphs[\"organGermanBLower\"] = \"\\uEE16\";\n    // U+EE0A  German organ tablature great B\n    Glyphs[\"organGermanBUpper\"] = \"\\uEE0A\";\n    // U+EE25  Brevis (Binary) Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerBrevis2\"] = \"\\uEE25\";\n    // U+EE24  Brevis (Ternary) Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerBrevis3\"] = \"\\uEE24\";\n    // U+EE1E  Minima Rest Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerMinimaRest\"] = \"\\uEE1E\";\n    // U+EE26  Semibrevis Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerSemibrevis\"] = \"\\uEE26\";\n    // U+EE1D  Semibrevis Rest Buxheimer Orgelbuch\n    Glyphs[\"organGermanBuxheimerSemibrevisRest\"] = \"\\uEE1D\";\n    // U+EE0C  German organ tablature small C\n    Glyphs[\"organGermanCLower\"] = \"\\uEE0C\";\n    // U+EE00  German organ tablature great C\n    Glyphs[\"organGermanCUpper\"] = \"\\uEE00\";\n    // U+EE0D  German organ tablature small Cis\n    Glyphs[\"organGermanCisLower\"] = \"\\uEE0D\";\n    // U+EE01  German organ tablature great Cis\n    Glyphs[\"organGermanCisUpper\"] = \"\\uEE01\";\n    // U+EE0E  German organ tablature small D\n    Glyphs[\"organGermanDLower\"] = \"\\uEE0E\";\n    // U+EE02  German organ tablature great D\n    Glyphs[\"organGermanDUpper\"] = \"\\uEE02\";\n    // U+EE0F  German organ tablature small Dis\n    Glyphs[\"organGermanDisLower\"] = \"\\uEE0F\";\n    // U+EE03  German organ tablature great Dis\n    Glyphs[\"organGermanDisUpper\"] = \"\\uEE03\";\n    // U+EE10  German organ tablature small E\n    Glyphs[\"organGermanELower\"] = \"\\uEE10\";\n    // U+EE04  German organ tablature great E\n    Glyphs[\"organGermanEUpper\"] = \"\\uEE04\";\n    // U+EE11  German organ tablature small F\n    Glyphs[\"organGermanFLower\"] = \"\\uEE11\";\n    // U+EE05  German organ tablature great F\n    Glyphs[\"organGermanFUpper\"] = \"\\uEE05\";\n    // U+EE12  German organ tablature small Fis\n    Glyphs[\"organGermanFisLower\"] = \"\\uEE12\";\n    // U+EE06  German organ tablature great Fis\n    Glyphs[\"organGermanFisUpper\"] = \"\\uEE06\";\n    // U+EE2A  Fusa\n    Glyphs[\"organGermanFusa\"] = \"\\uEE2A\";\n    // U+EE22  Fusa Rest\n    Glyphs[\"organGermanFusaRest\"] = \"\\uEE22\";\n    // U+EE13  German organ tablature small G\n    Glyphs[\"organGermanGLower\"] = \"\\uEE13\";\n    // U+EE07  German organ tablature great G\n    Glyphs[\"organGermanGUpper\"] = \"\\uEE07\";\n    // U+EE14  German organ tablature small Gis\n    Glyphs[\"organGermanGisLower\"] = \"\\uEE14\";\n    // U+EE08  German organ tablature great Gis\n    Glyphs[\"organGermanGisUpper\"] = \"\\uEE08\";\n    // U+EE17  German organ tablature small H\n    Glyphs[\"organGermanHLower\"] = \"\\uEE17\";\n    // U+EE0B  German organ tablature great H\n    Glyphs[\"organGermanHUpper\"] = \"\\uEE0B\";\n    // U+EE28  Minima\n    Glyphs[\"organGermanMinima\"] = \"\\uEE28\";\n    // U+EE20  Minima Rest\n    Glyphs[\"organGermanMinimaRest\"] = \"\\uEE20\";\n    // U+EE1A  Combining single octave line below\n    Glyphs[\"organGermanOctaveDown\"] = \"\\uEE1A\";\n    // U+EE18  Combining single octave line above\n    Glyphs[\"organGermanOctaveUp\"] = \"\\uEE18\";\n    // U+EE27  Semibrevis\n    Glyphs[\"organGermanSemibrevis\"] = \"\\uEE27\";\n    // U+EE1F  Semibrevis Rest\n    Glyphs[\"organGermanSemibrevisRest\"] = \"\\uEE1F\";\n    // U+EE2B  Semifusa\n    Glyphs[\"organGermanSemifusa\"] = \"\\uEE2B\";\n    // U+EE23  Semifusa Rest\n    Glyphs[\"organGermanSemifusaRest\"] = \"\\uEE23\";\n    // U+EE29  Semiminima\n    Glyphs[\"organGermanSemiminima\"] = \"\\uEE29\";\n    // U+EE21  Semiminima Rest\n    Glyphs[\"organGermanSemiminimaRest\"] = \"\\uEE21\";\n    // U+EE1B  Tie\n    Glyphs[\"organGermanTie\"] = \"\\uEE1B\";\n    // U+E59A  Ornament bottom left concave stroke\n    Glyphs[\"ornamentBottomLeftConcaveStroke\"] = \"\\uE59A\";\n    // U+E59B  Ornament bottom left concave stroke, large\n    Glyphs[\"ornamentBottomLeftConcaveStrokeLarge\"] = \"\\uE59B\";\n    // U+E59C  Ornament bottom left convex stroke\n    Glyphs[\"ornamentBottomLeftConvexStroke\"] = \"\\uE59C\";\n    // U+E5A7  Ornament bottom right concave stroke\n    Glyphs[\"ornamentBottomRightConcaveStroke\"] = \"\\uE5A7\";\n    // U+E5A8  Ornament bottom right convex stroke\n    Glyphs[\"ornamentBottomRightConvexStroke\"] = \"\\uE5A8\";\n    // U+E581  Comma\n    Glyphs[\"ornamentComma\"] = \"\\uE581\";\n    // U+E57E  Double oblique straight lines NW-SE\n    Glyphs[\"ornamentDoubleObliqueLinesAfterNote\"] = \"\\uE57E\";\n    // U+E57D  Double oblique straight lines SW-NE\n    Glyphs[\"ornamentDoubleObliqueLinesBeforeNote\"] = \"\\uE57D\";\n    // U+E578  Curve below\n    Glyphs[\"ornamentDownCurve\"] = \"\\uE578\";\n    // U+E56F  Haydn ornament\n    Glyphs[\"ornamentHaydn\"] = \"\\uE56F\";\n    // U+E592  Ornament high left concave stroke\n    Glyphs[\"ornamentHighLeftConcaveStroke\"] = \"\\uE592\";\n    // U+E593  Ornament high left convex stroke\n    Glyphs[\"ornamentHighLeftConvexStroke\"] = \"\\uE593\";\n    // U+E5A2  Ornament high right concave stroke\n    Glyphs[\"ornamentHighRightConcaveStroke\"] = \"\\uE5A2\";\n    // U+E5A3  Ornament high right convex stroke\n    Glyphs[\"ornamentHighRightConvexStroke\"] = \"\\uE5A3\";\n    // U+E576  Hook after note\n    Glyphs[\"ornamentHookAfterNote\"] = \"\\uE576\";\n    // U+E575  Hook before note\n    Glyphs[\"ornamentHookBeforeNote\"] = \"\\uE575\";\n    // U+E572  Left-facing half circle\n    Glyphs[\"ornamentLeftFacingHalfCircle\"] = \"\\uE572\";\n    // U+E574  Left-facing hook\n    Glyphs[\"ornamentLeftFacingHook\"] = \"\\uE574\";\n    // U+E597  Ornament left +\n    Glyphs[\"ornamentLeftPlus\"] = \"\\uE597\";\n    // U+E596  Ornament left shake t\n    Glyphs[\"ornamentLeftShakeT\"] = \"\\uE596\";\n    // U+E594  Ornament left vertical stroke\n    Glyphs[\"ornamentLeftVerticalStroke\"] = \"\\uE594\";\n    // U+E595  Ornament left vertical stroke with cross (+)\n    Glyphs[\"ornamentLeftVerticalStrokeWithCross\"] = \"\\uE595\";\n    // U+E598  Ornament low left concave stroke\n    Glyphs[\"ornamentLowLeftConcaveStroke\"] = \"\\uE598\";\n    // U+E599  Ornament low left convex stroke\n    Glyphs[\"ornamentLowLeftConvexStroke\"] = \"\\uE599\";\n    // U+E5A5  Ornament low right concave stroke\n    Glyphs[\"ornamentLowRightConcaveStroke\"] = \"\\uE5A5\";\n    // U+E5A6  Ornament low right convex stroke\n    Glyphs[\"ornamentLowRightConvexStroke\"] = \"\\uE5A6\";\n    // U+E59F  Ornament middle vertical stroke\n    Glyphs[\"ornamentMiddleVerticalStroke\"] = \"\\uE59F\";\n    // U+E56D  Mordent\n    Glyphs[\"ornamentMordent\"] = \"\\uE56D\";\n    // U+E57C  Oblique straight line NW-SE\n    Glyphs[\"ornamentObliqueLineAfterNote\"] = \"\\uE57C\";\n    // U+E57B  Oblique straight line SW-NE\n    Glyphs[\"ornamentObliqueLineBeforeNote\"] = \"\\uE57B\";\n    // U+E580  Oblique straight line tilted NW-SE\n    Glyphs[\"ornamentObliqueLineHorizAfterNote\"] = \"\\uE580\";\n    // U+E57F  Oblique straight line tilted SW-NE\n    Glyphs[\"ornamentObliqueLineHorizBeforeNote\"] = \"\\uE57F\";\n    // U+EA21  Oriscus\n    Glyphs[\"ornamentOriscus\"] = \"\\uEA21\";\n    // U+E588  Pincé (Couperin)\n    Glyphs[\"ornamentPinceCouperin\"] = \"\\uE588\";\n    // U+E570  Port de voix\n    Glyphs[\"ornamentPortDeVoixV\"] = \"\\uE570\";\n    // U+E5B2  Supported appoggiatura trill\n    Glyphs[\"ornamentPrecompAppoggTrill\"] = \"\\uE5B2\";\n    // U+E5B3  Supported appoggiatura trill with two-note suffix\n    Glyphs[\"ornamentPrecompAppoggTrillSuffix\"] = \"\\uE5B3\";\n    // U+E5BE  Cadence\n    Glyphs[\"ornamentPrecompCadence\"] = \"\\uE5BE\";\n    // U+E5C1  Cadence with upper prefix\n    Glyphs[\"ornamentPrecompCadenceUpperPrefix\"] = \"\\uE5C1\";\n    // U+E5C2  Cadence with upper prefix and turn\n    Glyphs[\"ornamentPrecompCadenceUpperPrefixTurn\"] = \"\\uE5C2\";\n    // U+E5BF  Cadence with turn\n    Glyphs[\"ornamentPrecompCadenceWithTurn\"] = \"\\uE5BF\";\n    // U+E5B1  Descending slide\n    Glyphs[\"ornamentPrecompDescendingSlide\"] = \"\\uE5B1\";\n    // U+E5C0  Double cadence with lower prefix\n    Glyphs[\"ornamentPrecompDoubleCadenceLowerPrefix\"] = \"\\uE5C0\";\n    // U+E5C3  Double cadence with upper prefix\n    Glyphs[\"ornamentPrecompDoubleCadenceUpperPrefix\"] = \"\\uE5C3\";\n    // U+E5C4  Double cadence with upper prefix and turn\n    Glyphs[\"ornamentPrecompDoubleCadenceUpperPrefixTurn\"] = \"\\uE5C4\";\n    // U+E5C7  Inverted mordent with upper prefix\n    Glyphs[\"ornamentPrecompInvertedMordentUpperPrefix\"] = \"\\uE5C7\";\n    // U+E5C5  Mordent with release\n    Glyphs[\"ornamentPrecompMordentRelease\"] = \"\\uE5C5\";\n    // U+E5C6  Mordent with upper prefix\n    Glyphs[\"ornamentPrecompMordentUpperPrefix\"] = \"\\uE5C6\";\n    // U+E5BC  Pre-beat port de voix followed by multiple mordent (Dandrieu)\n    Glyphs[\"ornamentPrecompPortDeVoixMordent\"] = \"\\uE5BC\";\n    // U+E5B0  Slide\n    Glyphs[\"ornamentPrecompSlide\"] = \"\\uE5B0\";\n    // U+E5B8  Slide-trill with two-note suffix (J.S. Bach)\n    Glyphs[\"ornamentPrecompSlideTrillBach\"] = \"\\uE5B8\";\n    // U+E5B5  Slide-trill (D'Anglebert)\n    Glyphs[\"ornamentPrecompSlideTrillDAnglebert\"] = \"\\uE5B5\";\n    // U+E5B6  Slide-trill with one-note suffix (Marpurg)\n    Glyphs[\"ornamentPrecompSlideTrillMarpurg\"] = \"\\uE5B6\";\n    // U+E5B9  Slide-trill (Muffat)\n    Glyphs[\"ornamentPrecompSlideTrillMuffat\"] = \"\\uE5B9\";\n    // U+E5BA  Slide-trill with two-note suffix (Muffat)\n    Glyphs[\"ornamentPrecompSlideTrillSuffixMuffat\"] = \"\\uE5BA\";\n    // U+E5C8  Trill with lower suffix\n    Glyphs[\"ornamentPrecompTrillLowerSuffix\"] = \"\\uE5C8\";\n    // U+E5BB  Trill with two-note suffix (Dandrieu)\n    Glyphs[\"ornamentPrecompTrillSuffixDandrieu\"] = \"\\uE5BB\";\n    // U+E5BD  Trill with mordent\n    Glyphs[\"ornamentPrecompTrillWithMordent\"] = \"\\uE5BD\";\n    // U+E5B7  Turn-trill with two-note suffix (J.S. Bach)\n    Glyphs[\"ornamentPrecompTurnTrillBach\"] = \"\\uE5B7\";\n    // U+E5B4  Turn-trill (D'Anglebert)\n    Glyphs[\"ornamentPrecompTurnTrillDAnglebert\"] = \"\\uE5B4\";\n    // U+EA20  Quilisma\n    Glyphs[\"ornamentQuilisma\"] = \"\\uEA20\";\n    // U+E571  Right-facing half circle\n    Glyphs[\"ornamentRightFacingHalfCircle\"] = \"\\uE571\";\n    // U+E573  Right-facing hook\n    Glyphs[\"ornamentRightFacingHook\"] = \"\\uE573\";\n    // U+E5A4  Ornament right vertical stroke\n    Glyphs[\"ornamentRightVerticalStroke\"] = \"\\uE5A4\";\n    // U+E587  Schleifer (long mordent)\n    Glyphs[\"ornamentSchleifer\"] = \"\\uE587\";\n    // U+E582  Shake\n    Glyphs[\"ornamentShake3\"] = \"\\uE582\";\n    // U+E584  Shake (Muffat)\n    Glyphs[\"ornamentShakeMuffat1\"] = \"\\uE584\";\n    // U+E57A  Short oblique straight line NW-SE\n    Glyphs[\"ornamentShortObliqueLineAfterNote\"] = \"\\uE57A\";\n    // U+E579  Short oblique straight line SW-NE\n    Glyphs[\"ornamentShortObliqueLineBeforeNote\"] = \"\\uE579\";\n    // U+E56C  Short trill\n    Glyphs[\"ornamentShortTrill\"] = \"\\uE56C\";\n    // U+E590  Ornament top left concave stroke\n    Glyphs[\"ornamentTopLeftConcaveStroke\"] = \"\\uE590\";\n    // U+E591  Ornament top left convex stroke\n    Glyphs[\"ornamentTopLeftConvexStroke\"] = \"\\uE591\";\n    // U+E5A0  Ornament top right concave stroke\n    Glyphs[\"ornamentTopRightConcaveStroke\"] = \"\\uE5A0\";\n    // U+E5A1  Ornament top right convex stroke\n    Glyphs[\"ornamentTopRightConvexStroke\"] = \"\\uE5A1\";\n    // U+E56E  Tremblement\n    Glyphs[\"ornamentTremblement\"] = \"\\uE56E\";\n    // U+E589  Tremblement appuyé (Couperin)\n    Glyphs[\"ornamentTremblementCouperin\"] = \"\\uE589\";\n    // U+E566  Trill\n    Glyphs[\"ornamentTrill\"] = \"\\uE566\";\n    // U+E567  Turn\n    Glyphs[\"ornamentTurn\"] = \"\\uE567\";\n    // U+E568  Inverted turn\n    Glyphs[\"ornamentTurnInverted\"] = \"\\uE568\";\n    // U+E569  Turn with slash\n    Glyphs[\"ornamentTurnSlash\"] = \"\\uE569\";\n    // U+E56A  Turn up\n    Glyphs[\"ornamentTurnUp\"] = \"\\uE56A\";\n    // U+E56B  Inverted turn up\n    Glyphs[\"ornamentTurnUpS\"] = \"\\uE56B\";\n    // U+E577  Curve above\n    Glyphs[\"ornamentUpCurve\"] = \"\\uE577\";\n    // U+E583  Vertical line\n    Glyphs[\"ornamentVerticalLine\"] = \"\\uE583\";\n    // U+E59D  Ornament zig-zag line without right-hand end\n    Glyphs[\"ornamentZigZagLineNoRightEnd\"] = \"\\uE59D\";\n    // U+E59E  Ornament zig-zag line with right-hand end\n    Glyphs[\"ornamentZigZagLineWithRightEnd\"] = \"\\uE59E\";\n    // U+E510  Ottava\n    Glyphs[\"ottava\"] = \"\\uE510\";\n    // U+E511  Ottava alta\n    Glyphs[\"ottavaAlta\"] = \"\\uE511\";\n    // U+E512  Ottava bassa\n    Glyphs[\"ottavaBassa\"] = \"\\uE512\";\n    // U+E513  Ottava bassa (ba)\n    Glyphs[\"ottavaBassaBa\"] = \"\\uE513\";\n    // U+E51C  Ottava bassa (8vb)\n    Glyphs[\"ottavaBassaVb\"] = \"\\uE51C\";\n    // U+E22B  Penderecki unmeasured tremolo\n    Glyphs[\"pendereckiTremolo\"] = \"\\uE22B\";\n    // U+E717  Agogo\n    Glyphs[\"pictAgogo\"] = \"\\uE717\";\n    // U+E712  Almglocken\n    Glyphs[\"pictAlmglocken\"] = \"\\uE712\";\n    // U+E701  Anvil\n    Glyphs[\"pictAnvil\"] = \"\\uE701\";\n    // U+E6C3  Bamboo tube chimes\n    Glyphs[\"pictBambooChimes\"] = \"\\uE6C3\";\n    // U+E6FB  Bamboo scraper\n    Glyphs[\"pictBambooScraper\"] = \"\\uE6FB\";\n    // U+E6D4  Bass drum\n    Glyphs[\"pictBassDrum\"] = \"\\uE6D4\";\n    // U+E6D5  Bass drum on side\n    Glyphs[\"pictBassDrumOnSide\"] = \"\\uE6D5\";\n    // U+E7DE  Bow\n    Glyphs[\"pictBeaterBow\"] = \"\\uE7DE\";\n    // U+E7EB  Box for percussion beater\n    Glyphs[\"pictBeaterBox\"] = \"\\uE7EB\";\n    // U+E7DA  Brass mallets down\n    Glyphs[\"pictBeaterBrassMalletsDown\"] = \"\\uE7DA\";\n    // U+E7EE  Brass mallets left\n    Glyphs[\"pictBeaterBrassMalletsLeft\"] = \"\\uE7EE\";\n    // U+E7ED  Brass mallets right\n    Glyphs[\"pictBeaterBrassMalletsRight\"] = \"\\uE7ED\";\n    // U+E7D9  Brass mallets up\n    Glyphs[\"pictBeaterBrassMalletsUp\"] = \"\\uE7D9\";\n    // U+E7EA  Combining dashed circle for round beaters (plated)\n    Glyphs[\"pictBeaterCombiningDashedCircle\"] = \"\\uE7EA\";\n    // U+E7E9  Combining parentheses for round beaters (padded)\n    Glyphs[\"pictBeaterCombiningParentheses\"] = \"\\uE7E9\";\n    // U+E7A1  Double bass drum stick down\n    Glyphs[\"pictBeaterDoubleBassDrumDown\"] = \"\\uE7A1\";\n    // U+E7A0  Double bass drum stick up\n    Glyphs[\"pictBeaterDoubleBassDrumUp\"] = \"\\uE7A0\";\n    // U+E7E4  Finger\n    Glyphs[\"pictBeaterFinger\"] = \"\\uE7E4\";\n    // U+E7E6  Fingernails\n    Glyphs[\"pictBeaterFingernails\"] = \"\\uE7E6\";\n    // U+E7E5  Fist\n    Glyphs[\"pictBeaterFist\"] = \"\\uE7E5\";\n    // U+E7DD  Guiro scraper\n    Glyphs[\"pictBeaterGuiroScraper\"] = \"\\uE7DD\";\n    // U+E7E1  Hammer\n    Glyphs[\"pictBeaterHammer\"] = \"\\uE7E1\";\n    // U+E7D0  Metal hammer, down\n    Glyphs[\"pictBeaterHammerMetalDown\"] = \"\\uE7D0\";\n    // U+E7CF  Metal hammer, up\n    Glyphs[\"pictBeaterHammerMetalUp\"] = \"\\uE7CF\";\n    // U+E7CE  Plastic hammer, down\n    Glyphs[\"pictBeaterHammerPlasticDown\"] = \"\\uE7CE\";\n    // U+E7CD  Plastic hammer, up\n    Glyphs[\"pictBeaterHammerPlasticUp\"] = \"\\uE7CD\";\n    // U+E7CC  Wooden hammer, down\n    Glyphs[\"pictBeaterHammerWoodDown\"] = \"\\uE7CC\";\n    // U+E7CB  Wooden hammer, up\n    Glyphs[\"pictBeaterHammerWoodUp\"] = \"\\uE7CB\";\n    // U+E7E3  Hand\n    Glyphs[\"pictBeaterHand\"] = \"\\uE7E3\";\n    // U+E79D  Hard bass drum stick down\n    Glyphs[\"pictBeaterHardBassDrumDown\"] = \"\\uE79D\";\n    // U+E79C  Hard bass drum stick up\n    Glyphs[\"pictBeaterHardBassDrumUp\"] = \"\\uE79C\";\n    // U+E785  Hard glockenspiel stick down\n    Glyphs[\"pictBeaterHardGlockenspielDown\"] = \"\\uE785\";\n    // U+E787  Hard glockenspiel stick left\n    Glyphs[\"pictBeaterHardGlockenspielLeft\"] = \"\\uE787\";\n    // U+E786  Hard glockenspiel stick right\n    Glyphs[\"pictBeaterHardGlockenspielRight\"] = \"\\uE786\";\n    // U+E784  Hard glockenspiel stick up\n    Glyphs[\"pictBeaterHardGlockenspielUp\"] = \"\\uE784\";\n    // U+E791  Hard timpani stick down\n    Glyphs[\"pictBeaterHardTimpaniDown\"] = \"\\uE791\";\n    // U+E793  Hard timpani stick left\n    Glyphs[\"pictBeaterHardTimpaniLeft\"] = \"\\uE793\";\n    // U+E792  Hard timpani stick right\n    Glyphs[\"pictBeaterHardTimpaniRight\"] = \"\\uE792\";\n    // U+E790  Hard timpani stick up\n    Glyphs[\"pictBeaterHardTimpaniUp\"] = \"\\uE790\";\n    // U+E779  Hard xylophone stick down\n    Glyphs[\"pictBeaterHardXylophoneDown\"] = \"\\uE779\";\n    // U+E77B  Hard xylophone stick left\n    Glyphs[\"pictBeaterHardXylophoneLeft\"] = \"\\uE77B\";\n    // U+E77A  Hard xylophone stick right\n    Glyphs[\"pictBeaterHardXylophoneRight\"] = \"\\uE77A\";\n    // U+E778  Hard xylophone stick up\n    Glyphs[\"pictBeaterHardXylophoneUp\"] = \"\\uE778\";\n    // U+E7AB  Hard yarn beater down\n    Glyphs[\"pictBeaterHardYarnDown\"] = \"\\uE7AB\";\n    // U+E7AD  Hard yarn beater left\n    Glyphs[\"pictBeaterHardYarnLeft\"] = \"\\uE7AD\";\n    // U+E7AC  Hard yarn beater right\n    Glyphs[\"pictBeaterHardYarnRight\"] = \"\\uE7AC\";\n    // U+E7AA  Hard yarn beater up\n    Glyphs[\"pictBeaterHardYarnUp\"] = \"\\uE7AA\";\n    // U+E7D4  Jazz sticks down\n    Glyphs[\"pictBeaterJazzSticksDown\"] = \"\\uE7D4\";\n    // U+E7D3  Jazz sticks up\n    Glyphs[\"pictBeaterJazzSticksUp\"] = \"\\uE7D3\";\n    // U+E7E2  Knitting needle\n    Glyphs[\"pictBeaterKnittingNeedle\"] = \"\\uE7E2\";\n    // U+E7DF  Chime hammer up\n    Glyphs[\"pictBeaterMallet\"] = \"\\uE7DF\";\n    // U+E7EC  Chime hammer down\n    Glyphs[\"pictBeaterMalletDown\"] = \"\\uE7EC\";\n    // U+E79B  Medium bass drum stick down\n    Glyphs[\"pictBeaterMediumBassDrumDown\"] = \"\\uE79B\";\n    // U+E79A  Medium bass drum stick up\n    Glyphs[\"pictBeaterMediumBassDrumUp\"] = \"\\uE79A\";\n    // U+E78D  Medium timpani stick down\n    Glyphs[\"pictBeaterMediumTimpaniDown\"] = \"\\uE78D\";\n    // U+E78F  Medium timpani stick left\n    Glyphs[\"pictBeaterMediumTimpaniLeft\"] = \"\\uE78F\";\n    // U+E78E  Medium timpani stick right\n    Glyphs[\"pictBeaterMediumTimpaniRight\"] = \"\\uE78E\";\n    // U+E78C  Medium timpani stick up\n    Glyphs[\"pictBeaterMediumTimpaniUp\"] = \"\\uE78C\";\n    // U+E775  Medium xylophone stick down\n    Glyphs[\"pictBeaterMediumXylophoneDown\"] = \"\\uE775\";\n    // U+E777  Medium xylophone stick left\n    Glyphs[\"pictBeaterMediumXylophoneLeft\"] = \"\\uE777\";\n    // U+E776  Medium xylophone stick right\n    Glyphs[\"pictBeaterMediumXylophoneRight\"] = \"\\uE776\";\n    // U+E774  Medium xylophone stick up\n    Glyphs[\"pictBeaterMediumXylophoneUp\"] = \"\\uE774\";\n    // U+E7A7  Medium yarn beater down\n    Glyphs[\"pictBeaterMediumYarnDown\"] = \"\\uE7A7\";\n    // U+E7A9  Medium yarn beater left\n    Glyphs[\"pictBeaterMediumYarnLeft\"] = \"\\uE7A9\";\n    // U+E7A8  Medium yarn beater right\n    Glyphs[\"pictBeaterMediumYarnRight\"] = \"\\uE7A8\";\n    // U+E7A6  Medium yarn beater up\n    Glyphs[\"pictBeaterMediumYarnUp\"] = \"\\uE7A6\";\n    // U+E79F  Metal bass drum stick down\n    Glyphs[\"pictBeaterMetalBassDrumDown\"] = \"\\uE79F\";\n    // U+E79E  Metal bass drum stick up\n    Glyphs[\"pictBeaterMetalBassDrumUp\"] = \"\\uE79E\";\n    // U+E7C8  Metal beater down\n    Glyphs[\"pictBeaterMetalDown\"] = \"\\uE7C8\";\n    // U+E7E0  Metal hammer\n    Glyphs[\"pictBeaterMetalHammer\"] = \"\\uE7E0\";\n    // U+E7CA  Metal beater, left\n    Glyphs[\"pictBeaterMetalLeft\"] = \"\\uE7CA\";\n    // U+E7C9  Metal beater, right\n    Glyphs[\"pictBeaterMetalRight\"] = \"\\uE7C9\";\n    // U+E7C7  Metal beater, up\n    Glyphs[\"pictBeaterMetalUp\"] = \"\\uE7C7\";\n    // U+E7D2  Snare sticks down\n    Glyphs[\"pictBeaterSnareSticksDown\"] = \"\\uE7D2\";\n    // U+E7D1  Snare sticks up\n    Glyphs[\"pictBeaterSnareSticksUp\"] = \"\\uE7D1\";\n    // U+E799  Soft bass drum stick down\n    Glyphs[\"pictBeaterSoftBassDrumDown\"] = \"\\uE799\";\n    // U+E798  Soft bass drum stick up\n    Glyphs[\"pictBeaterSoftBassDrumUp\"] = \"\\uE798\";\n    // U+E781  Soft glockenspiel stick down\n    Glyphs[\"pictBeaterSoftGlockenspielDown\"] = \"\\uE781\";\n    // U+E783  Soft glockenspiel stick left\n    Glyphs[\"pictBeaterSoftGlockenspielLeft\"] = \"\\uE783\";\n    // U+E782  Soft glockenspiel stick right\n    Glyphs[\"pictBeaterSoftGlockenspielRight\"] = \"\\uE782\";\n    // U+E780  Soft glockenspiel stick up\n    Glyphs[\"pictBeaterSoftGlockenspielUp\"] = \"\\uE780\";\n    // U+E789  Soft timpani stick down\n    Glyphs[\"pictBeaterSoftTimpaniDown\"] = \"\\uE789\";\n    // U+E78B  Soft timpani stick left\n    Glyphs[\"pictBeaterSoftTimpaniLeft\"] = \"\\uE78B\";\n    // U+E78A  Soft timpani stick right\n    Glyphs[\"pictBeaterSoftTimpaniRight\"] = \"\\uE78A\";\n    // U+E788  Soft timpani stick up\n    Glyphs[\"pictBeaterSoftTimpaniUp\"] = \"\\uE788\";\n    // U+E7DB  Soft xylophone beaters\n    Glyphs[\"pictBeaterSoftXylophone\"] = \"\\uE7DB\";\n    // U+E771  Soft xylophone stick down\n    Glyphs[\"pictBeaterSoftXylophoneDown\"] = \"\\uE771\";\n    // U+E773  Soft xylophone stick left\n    Glyphs[\"pictBeaterSoftXylophoneLeft\"] = \"\\uE773\";\n    // U+E772  Soft xylophone stick right\n    Glyphs[\"pictBeaterSoftXylophoneRight\"] = \"\\uE772\";\n    // U+E770  Soft xylophone stick up\n    Glyphs[\"pictBeaterSoftXylophoneUp\"] = \"\\uE770\";\n    // U+E7A3  Soft yarn beater down\n    Glyphs[\"pictBeaterSoftYarnDown\"] = \"\\uE7A3\";\n    // U+E7A5  Soft yarn beater left\n    Glyphs[\"pictBeaterSoftYarnLeft\"] = \"\\uE7A5\";\n    // U+E7A4  Soft yarn beater right\n    Glyphs[\"pictBeaterSoftYarnRight\"] = \"\\uE7A4\";\n    // U+E7A2  Soft yarn beater up\n    Glyphs[\"pictBeaterSoftYarnUp\"] = \"\\uE7A2\";\n    // U+E7DC  Spoon-shaped wooden mallet\n    Glyphs[\"pictBeaterSpoonWoodenMallet\"] = \"\\uE7DC\";\n    // U+E7AF  Superball beater down\n    Glyphs[\"pictBeaterSuperballDown\"] = \"\\uE7AF\";\n    // U+E7B1  Superball beater left\n    Glyphs[\"pictBeaterSuperballLeft\"] = \"\\uE7B1\";\n    // U+E7B0  Superball beater right\n    Glyphs[\"pictBeaterSuperballRight\"] = \"\\uE7B0\";\n    // U+E7AE  Superball beater up\n    Glyphs[\"pictBeaterSuperballUp\"] = \"\\uE7AE\";\n    // U+E7D6  Triangle beater down\n    Glyphs[\"pictBeaterTriangleDown\"] = \"\\uE7D6\";\n    // U+E7EF  Triangle beater plain\n    Glyphs[\"pictBeaterTrianglePlain\"] = \"\\uE7EF\";\n    // U+E7D5  Triangle beater up\n    Glyphs[\"pictBeaterTriangleUp\"] = \"\\uE7D5\";\n    // U+E7D8  Wire brushes down\n    Glyphs[\"pictBeaterWireBrushesDown\"] = \"\\uE7D8\";\n    // U+E7D7  Wire brushes up\n    Glyphs[\"pictBeaterWireBrushesUp\"] = \"\\uE7D7\";\n    // U+E795  Wood timpani stick down\n    Glyphs[\"pictBeaterWoodTimpaniDown\"] = \"\\uE795\";\n    // U+E797  Wood timpani stick left\n    Glyphs[\"pictBeaterWoodTimpaniLeft\"] = \"\\uE797\";\n    // U+E796  Wood timpani stick right\n    Glyphs[\"pictBeaterWoodTimpaniRight\"] = \"\\uE796\";\n    // U+E794  Wood timpani stick up\n    Glyphs[\"pictBeaterWoodTimpaniUp\"] = \"\\uE794\";\n    // U+E77D  Wood xylophone stick down\n    Glyphs[\"pictBeaterWoodXylophoneDown\"] = \"\\uE77D\";\n    // U+E77F  Wood xylophone stick left\n    Glyphs[\"pictBeaterWoodXylophoneLeft\"] = \"\\uE77F\";\n    // U+E77E  Wood xylophone stick right\n    Glyphs[\"pictBeaterWoodXylophoneRight\"] = \"\\uE77E\";\n    // U+E77C  Wood xylophone stick up\n    Glyphs[\"pictBeaterWoodXylophoneUp\"] = \"\\uE77C\";\n    // U+E714  Bell\n    Glyphs[\"pictBell\"] = \"\\uE714\";\n    // U+E72A  Bell of cymbal\n    Glyphs[\"pictBellOfCymbal\"] = \"\\uE72A\";\n    // U+E713  Bell plate\n    Glyphs[\"pictBellPlate\"] = \"\\uE713\";\n    // U+E71A  Bell tree\n    Glyphs[\"pictBellTree\"] = \"\\uE71A\";\n    // U+E751  Bird whistle\n    Glyphs[\"pictBirdWhistle\"] = \"\\uE751\";\n    // U+E6F7  Board clapper\n    Glyphs[\"pictBoardClapper\"] = \"\\uE6F7\";\n    // U+E6DD  Bongos\n    Glyphs[\"pictBongos\"] = \"\\uE6DD\";\n    // U+E6E1  Brake drum\n    Glyphs[\"pictBrakeDrum\"] = \"\\uE6E1\";\n    // U+E743  Cabasa\n    Glyphs[\"pictCabasa\"] = \"\\uE743\";\n    // U+E761  Cannon\n    Glyphs[\"pictCannon\"] = \"\\uE761\";\n    // U+E755  Car horn\n    Glyphs[\"pictCarHorn\"] = \"\\uE755\";\n    // U+E6F8  Castanets\n    Glyphs[\"pictCastanets\"] = \"\\uE6F8\";\n    // U+E6F9  Castanets with handle\n    Glyphs[\"pictCastanetsWithHandle\"] = \"\\uE6F9\";\n    // U+E6B0  Celesta\n    Glyphs[\"pictCelesta\"] = \"\\uE6B0\";\n    // U+E716  Cencerro\n    Glyphs[\"pictCencerro\"] = \"\\uE716\";\n    // U+E7FE  Center (Weinberg)\n    Glyphs[\"pictCenter1\"] = \"\\uE7FE\";\n    // U+E7FF  Center (Ghent)\n    Glyphs[\"pictCenter2\"] = \"\\uE7FF\";\n    // U+E800  Center (Caltabiano)\n    Glyphs[\"pictCenter3\"] = \"\\uE800\";\n    // U+E748  Chain rattle\n    Glyphs[\"pictChainRattle\"] = \"\\uE748\";\n    // U+E6C2  Chimes\n    Glyphs[\"pictChimes\"] = \"\\uE6C2\";\n    // U+E726  Chinese cymbal\n    Glyphs[\"pictChineseCymbal\"] = \"\\uE726\";\n    // U+E805  Choke (Weinberg)\n    Glyphs[\"pictChokeCymbal\"] = \"\\uE805\";\n    // U+E6F2  Claves\n    Glyphs[\"pictClaves\"] = \"\\uE6F2\";\n    // U+E7E7  Coins\n    Glyphs[\"pictCoins\"] = \"\\uE7E7\";\n    // U+E6DE  Conga\n    Glyphs[\"pictConga\"] = \"\\uE6DE\";\n    // U+E711  Cow bell\n    Glyphs[\"pictCowBell\"] = \"\\uE711\";\n    // U+E720  Crash cymbals\n    Glyphs[\"pictCrashCymbals\"] = \"\\uE720\";\n    // U+E6AE  Crotales\n    Glyphs[\"pictCrotales\"] = \"\\uE6AE\";\n    // U+E80C  Combining crush for stem\n    Glyphs[\"pictCrushStem\"] = \"\\uE80C\";\n    // U+E6E4  Cuica\n    Glyphs[\"pictCuica\"] = \"\\uE6E4\";\n    // U+E728  Cymbal tongs\n    Glyphs[\"pictCymbalTongs\"] = \"\\uE728\";\n    // U+E7F9  Damp\n    Glyphs[\"pictDamp1\"] = \"\\uE7F9\";\n    // U+E7FA  Damp 2\n    Glyphs[\"pictDamp2\"] = \"\\uE7FA\";\n    // U+E7FB  Damp 3\n    Glyphs[\"pictDamp3\"] = \"\\uE7FB\";\n    // U+E7FC  Damp 4\n    Glyphs[\"pictDamp4\"] = \"\\uE7FC\";\n    // U+E80D  Combining X for stem (dead note)\n    Glyphs[\"pictDeadNoteStem\"] = \"\\uE80D\";\n    // U+E7E8  Drum stick\n    Glyphs[\"pictDrumStick\"] = \"\\uE7E8\";\n    // U+E757  Duck call\n    Glyphs[\"pictDuckCall\"] = \"\\uE757\";\n    // U+E729  Edge of cymbal\n    Glyphs[\"pictEdgeOfCymbal\"] = \"\\uE729\";\n    // U+E6A9  Empty trapezoid\n    Glyphs[\"pictEmptyTrap\"] = \"\\uE6A9\";\n    // U+E727  Finger cymbals\n    Glyphs[\"pictFingerCymbals\"] = \"\\uE727\";\n    // U+E740  Flexatone\n    Glyphs[\"pictFlexatone\"] = \"\\uE740\";\n    // U+E6F5  Football rattle\n    Glyphs[\"pictFootballRatchet\"] = \"\\uE6F5\";\n    // U+E765  Glass harmonica\n    Glyphs[\"pictGlassHarmonica\"] = \"\\uE765\";\n    // U+E764  Glass harp\n    Glyphs[\"pictGlassHarp\"] = \"\\uE764\";\n    // U+E6C6  Glass plate chimes\n    Glyphs[\"pictGlassPlateChimes\"] = \"\\uE6C6\";\n    // U+E6C5  Glass tube chimes\n    Glyphs[\"pictGlassTubeChimes\"] = \"\\uE6C5\";\n    // U+E6A0  Glockenspiel\n    Glyphs[\"pictGlsp\"] = \"\\uE6A0\";\n    // U+E6AA  Glockenspiel (Smith Brindle)\n    Glyphs[\"pictGlspSmithBrindle\"] = \"\\uE6AA\";\n    // U+E6E2  Goblet drum (djembe, dumbek)\n    Glyphs[\"pictGobletDrum\"] = \"\\uE6E2\";\n    // U+E732  Gong\n    Glyphs[\"pictGong\"] = \"\\uE732\";\n    // U+E733  Gong with button (nipple)\n    Glyphs[\"pictGongWithButton\"] = \"\\uE733\";\n    // U+E6F3  Guiro\n    Glyphs[\"pictGuiro\"] = \"\\uE6F3\";\n    // U+E7C4  Hard gum beater, down\n    Glyphs[\"pictGumHardDown\"] = \"\\uE7C4\";\n    // U+E7C6  Hard gum beater, left\n    Glyphs[\"pictGumHardLeft\"] = \"\\uE7C6\";\n    // U+E7C5  Hard gum beater, right\n    Glyphs[\"pictGumHardRight\"] = \"\\uE7C5\";\n    // U+E7C3  Hard gum beater, up\n    Glyphs[\"pictGumHardUp\"] = \"\\uE7C3\";\n    // U+E7C0  Medium gum beater, down\n    Glyphs[\"pictGumMediumDown\"] = \"\\uE7C0\";\n    // U+E7C2  Medium gum beater, left\n    Glyphs[\"pictGumMediumLeft\"] = \"\\uE7C2\";\n    // U+E7C1  Medium gum beater, right\n    Glyphs[\"pictGumMediumRight\"] = \"\\uE7C1\";\n    // U+E7BF  Medium gum beater, up\n    Glyphs[\"pictGumMediumUp\"] = \"\\uE7BF\";\n    // U+E7BC  Soft gum beater, down\n    Glyphs[\"pictGumSoftDown\"] = \"\\uE7BC\";\n    // U+E7BE  Soft gum beater, left\n    Glyphs[\"pictGumSoftLeft\"] = \"\\uE7BE\";\n    // U+E7BD  Soft gum beater, right\n    Glyphs[\"pictGumSoftRight\"] = \"\\uE7BD\";\n    // U+E7BB  Soft gum beater, up\n    Glyphs[\"pictGumSoftUp\"] = \"\\uE7BB\";\n    // U+E7F6  Half-open\n    Glyphs[\"pictHalfOpen1\"] = \"\\uE7F6\";\n    // U+E7F7  Half-open 2 (Weinberg)\n    Glyphs[\"pictHalfOpen2\"] = \"\\uE7F7\";\n    // U+E715  Handbell\n    Glyphs[\"pictHandbell\"] = \"\\uE715\";\n    // U+E722  Hi-hat\n    Glyphs[\"pictHiHat\"] = \"\\uE722\";\n    // U+E723  Hi-hat cymbals on stand\n    Glyphs[\"pictHiHatOnStand\"] = \"\\uE723\";\n    // U+E767  Jaw harp\n    Glyphs[\"pictJawHarp\"] = \"\\uE767\";\n    // U+E719  Jingle bells\n    Glyphs[\"pictJingleBells\"] = \"\\uE719\";\n    // U+E756  Klaxon horn\n    Glyphs[\"pictKlaxonHorn\"] = \"\\uE756\";\n    // U+E807  Right hand (Agostini)\n    Glyphs[\"pictLeftHandCircle\"] = \"\\uE807\";\n    // U+E763  Lion's roar\n    Glyphs[\"pictLionsRoar\"] = \"\\uE763\";\n    // U+E6B1  Lithophone\n    Glyphs[\"pictLithophone\"] = \"\\uE6B1\";\n    // U+E6DF  Log drum\n    Glyphs[\"pictLogDrum\"] = \"\\uE6DF\";\n    // U+E75A  Lotus flute\n    Glyphs[\"pictLotusFlute\"] = \"\\uE75A\";\n    // U+E6A6  Marimba\n    Glyphs[\"pictMar\"] = \"\\uE6A6\";\n    // U+E6AC  Marimba (Smith Brindle)\n    Glyphs[\"pictMarSmithBrindle\"] = \"\\uE6AC\";\n    // U+E741  Maraca\n    Glyphs[\"pictMaraca\"] = \"\\uE741\";\n    // U+E742  Maracas\n    Glyphs[\"pictMaracas\"] = \"\\uE742\";\n    // U+E759  Megaphone\n    Glyphs[\"pictMegaphone\"] = \"\\uE759\";\n    // U+E6C8  Metal plate chimes\n    Glyphs[\"pictMetalPlateChimes\"] = \"\\uE6C8\";\n    // U+E6C7  Metal tube chimes\n    Glyphs[\"pictMetalTubeChimes\"] = \"\\uE6C7\";\n    // U+E766  Musical saw\n    Glyphs[\"pictMusicalSaw\"] = \"\\uE766\";\n    // U+E804  Normal position (Caltabiano)\n    Glyphs[\"pictNormalPosition\"] = \"\\uE804\";\n    // U+E7F4  On rim\n    Glyphs[\"pictOnRim\"] = \"\\uE7F4\";\n    // U+E7F8  Open\n    Glyphs[\"pictOpen\"] = \"\\uE7F8\";\n    // U+E7F5  Closed / rim shot\n    Glyphs[\"pictOpenRimShot\"] = \"\\uE7F5\";\n    // U+E760  Pistol shot\n    Glyphs[\"pictPistolShot\"] = \"\\uE760\";\n    // U+E752  Police whistle\n    Glyphs[\"pictPoliceWhistle\"] = \"\\uE752\";\n    // U+E6FA  Quijada (jawbone)\n    Glyphs[\"pictQuijada\"] = \"\\uE6FA\";\n    // U+E747  Rainstick\n    Glyphs[\"pictRainstick\"] = \"\\uE747\";\n    // U+E6F4  Ratchet\n    Glyphs[\"pictRatchet\"] = \"\\uE6F4\";\n    // U+E6FC  Reco-reco\n    Glyphs[\"pictRecoReco\"] = \"\\uE6FC\";\n    // U+E806  Left hand (Agostini)\n    Glyphs[\"pictRightHandSquare\"] = \"\\uE806\";\n    // U+E801  Rim or edge (Weinberg)\n    Glyphs[\"pictRim1\"] = \"\\uE801\";\n    // U+E802  Rim (Ghent)\n    Glyphs[\"pictRim2\"] = \"\\uE802\";\n    // U+E803  Rim (Caltabiano)\n    Glyphs[\"pictRim3\"] = \"\\uE803\";\n    // U+E7FD  Rim shot for stem\n    Glyphs[\"pictRimShotOnStem\"] = \"\\uE7FD\";\n    // U+E762  Sandpaper blocks\n    Glyphs[\"pictSandpaperBlocks\"] = \"\\uE762\";\n    // U+E7F3  Scrape around rim (counter-clockwise)\n    Glyphs[\"pictScrapeAroundRim\"] = \"\\uE7F3\";\n    // U+E80E  Scrape around rim (clockwise)\n    Glyphs[\"pictScrapeAroundRimClockwise\"] = \"\\uE80E\";\n    // U+E7F1  Scrape from center to edge\n    Glyphs[\"pictScrapeCenterToEdge\"] = \"\\uE7F1\";\n    // U+E7F2  Scrape from edge to center\n    Glyphs[\"pictScrapeEdgeToCenter\"] = \"\\uE7F2\";\n    // U+E718  Shell bells\n    Glyphs[\"pictShellBells\"] = \"\\uE718\";\n    // U+E6C4  Shell chimes\n    Glyphs[\"pictShellChimes\"] = \"\\uE6C4\";\n    // U+E753  Siren\n    Glyphs[\"pictSiren\"] = \"\\uE753\";\n    // U+E746  Sistrum\n    Glyphs[\"pictSistrum\"] = \"\\uE746\";\n    // U+E724  Sizzle cymbal\n    Glyphs[\"pictSizzleCymbal\"] = \"\\uE724\";\n    // U+E710  Sleigh bell\n    Glyphs[\"pictSleighBell\"] = \"\\uE710\";\n    // U+E734  Slide brush on gong\n    Glyphs[\"pictSlideBrushOnGong\"] = \"\\uE734\";\n    // U+E750  Slide whistle\n    Glyphs[\"pictSlideWhistle\"] = \"\\uE750\";\n    // U+E6E0  Slit drum\n    Glyphs[\"pictSlitDrum\"] = \"\\uE6E0\";\n    // U+E6D1  Snare drum\n    Glyphs[\"pictSnareDrum\"] = \"\\uE6D1\";\n    // U+E6D3  Military snare drum\n    Glyphs[\"pictSnareDrumMilitary\"] = \"\\uE6D3\";\n    // U+E6D2  Snare drum, snares off\n    Glyphs[\"pictSnareDrumSnaresOff\"] = \"\\uE6D2\";\n    // U+E6AF  Steel drums\n    Glyphs[\"pictSteelDrums\"] = \"\\uE6AF\";\n    // U+E7F0  Stick shot\n    Glyphs[\"pictStickShot\"] = \"\\uE7F0\";\n    // U+E7B2  Superball\n    Glyphs[\"pictSuperball\"] = \"\\uE7B2\";\n    // U+E721  Suspended cymbal\n    Glyphs[\"pictSuspendedCymbal\"] = \"\\uE721\";\n    // U+E808  Combining swish for stem\n    Glyphs[\"pictSwishStem\"] = \"\\uE808\";\n    // U+E6E3  Indian tabla\n    Glyphs[\"pictTabla\"] = \"\\uE6E3\";\n    // U+E730  Tam-tam\n    Glyphs[\"pictTamTam\"] = \"\\uE730\";\n    // U+E731  Tam-tam with beater (Smith Brindle)\n    Glyphs[\"pictTamTamWithBeater\"] = \"\\uE731\";\n    // U+E6DB  Tambourine\n    Glyphs[\"pictTambourine\"] = \"\\uE6DB\";\n    // U+E6F1  Temple blocks\n    Glyphs[\"pictTempleBlocks\"] = \"\\uE6F1\";\n    // U+E6D6  Tenor drum\n    Glyphs[\"pictTenorDrum\"] = \"\\uE6D6\";\n    // U+E744  Thundersheet\n    Glyphs[\"pictThundersheet\"] = \"\\uE744\";\n    // U+E6DC  Timbales\n    Glyphs[\"pictTimbales\"] = \"\\uE6DC\";\n    // U+E6D0  Timpani\n    Glyphs[\"pictTimpani\"] = \"\\uE6D0\";\n    // U+E6D7  Tom-tom\n    Glyphs[\"pictTomTom\"] = \"\\uE6D7\";\n    // U+E6D8  Chinese tom-tom\n    Glyphs[\"pictTomTomChinese\"] = \"\\uE6D8\";\n    // U+E6DA  Indo-American tom tom\n    Glyphs[\"pictTomTomIndoAmerican\"] = \"\\uE6DA\";\n    // U+E6D9  Japanese tom-tom\n    Glyphs[\"pictTomTomJapanese\"] = \"\\uE6D9\";\n    // U+E700  Triangle\n    Glyphs[\"pictTriangle\"] = \"\\uE700\";\n    // U+E6B2  Tubaphone\n    Glyphs[\"pictTubaphone\"] = \"\\uE6B2\";\n    // U+E6C0  Tubular bells\n    Glyphs[\"pictTubularBells\"] = \"\\uE6C0\";\n    // U+E80A  Combining turn left for stem\n    Glyphs[\"pictTurnLeftStem\"] = \"\\uE80A\";\n    // U+E80B  Combining turn left or right for stem\n    Glyphs[\"pictTurnRightLeftStem\"] = \"\\uE80B\";\n    // U+E809  Combining turn right for stem\n    Glyphs[\"pictTurnRightStem\"] = \"\\uE809\";\n    // U+E6A7  Vibraphone\n    Glyphs[\"pictVib\"] = \"\\uE6A7\";\n    // U+E6A8  Metallophone (vibraphone motor off)\n    Glyphs[\"pictVibMotorOff\"] = \"\\uE6A8\";\n    // U+E6AD  Vibraphone (Smith Brindle)\n    Glyphs[\"pictVibSmithBrindle\"] = \"\\uE6AD\";\n    // U+E745  Vibraslap\n    Glyphs[\"pictVibraslap\"] = \"\\uE745\";\n    // U+E725  Vietnamese hat cymbal\n    Glyphs[\"pictVietnameseHat\"] = \"\\uE725\";\n    // U+E6F6  Whip\n    Glyphs[\"pictWhip\"] = \"\\uE6F6\";\n    // U+E6C1  Wind chimes (glass)\n    Glyphs[\"pictWindChimesGlass\"] = \"\\uE6C1\";\n    // U+E754  Wind machine\n    Glyphs[\"pictWindMachine\"] = \"\\uE754\";\n    // U+E758  Wind whistle (or mouth siren)\n    Glyphs[\"pictWindWhistle\"] = \"\\uE758\";\n    // U+E6F0  Wood block\n    Glyphs[\"pictWoodBlock\"] = \"\\uE6F0\";\n    // U+E7B4  Wound beater, hard core down\n    Glyphs[\"pictWoundHardDown\"] = \"\\uE7B4\";\n    // U+E7B6  Wound beater, hard core left\n    Glyphs[\"pictWoundHardLeft\"] = \"\\uE7B6\";\n    // U+E7B5  Wound beater, hard core right\n    Glyphs[\"pictWoundHardRight\"] = \"\\uE7B5\";\n    // U+E7B3  Wound beater, hard core up\n    Glyphs[\"pictWoundHardUp\"] = \"\\uE7B3\";\n    // U+E7B8  Wound beater, soft core down\n    Glyphs[\"pictWoundSoftDown\"] = \"\\uE7B8\";\n    // U+E7BA  Wound beater, soft core left\n    Glyphs[\"pictWoundSoftLeft\"] = \"\\uE7BA\";\n    // U+E7B9  Wound beater, soft core right\n    Glyphs[\"pictWoundSoftRight\"] = \"\\uE7B9\";\n    // U+E7B7  Wound beater, soft core up\n    Glyphs[\"pictWoundSoftUp\"] = \"\\uE7B7\";\n    // U+E6A1  Xylophone\n    Glyphs[\"pictXyl\"] = \"\\uE6A1\";\n    // U+E6A3  Bass xylophone\n    Glyphs[\"pictXylBass\"] = \"\\uE6A3\";\n    // U+E6AB  Xylophone (Smith Brindle)\n    Glyphs[\"pictXylSmithBrindle\"] = \"\\uE6AB\";\n    // U+E6A2  Tenor xylophone\n    Glyphs[\"pictXylTenor\"] = \"\\uE6A2\";\n    // U+E6A5  Trough tenor xylophone\n    Glyphs[\"pictXylTenorTrough\"] = \"\\uE6A5\";\n    // U+E6A4  Trough xylophone\n    Glyphs[\"pictXylTrough\"] = \"\\uE6A4\";\n    // U+E632  Buzz pizzicato\n    Glyphs[\"pluckedBuzzPizzicato\"] = \"\\uE632\";\n    // U+E638  Damp\n    Glyphs[\"pluckedDamp\"] = \"\\uE638\";\n    // U+E639  Damp all\n    Glyphs[\"pluckedDampAll\"] = \"\\uE639\";\n    // U+E63B  Damp for stem\n    Glyphs[\"pluckedDampOnStem\"] = \"\\uE63B\";\n    // U+E637  Fingernail flick\n    Glyphs[\"pluckedFingernailFlick\"] = \"\\uE637\";\n    // U+E633  Left-hand pizzicato\n    Glyphs[\"pluckedLeftHandPizzicato\"] = \"\\uE633\";\n    // U+E63A  Plectrum\n    Glyphs[\"pluckedPlectrum\"] = \"\\uE63A\";\n    // U+E631  Snap pizzicato above\n    Glyphs[\"pluckedSnapPizzicatoAbove\"] = \"\\uE631\";\n    // U+E630  Snap pizzicato below\n    Glyphs[\"pluckedSnapPizzicatoBelow\"] = \"\\uE630\";\n    // U+E636  With fingernails\n    Glyphs[\"pluckedWithFingernails\"] = \"\\uE636\";\n    // U+E514  Quindicesima\n    Glyphs[\"quindicesima\"] = \"\\uE514\";\n    // U+E515  Quindicesima alta\n    Glyphs[\"quindicesimaAlta\"] = \"\\uE515\";\n    // U+E516  Quindicesima bassa\n    Glyphs[\"quindicesimaBassa\"] = \"\\uE516\";\n    // U+E51D  Quindicesima bassa (mb)\n    Glyphs[\"quindicesimaBassaMb\"] = \"\\uE51D\";\n    // U+E500  Repeat last bar\n    Glyphs[\"repeat1Bar\"] = \"\\uE500\";\n    // U+E501  Repeat last two bars\n    Glyphs[\"repeat2Bars\"] = \"\\uE501\";\n    // U+E502  Repeat last four bars\n    Glyphs[\"repeat4Bars\"] = \"\\uE502\";\n    // U+E505  Repeat bar lower dot\n    Glyphs[\"repeatBarLowerDot\"] = \"\\uE505\";\n    // U+E504  Repeat bar slash\n    Glyphs[\"repeatBarSlash\"] = \"\\uE504\";\n    // U+E503  Repeat bar upper dot\n    Glyphs[\"repeatBarUpperDot\"] = \"\\uE503\";\n    // U+E044  Single repeat dot\n    Glyphs[\"repeatDot\"] = \"\\uE044\";\n    // U+E043  Repeat dots\n    Glyphs[\"repeatDots\"] = \"\\uE043\";\n    // U+E040  Left (start) repeat sign\n    Glyphs[\"repeatLeft\"] = \"\\uE040\";\n    // U+E041  Right (end) repeat sign\n    Glyphs[\"repeatRight\"] = \"\\uE041\";\n    // U+E042  Right and left repeat sign\n    Glyphs[\"repeatRightLeft\"] = \"\\uE042\";\n    // U+E4ED  1024th rest\n    Glyphs[\"rest1024th\"] = \"\\uE4ED\";\n    // U+E4EA  128th (semihemidemisemiquaver) rest\n    Glyphs[\"rest128th\"] = \"\\uE4EA\";\n    // U+E4E7  16th (semiquaver) rest\n    Glyphs[\"rest16th\"] = \"\\uE4E7\";\n    // U+E4EB  256th rest\n    Glyphs[\"rest256th\"] = \"\\uE4EB\";\n    // U+E4E8  32nd (demisemiquaver) rest\n    Glyphs[\"rest32nd\"] = \"\\uE4E8\";\n    // U+E4EC  512th rest\n    Glyphs[\"rest512th\"] = \"\\uE4EC\";\n    // U+E4E9  64th (hemidemisemiquaver) rest\n    Glyphs[\"rest64th\"] = \"\\uE4E9\";\n    // U+E4E6  Eighth (quaver) rest\n    Glyphs[\"rest8th\"] = \"\\uE4E6\";\n    // U+E4E2  Double whole (breve) rest\n    Glyphs[\"restDoubleWhole\"] = \"\\uE4E2\";\n    // U+E4F3  Double whole rest on leger lines\n    Glyphs[\"restDoubleWholeLegerLine\"] = \"\\uE4F3\";\n    // U+E4EE  Multiple measure rest\n    Glyphs[\"restHBar\"] = \"\\uE4EE\";\n    // U+E4EF  H-bar, left half\n    Glyphs[\"restHBarLeft\"] = \"\\uE4EF\";\n    // U+E4F0  H-bar, middle\n    Glyphs[\"restHBarMiddle\"] = \"\\uE4F0\";\n    // U+E4F1  H-bar, right half\n    Glyphs[\"restHBarRight\"] = \"\\uE4F1\";\n    // U+E4E4  Half (minim) rest\n    Glyphs[\"restHalf\"] = \"\\uE4E4\";\n    // U+E4F5  Half rest on leger line\n    Glyphs[\"restHalfLegerLine\"] = \"\\uE4F5\";\n    // U+E4E1  Longa rest\n    Glyphs[\"restLonga\"] = \"\\uE4E1\";\n    // U+E4E0  Maxima rest\n    Glyphs[\"restMaxima\"] = \"\\uE4E0\";\n    // U+E4E5  Quarter (crotchet) rest\n    Glyphs[\"restQuarter\"] = \"\\uE4E5\";\n    // U+E4F2  Old-style quarter (crotchet) rest\n    Glyphs[\"restQuarterOld\"] = \"\\uE4F2\";\n    // U+E4F6  Z-style quarter (crotchet) rest\n    Glyphs[\"restQuarterZ\"] = \"\\uE4F6\";\n    // U+E4E3  Whole (semibreve) rest\n    Glyphs[\"restWhole\"] = \"\\uE4E3\";\n    // U+E4F4  Whole rest on leger line\n    Glyphs[\"restWholeLegerLine\"] = \"\\uE4F4\";\n    // U+E001  Reversed brace\n    Glyphs[\"reversedBrace\"] = \"\\uE001\";\n    // U+E006  Reversed bracket bottom\n    Glyphs[\"reversedBracketBottom\"] = \"\\uE006\";\n    // U+E005  Reversed bracket top\n    Glyphs[\"reversedBracketTop\"] = \"\\uE005\";\n    // U+E04D  Right repeat sign within bar\n    Glyphs[\"rightRepeatSmall\"] = \"\\uE04D\";\n    // U+EF00  Scale degree 1\n    Glyphs[\"scaleDegree1\"] = \"\\uEF00\";\n    // U+EF01  Scale degree 2\n    Glyphs[\"scaleDegree2\"] = \"\\uEF01\";\n    // U+EF02  Scale degree 3\n    Glyphs[\"scaleDegree3\"] = \"\\uEF02\";\n    // U+EF03  Scale degree 4\n    Glyphs[\"scaleDegree4\"] = \"\\uEF03\";\n    // U+EF04  Scale degree 5\n    Glyphs[\"scaleDegree5\"] = \"\\uEF04\";\n    // U+EF05  Scale degree 6\n    Glyphs[\"scaleDegree6\"] = \"\\uEF05\";\n    // U+EF06  Scale degree 7\n    Glyphs[\"scaleDegree7\"] = \"\\uEF06\";\n    // U+EF07  Scale degree 8\n    Glyphs[\"scaleDegree8\"] = \"\\uEF07\";\n    // U+EF08  Scale degree 9\n    Glyphs[\"scaleDegree9\"] = \"\\uEF08\";\n    // U+E06F  Schäffer clef\n    Glyphs[\"schaefferClef\"] = \"\\uE06F\";\n    // U+E072  Schäffer F clef to G clef change\n    Glyphs[\"schaefferFClefToGClef\"] = \"\\uE072\";\n    // U+E071  Schäffer G clef to F clef change\n    Glyphs[\"schaefferGClefToFClef\"] = \"\\uE071\";\n    // U+E070  Schäffer previous clef\n    Glyphs[\"schaefferPreviousClef\"] = \"\\uE070\";\n    // U+E047  Segno\n    Glyphs[\"segno\"] = \"\\uE047\";\n    // U+E04A  Segno (serpent)\n    Glyphs[\"segnoSerpent1\"] = \"\\uE04A\";\n    // U+E04B  Segno (serpent with vertical lines)\n    Glyphs[\"segnoSerpent2\"] = \"\\uE04B\";\n    // U+E06B  Semi-pitched percussion clef 1\n    Glyphs[\"semipitchedPercussionClef1\"] = \"\\uE06B\";\n    // U+E06C  Semi-pitched percussion clef 2\n    Glyphs[\"semipitchedPercussionClef2\"] = \"\\uE06C\";\n    // U+EC52  Flat\n    Glyphs[\"smnFlat\"] = \"\\uEC52\";\n    // U+EC53  Flat (white)\n    Glyphs[\"smnFlatWhite\"] = \"\\uEC53\";\n    // U+EC57  Double flat history sign\n    Glyphs[\"smnHistoryDoubleFlat\"] = \"\\uEC57\";\n    // U+EC55  Double sharp history sign\n    Glyphs[\"smnHistoryDoubleSharp\"] = \"\\uEC55\";\n    // U+EC56  Flat history sign\n    Glyphs[\"smnHistoryFlat\"] = \"\\uEC56\";\n    // U+EC54  Sharp history sign\n    Glyphs[\"smnHistorySharp\"] = \"\\uEC54\";\n    // U+EC58  Natural (N)\n    Glyphs[\"smnNatural\"] = \"\\uEC58\";\n    // U+EC50  Sharp stem up\n    Glyphs[\"smnSharp\"] = \"\\uEC50\";\n    // U+EC59  Sharp stem down\n    Glyphs[\"smnSharpDown\"] = \"\\uEC59\";\n    // U+EC51  Sharp (white) stem up\n    Glyphs[\"smnSharpWhite\"] = \"\\uEC51\";\n    // U+EC5A  Sharp (white) stem down\n    Glyphs[\"smnSharpWhiteDown\"] = \"\\uEC5A\";\n    // U+E00A  Split bar divider (bar spans a system break)\n    Glyphs[\"splitBarDivider\"] = \"\\uE00A\";\n    // U+E010  1-line staff\n    Glyphs[\"staff1Line\"] = \"\\uE010\";\n    // U+E01C  1-line staff (narrow)\n    Glyphs[\"staff1LineNarrow\"] = \"\\uE01C\";\n    // U+E016  1-line staff (wide)\n    Glyphs[\"staff1LineWide\"] = \"\\uE016\";\n    // U+E011  2-line staff\n    Glyphs[\"staff2Lines\"] = \"\\uE011\";\n    // U+E01D  2-line staff (narrow)\n    Glyphs[\"staff2LinesNarrow\"] = \"\\uE01D\";\n    // U+E017  2-line staff (wide)\n    Glyphs[\"staff2LinesWide\"] = \"\\uE017\";\n    // U+E012  3-line staff\n    Glyphs[\"staff3Lines\"] = \"\\uE012\";\n    // U+E01E  3-line staff (narrow)\n    Glyphs[\"staff3LinesNarrow\"] = \"\\uE01E\";\n    // U+E018  3-line staff (wide)\n    Glyphs[\"staff3LinesWide\"] = \"\\uE018\";\n    // U+E013  4-line staff\n    Glyphs[\"staff4Lines\"] = \"\\uE013\";\n    // U+E01F  4-line staff (narrow)\n    Glyphs[\"staff4LinesNarrow\"] = \"\\uE01F\";\n    // U+E019  4-line staff (wide)\n    Glyphs[\"staff4LinesWide\"] = \"\\uE019\";\n    // U+E014  5-line staff\n    Glyphs[\"staff5Lines\"] = \"\\uE014\";\n    // U+E020  5-line staff (narrow)\n    Glyphs[\"staff5LinesNarrow\"] = \"\\uE020\";\n    // U+E01A  5-line staff (wide)\n    Glyphs[\"staff5LinesWide\"] = \"\\uE01A\";\n    // U+E015  6-line staff\n    Glyphs[\"staff6Lines\"] = \"\\uE015\";\n    // U+E021  6-line staff (narrow)\n    Glyphs[\"staff6LinesNarrow\"] = \"\\uE021\";\n    // U+E01B  6-line staff (wide)\n    Glyphs[\"staff6LinesWide\"] = \"\\uE01B\";\n    // U+E00B  Staff divide arrow down\n    Glyphs[\"staffDivideArrowDown\"] = \"\\uE00B\";\n    // U+E00C  Staff divide arrow up\n    Glyphs[\"staffDivideArrowUp\"] = \"\\uE00C\";\n    // U+E00D  Staff divide arrows\n    Glyphs[\"staffDivideArrowUpDown\"] = \"\\uE00D\";\n    // U+EB98  Lower 1 staff position\n    Glyphs[\"staffPosLower1\"] = \"\\uEB98\";\n    // U+EB99  Lower 2 staff positions\n    Glyphs[\"staffPosLower2\"] = \"\\uEB99\";\n    // U+EB9A  Lower 3 staff positions\n    Glyphs[\"staffPosLower3\"] = \"\\uEB9A\";\n    // U+EB9B  Lower 4 staff positions\n    Glyphs[\"staffPosLower4\"] = \"\\uEB9B\";\n    // U+EB9C  Lower 5 staff positions\n    Glyphs[\"staffPosLower5\"] = \"\\uEB9C\";\n    // U+EB9D  Lower 6 staff positions\n    Glyphs[\"staffPosLower6\"] = \"\\uEB9D\";\n    // U+EB9E  Lower 7 staff positions\n    Glyphs[\"staffPosLower7\"] = \"\\uEB9E\";\n    // U+EB9F  Lower 8 staff positions\n    Glyphs[\"staffPosLower8\"] = \"\\uEB9F\";\n    // U+EB90  Raise 1 staff position\n    Glyphs[\"staffPosRaise1\"] = \"\\uEB90\";\n    // U+EB91  Raise 2 staff positions\n    Glyphs[\"staffPosRaise2\"] = \"\\uEB91\";\n    // U+EB92  Raise 3 staff positions\n    Glyphs[\"staffPosRaise3\"] = \"\\uEB92\";\n    // U+EB93  Raise 4 staff positions\n    Glyphs[\"staffPosRaise4\"] = \"\\uEB93\";\n    // U+EB94  Raise 5 staff positions\n    Glyphs[\"staffPosRaise5\"] = \"\\uEB94\";\n    // U+EB95  Raise 6 staff positions\n    Glyphs[\"staffPosRaise6\"] = \"\\uEB95\";\n    // U+EB96  Raise 7 staff positions\n    Glyphs[\"staffPosRaise7\"] = \"\\uEB96\";\n    // U+EB97  Raise 8 staff positions\n    Glyphs[\"staffPosRaise8\"] = \"\\uEB97\";\n    // U+E210  Combining stem\n    Glyphs[\"stem\"] = \"\\uE210\";\n    // U+E215  Combining bow on bridge stem\n    Glyphs[\"stemBowOnBridge\"] = \"\\uE215\";\n    // U+E216  Combining bow on tailpiece stem\n    Glyphs[\"stemBowOnTailpiece\"] = \"\\uE216\";\n    // U+E217  Combining buzz roll stem\n    Glyphs[\"stemBuzzRoll\"] = \"\\uE217\";\n    // U+E218  Combining damp stem\n    Glyphs[\"stemDamp\"] = \"\\uE218\";\n    // U+E21F  Combining harp string noise stem\n    Glyphs[\"stemHarpStringNoise\"] = \"\\uE21F\";\n    // U+E21A  Combining multiphonics (black) stem\n    Glyphs[\"stemMultiphonicsBlack\"] = \"\\uE21A\";\n    // U+E21C  Combining multiphonics (black and white) stem\n    Glyphs[\"stemMultiphonicsBlackWhite\"] = \"\\uE21C\";\n    // U+E21B  Combining multiphonics (white) stem\n    Glyphs[\"stemMultiphonicsWhite\"] = \"\\uE21B\";\n    // U+E213  Combining Penderecki unmeasured tremolo stem\n    Glyphs[\"stemPendereckiTremolo\"] = \"\\uE213\";\n    // U+E21E  Combining rim shot stem\n    Glyphs[\"stemRimShot\"] = \"\\uE21E\";\n    // U+E211  Combining sprechgesang stem\n    Glyphs[\"stemSprechgesang\"] = \"\\uE211\";\n    // U+E214  Combining sul ponticello (bow behind bridge) stem\n    Glyphs[\"stemSulPonticello\"] = \"\\uE214\";\n    // U+E21D  Combining sussurando stem\n    Glyphs[\"stemSussurando\"] = \"\\uE21D\";\n    // U+E212  Combining swished stem\n    Glyphs[\"stemSwished\"] = \"\\uE212\";\n    // U+E219  Combining vibrato pulse accent (Saunders) stem\n    Glyphs[\"stemVibratoPulse\"] = \"\\uE219\";\n    // U+E232  Stockhausen irregular tremolo (\"Morsen\", like Morse code)\n    Glyphs[\"stockhausenTremolo\"] = \"\\uE232\";\n    // U+E618  Bow behind bridge (sul ponticello)\n    Glyphs[\"stringsBowBehindBridge\"] = \"\\uE618\";\n    // U+E62A  Bow behind bridge on four strings\n    Glyphs[\"stringsBowBehindBridgeFourStrings\"] = \"\\uE62A\";\n    // U+E627  Bow behind bridge on one string\n    Glyphs[\"stringsBowBehindBridgeOneString\"] = \"\\uE627\";\n    // U+E629  Bow behind bridge on three strings\n    Glyphs[\"stringsBowBehindBridgeThreeStrings\"] = \"\\uE629\";\n    // U+E628  Bow behind bridge on two strings\n    Glyphs[\"stringsBowBehindBridgeTwoStrings\"] = \"\\uE628\";\n    // U+E619  Bow on top of bridge\n    Glyphs[\"stringsBowOnBridge\"] = \"\\uE619\";\n    // U+E61A  Bow on tailpiece\n    Glyphs[\"stringsBowOnTailpiece\"] = \"\\uE61A\";\n    // U+E626  Change bow direction, indeterminate\n    Glyphs[\"stringsChangeBowDirection\"] = \"\\uE626\";\n    // U+E610  Down bow\n    Glyphs[\"stringsDownBow\"] = \"\\uE610\";\n    // U+EE82  Down bow, away from body\n    Glyphs[\"stringsDownBowAwayFromBody\"] = \"\\uEE82\";\n    // U+EE84  Down bow, beyond bridge\n    Glyphs[\"stringsDownBowBeyondBridge\"] = \"\\uEE84\";\n    // U+EE80  Down bow, towards body\n    Glyphs[\"stringsDownBowTowardsBody\"] = \"\\uEE80\";\n    // U+E611  Turned down bow\n    Glyphs[\"stringsDownBowTurned\"] = \"\\uE611\";\n    // U+E622  Fouetté\n    Glyphs[\"stringsFouette\"] = \"\\uE622\";\n    // U+E615  Half-harmonic\n    Glyphs[\"stringsHalfHarmonic\"] = \"\\uE615\";\n    // U+E614  Harmonic\n    Glyphs[\"stringsHarmonic\"] = \"\\uE614\";\n    // U+E620  Jeté (gettato) above\n    Glyphs[\"stringsJeteAbove\"] = \"\\uE620\";\n    // U+E621  Jeté (gettato) below\n    Glyphs[\"stringsJeteBelow\"] = \"\\uE621\";\n    // U+E617  Mute off\n    Glyphs[\"stringsMuteOff\"] = \"\\uE617\";\n    // U+E616  Mute on\n    Glyphs[\"stringsMuteOn\"] = \"\\uE616\";\n    // U+E61B  Overpressure, down bow\n    Glyphs[\"stringsOverpressureDownBow\"] = \"\\uE61B\";\n    // U+E61F  Overpressure, no bow direction\n    Glyphs[\"stringsOverpressureNoDirection\"] = \"\\uE61F\";\n    // U+E61D  Overpressure possibile, down bow\n    Glyphs[\"stringsOverpressurePossibileDownBow\"] = \"\\uE61D\";\n    // U+E61E  Overpressure possibile, up bow\n    Glyphs[\"stringsOverpressurePossibileUpBow\"] = \"\\uE61E\";\n    // U+E61C  Overpressure, up bow\n    Glyphs[\"stringsOverpressureUpBow\"] = \"\\uE61C\";\n    // U+EE88  Scrape, circular clockwise\n    Glyphs[\"stringsScrapeCircularClockwise\"] = \"\\uEE88\";\n    // U+EE89  Scrape, circular counter-clockwise\n    Glyphs[\"stringsScrapeCircularCounterclockwise\"] = \"\\uEE89\";\n    // U+EE86  Scrape, parallel inward\n    Glyphs[\"stringsScrapeParallelInward\"] = \"\\uEE86\";\n    // U+EE87  Scrape, parallel outward\n    Glyphs[\"stringsScrapeParallelOutward\"] = \"\\uEE87\";\n    // U+E624  Thumb position\n    Glyphs[\"stringsThumbPosition\"] = \"\\uE624\";\n    // U+E625  Turned thumb position\n    Glyphs[\"stringsThumbPositionTurned\"] = \"\\uE625\";\n    // U+EE8A  Triple chop, inward\n    Glyphs[\"stringsTripleChopInward\"] = \"\\uEE8A\";\n    // U+EE8B  Triple chop, outward\n    Glyphs[\"stringsTripleChopOutward\"] = \"\\uEE8B\";\n    // U+E612  Up bow\n    Glyphs[\"stringsUpBow\"] = \"\\uE612\";\n    // U+EE83  Up bow, away from body\n    Glyphs[\"stringsUpBowAwayFromBody\"] = \"\\uEE83\";\n    // U+EE85  Up bow, beyond bridge\n    Glyphs[\"stringsUpBowBeyondBridge\"] = \"\\uEE85\";\n    // U+EE81  Up bow, towards body\n    Glyphs[\"stringsUpBowTowardsBody\"] = \"\\uEE81\";\n    // U+E613  Turned up bow\n    Glyphs[\"stringsUpBowTurned\"] = \"\\uE613\";\n    // U+E623  Vibrato pulse accent (Saunders) for stem\n    Glyphs[\"stringsVibratoPulse\"] = \"\\uE623\";\n    // U+EE72  Swiss rudiments doublé black notehead\n    Glyphs[\"swissRudimentsNoteheadBlackDouble\"] = \"\\uEE72\";\n    // U+EE70  Swiss rudiments flam black notehead\n    Glyphs[\"swissRudimentsNoteheadBlackFlam\"] = \"\\uEE70\";\n    // U+EE73  Swiss rudiments doublé half (minim) notehead\n    Glyphs[\"swissRudimentsNoteheadHalfDouble\"] = \"\\uEE73\";\n    // U+EE71  Swiss rudiments flam half (minim) notehead\n    Glyphs[\"swissRudimentsNoteheadHalfFlam\"] = \"\\uEE71\";\n    // U+E007  System divider\n    Glyphs[\"systemDivider\"] = \"\\uE007\";\n    // U+E009  Extra long system divider\n    Glyphs[\"systemDividerExtraLong\"] = \"\\uE009\";\n    // U+E008  Long system divider\n    Glyphs[\"systemDividerLong\"] = \"\\uE008\";\n    // U+E1FC  Augmentation dot\n    Glyphs[\"textAugmentationDot\"] = \"\\uE1FC\";\n    // U+E1F5  Black note, fractional 16th beam, long stem\n    Glyphs[\"textBlackNoteFrac16thLongStem\"] = \"\\uE1F5\";\n    // U+E1F4  Black note, fractional 16th beam, short stem\n    Glyphs[\"textBlackNoteFrac16thShortStem\"] = \"\\uE1F4\";\n    // U+E1F6  Black note, fractional 32nd beam, long stem\n    Glyphs[\"textBlackNoteFrac32ndLongStem\"] = \"\\uE1F6\";\n    // U+E1F3  Black note, fractional 8th beam, long stem\n    Glyphs[\"textBlackNoteFrac8thLongStem\"] = \"\\uE1F3\";\n    // U+E1F2  Black note, fractional 8th beam, short stem\n    Glyphs[\"textBlackNoteFrac8thShortStem\"] = \"\\uE1F2\";\n    // U+E1F1  Black note, long stem\n    Glyphs[\"textBlackNoteLongStem\"] = \"\\uE1F1\";\n    // U+E1F0  Black note, short stem\n    Glyphs[\"textBlackNoteShortStem\"] = \"\\uE1F0\";\n    // U+E1FA  Continuing 16th beam for long stem\n    Glyphs[\"textCont16thBeamLongStem\"] = \"\\uE1FA\";\n    // U+E1F9  Continuing 16th beam for short stem\n    Glyphs[\"textCont16thBeamShortStem\"] = \"\\uE1F9\";\n    // U+E1FB  Continuing 32nd beam for long stem\n    Glyphs[\"textCont32ndBeamLongStem\"] = \"\\uE1FB\";\n    // U+E1F8  Continuing 8th beam for long stem\n    Glyphs[\"textCont8thBeamLongStem\"] = \"\\uE1F8\";\n    // U+E1F7  Continuing 8th beam for short stem\n    Glyphs[\"textCont8thBeamShortStem\"] = \"\\uE1F7\";\n    // U+E209  Headless black note, fractional 16th beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac16thLongStem\"] = \"\\uE209\";\n    // U+E208  Headless black note, fractional 16th beam, short stem\n    Glyphs[\"textHeadlessBlackNoteFrac16thShortStem\"] = \"\\uE208\";\n    // U+E20A  Headless black note, fractional 32nd beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac32ndLongStem\"] = \"\\uE20A\";\n    // U+E207  Headless black note, fractional 8th beam, long stem\n    Glyphs[\"textHeadlessBlackNoteFrac8thLongStem\"] = \"\\uE207\";\n    // U+E206  Headless black note, fractional 8th beam, short stem\n    Glyphs[\"textHeadlessBlackNoteFrac8thShortStem\"] = \"\\uE206\";\n    // U+E205  Headless black note, long stem\n    Glyphs[\"textHeadlessBlackNoteLongStem\"] = \"\\uE205\";\n    // U+E204  Headless black note, short stem\n    Glyphs[\"textHeadlessBlackNoteShortStem\"] = \"\\uE204\";\n    // U+E1FD  Tie\n    Glyphs[\"textTie\"] = \"\\uE1FD\";\n    // U+E202  Tuplet number 3 for long stem\n    Glyphs[\"textTuplet3LongStem\"] = \"\\uE202\";\n    // U+E1FF  Tuplet number 3 for short stem\n    Glyphs[\"textTuplet3ShortStem\"] = \"\\uE1FF\";\n    // U+E203  Tuplet bracket end for long stem\n    Glyphs[\"textTupletBracketEndLongStem\"] = \"\\uE203\";\n    // U+E200  Tuplet bracket end for short stem\n    Glyphs[\"textTupletBracketEndShortStem\"] = \"\\uE200\";\n    // U+E201  Tuplet bracket start for long stem\n    Glyphs[\"textTupletBracketStartLongStem\"] = \"\\uE201\";\n    // U+E1FE  Tuplet bracket start for short stem\n    Glyphs[\"textTupletBracketStartShortStem\"] = \"\\uE1FE\";\n    // U+E080  Time signature 0\n    Glyphs[\"timeSig0\"] = \"\\uE080\";\n    // U+ECF0  Reversed time signature 0\n    Glyphs[\"timeSig0Reversed\"] = \"\\uECF0\";\n    // U+ECE0  Turned time signature 0\n    Glyphs[\"timeSig0Turned\"] = \"\\uECE0\";\n    // U+E081  Time signature 1\n    Glyphs[\"timeSig1\"] = \"\\uE081\";\n    // U+ECF1  Reversed time signature 1\n    Glyphs[\"timeSig1Reversed\"] = \"\\uECF1\";\n    // U+ECE1  Turned time signature 1\n    Glyphs[\"timeSig1Turned\"] = \"\\uECE1\";\n    // U+E082  Time signature 2\n    Glyphs[\"timeSig2\"] = \"\\uE082\";\n    // U+ECF2  Reversed time signature 2\n    Glyphs[\"timeSig2Reversed\"] = \"\\uECF2\";\n    // U+ECE2  Turned time signature 2\n    Glyphs[\"timeSig2Turned\"] = \"\\uECE2\";\n    // U+E083  Time signature 3\n    Glyphs[\"timeSig3\"] = \"\\uE083\";\n    // U+ECF3  Reversed time signature 3\n    Glyphs[\"timeSig3Reversed\"] = \"\\uECF3\";\n    // U+ECE3  Turned time signature 3\n    Glyphs[\"timeSig3Turned\"] = \"\\uECE3\";\n    // U+E084  Time signature 4\n    Glyphs[\"timeSig4\"] = \"\\uE084\";\n    // U+ECF4  Reversed time signature 4\n    Glyphs[\"timeSig4Reversed\"] = \"\\uECF4\";\n    // U+ECE4  Turned time signature 4\n    Glyphs[\"timeSig4Turned\"] = \"\\uECE4\";\n    // U+E085  Time signature 5\n    Glyphs[\"timeSig5\"] = \"\\uE085\";\n    // U+ECF5  Reversed time signature 5\n    Glyphs[\"timeSig5Reversed\"] = \"\\uECF5\";\n    // U+ECE5  Turned time signature 5\n    Glyphs[\"timeSig5Turned\"] = \"\\uECE5\";\n    // U+E086  Time signature 6\n    Glyphs[\"timeSig6\"] = \"\\uE086\";\n    // U+ECF6  Reversed time signature 6\n    Glyphs[\"timeSig6Reversed\"] = \"\\uECF6\";\n    // U+ECE6  Turned time signature 6\n    Glyphs[\"timeSig6Turned\"] = \"\\uECE6\";\n    // U+E087  Time signature 7\n    Glyphs[\"timeSig7\"] = \"\\uE087\";\n    // U+ECF7  Reversed time signature 7\n    Glyphs[\"timeSig7Reversed\"] = \"\\uECF7\";\n    // U+ECE7  Turned time signature 7\n    Glyphs[\"timeSig7Turned\"] = \"\\uECE7\";\n    // U+E088  Time signature 8\n    Glyphs[\"timeSig8\"] = \"\\uE088\";\n    // U+ECF8  Reversed time signature 8\n    Glyphs[\"timeSig8Reversed\"] = \"\\uECF8\";\n    // U+ECE8  Turned time signature 8\n    Glyphs[\"timeSig8Turned\"] = \"\\uECE8\";\n    // U+E089  Time signature 9\n    Glyphs[\"timeSig9\"] = \"\\uE089\";\n    // U+ECF9  Reversed time signature 9\n    Glyphs[\"timeSig9Reversed\"] = \"\\uECF9\";\n    // U+ECE9  Turned time signature 9\n    Glyphs[\"timeSig9Turned\"] = \"\\uECE9\";\n    // U+EC80  Left bracket for whole time signature\n    Glyphs[\"timeSigBracketLeft\"] = \"\\uEC80\";\n    // U+EC82  Left bracket for numerator only\n    Glyphs[\"timeSigBracketLeftSmall\"] = \"\\uEC82\";\n    // U+EC81  Right bracket for whole time signature\n    Glyphs[\"timeSigBracketRight\"] = \"\\uEC81\";\n    // U+EC83  Right bracket for numerator only\n    Glyphs[\"timeSigBracketRightSmall\"] = \"\\uEC83\";\n    // U+E09F  Control character for denominator digit\n    Glyphs[\"timeSigCombDenominator\"] = \"\\uE09F\";\n    // U+E09E  Control character for numerator digit\n    Glyphs[\"timeSigCombNumerator\"] = \"\\uE09E\";\n    // U+E096  Time signature comma\n    Glyphs[\"timeSigComma\"] = \"\\uE096\";\n    // U+E08A  Common time\n    Glyphs[\"timeSigCommon\"] = \"\\uE08A\";\n    // U+ECFA  Reversed common time\n    Glyphs[\"timeSigCommonReversed\"] = \"\\uECFA\";\n    // U+ECEA  Turned common time\n    Glyphs[\"timeSigCommonTurned\"] = \"\\uECEA\";\n    // U+EC85  Cut time (Bach)\n    Glyphs[\"timeSigCut2\"] = \"\\uEC85\";\n    // U+EC86  Cut triple time (9/8)\n    Glyphs[\"timeSigCut3\"] = \"\\uEC86\";\n    // U+E08B  Cut time\n    Glyphs[\"timeSigCutCommon\"] = \"\\uE08B\";\n    // U+ECFB  Reversed cut time\n    Glyphs[\"timeSigCutCommonReversed\"] = \"\\uECFB\";\n    // U+ECEB  Turned cut time\n    Glyphs[\"timeSigCutCommonTurned\"] = \"\\uECEB\";\n    // U+E08F  Time signature equals\n    Glyphs[\"timeSigEquals\"] = \"\\uE08F\";\n    // U+E098  Time signature fraction ½\n    Glyphs[\"timeSigFractionHalf\"] = \"\\uE098\";\n    // U+E09A  Time signature fraction ⅓\n    Glyphs[\"timeSigFractionOneThird\"] = \"\\uE09A\";\n    // U+E097  Time signature fraction ¼\n    Glyphs[\"timeSigFractionQuarter\"] = \"\\uE097\";\n    // U+E099  Time signature fraction ¾\n    Glyphs[\"timeSigFractionThreeQuarters\"] = \"\\uE099\";\n    // U+E09B  Time signature fraction ⅔\n    Glyphs[\"timeSigFractionTwoThirds\"] = \"\\uE09B\";\n    // U+E08E  Time signature fraction slash\n    Glyphs[\"timeSigFractionalSlash\"] = \"\\uE08E\";\n    // U+E090  Time signature minus\n    Glyphs[\"timeSigMinus\"] = \"\\uE090\";\n    // U+E091  Time signature multiply\n    Glyphs[\"timeSigMultiply\"] = \"\\uE091\";\n    // U+E09D  Open time signature (Penderecki)\n    Glyphs[\"timeSigOpenPenderecki\"] = \"\\uE09D\";\n    // U+E094  Left parenthesis for whole time signature\n    Glyphs[\"timeSigParensLeft\"] = \"\\uE094\";\n    // U+E092  Left parenthesis for numerator only\n    Glyphs[\"timeSigParensLeftSmall\"] = \"\\uE092\";\n    // U+E095  Right parenthesis for whole time signature\n    Glyphs[\"timeSigParensRight\"] = \"\\uE095\";\n    // U+E093  Right parenthesis for numerator only\n    Glyphs[\"timeSigParensRightSmall\"] = \"\\uE093\";\n    // U+E08C  Time signature +\n    Glyphs[\"timeSigPlus\"] = \"\\uE08C\";\n    // U+E08D  Time signature + (for numerators)\n    Glyphs[\"timeSigPlusSmall\"] = \"\\uE08D\";\n    // U+EC84  Time signature slash separator\n    Glyphs[\"timeSigSlash\"] = \"\\uEC84\";\n    // U+E09C  Open time signature\n    Glyphs[\"timeSigX\"] = \"\\uE09C\";\n    // U+E220  Combining tremolo 1\n    Glyphs[\"tremolo1\"] = \"\\uE220\";\n    // U+E221  Combining tremolo 2\n    Glyphs[\"tremolo2\"] = \"\\uE221\";\n    // U+E222  Combining tremolo 3\n    Glyphs[\"tremolo3\"] = \"\\uE222\";\n    // U+E223  Combining tremolo 4\n    Glyphs[\"tremolo4\"] = \"\\uE223\";\n    // U+E224  Combining tremolo 5\n    Glyphs[\"tremolo5\"] = \"\\uE224\";\n    // U+E22E  Divide measured tremolo by 2\n    Glyphs[\"tremoloDivisiDots2\"] = \"\\uE22E\";\n    // U+E22F  Divide measured tremolo by 3\n    Glyphs[\"tremoloDivisiDots3\"] = \"\\uE22F\";\n    // U+E230  Divide measured tremolo by 4\n    Glyphs[\"tremoloDivisiDots4\"] = \"\\uE230\";\n    // U+E231  Divide measured tremolo by 6\n    Glyphs[\"tremoloDivisiDots6\"] = \"\\uE231\";\n    // U+E225  Fingered tremolo 1\n    Glyphs[\"tremoloFingered1\"] = \"\\uE225\";\n    // U+E226  Fingered tremolo 2\n    Glyphs[\"tremoloFingered2\"] = \"\\uE226\";\n    // U+E227  Fingered tremolo 3\n    Glyphs[\"tremoloFingered3\"] = \"\\uE227\";\n    // U+E228  Fingered tremolo 4\n    Glyphs[\"tremoloFingered4\"] = \"\\uE228\";\n    // U+E229  Fingered tremolo 5\n    Glyphs[\"tremoloFingered5\"] = \"\\uE229\";\n    // U+E5F2  Triple-tongue above\n    Glyphs[\"tripleTongueAbove\"] = \"\\uE5F2\";\n    // U+E5F3  Triple-tongue below\n    Glyphs[\"tripleTongueBelow\"] = \"\\uE5F3\";\n    // U+E880  Tuplet 0\n    Glyphs[\"tuplet0\"] = \"\\uE880\";\n    // U+E881  Tuplet 1\n    Glyphs[\"tuplet1\"] = \"\\uE881\";\n    // U+E882  Tuplet 2\n    Glyphs[\"tuplet2\"] = \"\\uE882\";\n    // U+E883  Tuplet 3\n    Glyphs[\"tuplet3\"] = \"\\uE883\";\n    // U+E884  Tuplet 4\n    Glyphs[\"tuplet4\"] = \"\\uE884\";\n    // U+E885  Tuplet 5\n    Glyphs[\"tuplet5\"] = \"\\uE885\";\n    // U+E886  Tuplet 6\n    Glyphs[\"tuplet6\"] = \"\\uE886\";\n    // U+E887  Tuplet 7\n    Glyphs[\"tuplet7\"] = \"\\uE887\";\n    // U+E888  Tuplet 8\n    Glyphs[\"tuplet8\"] = \"\\uE888\";\n    // U+E889  Tuplet 9\n    Glyphs[\"tuplet9\"] = \"\\uE889\";\n    // U+E88A  Tuplet colon\n    Glyphs[\"tupletColon\"] = \"\\uE88A\";\n    // U+E22C  Wieniawski unmeasured tremolo\n    Glyphs[\"unmeasuredTremolo\"] = \"\\uE22C\";\n    // U+E22D  Wieniawski unmeasured tremolo (simpler)\n    Glyphs[\"unmeasuredTremoloSimple\"] = \"\\uE22D\";\n    // U+E069  Unpitched percussion clef 1\n    Glyphs[\"unpitchedPercussionClef1\"] = \"\\uE069\";\n    // U+E06A  Unpitched percussion clef 2\n    Glyphs[\"unpitchedPercussionClef2\"] = \"\\uE06A\";\n    // U+E517  Ventiduesima\n    Glyphs[\"ventiduesima\"] = \"\\uE517\";\n    // U+E518  Ventiduesima alta\n    Glyphs[\"ventiduesimaAlta\"] = \"\\uE518\";\n    // U+E519  Ventiduesima bassa\n    Glyphs[\"ventiduesimaBassa\"] = \"\\uE519\";\n    // U+E51E  Ventiduesima bassa (mb)\n    Glyphs[\"ventiduesimaBassaMb\"] = \"\\uE51E\";\n    // U+E649  Finger click (Stockhausen)\n    Glyphs[\"vocalFingerClickStockhausen\"] = \"\\uE649\";\n    // U+E64B  Halb gesungen (semi-sprechgesang)\n    Glyphs[\"vocalHalbGesungen\"] = \"\\uE64B\";\n    // U+E640  Mouth closed\n    Glyphs[\"vocalMouthClosed\"] = \"\\uE640\";\n    // U+E642  Mouth open\n    Glyphs[\"vocalMouthOpen\"] = \"\\uE642\";\n    // U+E644  Mouth pursed\n    Glyphs[\"vocalMouthPursed\"] = \"\\uE644\";\n    // U+E641  Mouth slightly open\n    Glyphs[\"vocalMouthSlightlyOpen\"] = \"\\uE641\";\n    // U+E643  Mouth wide open\n    Glyphs[\"vocalMouthWideOpen\"] = \"\\uE643\";\n    // U+E647  Nasal voice\n    Glyphs[\"vocalNasalVoice\"] = \"\\uE647\";\n    // U+E645  Sprechgesang\n    Glyphs[\"vocalSprechgesang\"] = \"\\uE645\";\n    // U+E648  Tongue click (Stockhausen)\n    Glyphs[\"vocalTongueClickStockhausen\"] = \"\\uE648\";\n    // U+E64A  Tongue and finger click (Stockhausen)\n    Glyphs[\"vocalTongueFingerClickStockhausen\"] = \"\\uE64A\";\n    // U+E646  Combining sussurando for stem\n    Glyphs[\"vocalsSussurando\"] = \"\\uE646\";\n    // U+EAAA  Arpeggiato wiggle segment, downwards\n    Glyphs[\"wiggleArpeggiatoDown\"] = \"\\uEAAA\";\n    // U+EAAE  Arpeggiato arrowhead down\n    Glyphs[\"wiggleArpeggiatoDownArrow\"] = \"\\uEAAE\";\n    // U+EAAC  Arpeggiato downward swash\n    Glyphs[\"wiggleArpeggiatoDownSwash\"] = \"\\uEAAC\";\n    // U+EAA9  Arpeggiato wiggle segment, upwards\n    Glyphs[\"wiggleArpeggiatoUp\"] = \"\\uEAA9\";\n    // U+EAAD  Arpeggiato arrowhead up\n    Glyphs[\"wiggleArpeggiatoUpArrow\"] = \"\\uEAAD\";\n    // U+EAAB  Arpeggiato upward swash\n    Glyphs[\"wiggleArpeggiatoUpSwash\"] = \"\\uEAAB\";\n    // U+EAC9  Circular motion segment\n    Glyphs[\"wiggleCircular\"] = \"\\uEAC9\";\n    // U+EAC0  Constant circular motion segment\n    Glyphs[\"wiggleCircularConstant\"] = \"\\uEAC0\";\n    // U+EAC1  Constant circular motion segment (flipped)\n    Glyphs[\"wiggleCircularConstantFlipped\"] = \"\\uEAC1\";\n    // U+EAC3  Constant circular motion segment (flipped, large)\n    Glyphs[\"wiggleCircularConstantFlippedLarge\"] = \"\\uEAC3\";\n    // U+EAC2  Constant circular motion segment (large)\n    Glyphs[\"wiggleCircularConstantLarge\"] = \"\\uEAC2\";\n    // U+EACB  Circular motion end\n    Glyphs[\"wiggleCircularEnd\"] = \"\\uEACB\";\n    // U+EAC8  Circular motion segment, large\n    Glyphs[\"wiggleCircularLarge\"] = \"\\uEAC8\";\n    // U+EAC7  Circular motion segment, larger\n    Glyphs[\"wiggleCircularLarger\"] = \"\\uEAC7\";\n    // U+EAC6  Circular motion segment, larger still\n    Glyphs[\"wiggleCircularLargerStill\"] = \"\\uEAC6\";\n    // U+EAC5  Circular motion segment, largest\n    Glyphs[\"wiggleCircularLargest\"] = \"\\uEAC5\";\n    // U+EACA  Circular motion segment, small\n    Glyphs[\"wiggleCircularSmall\"] = \"\\uEACA\";\n    // U+EAC4  Circular motion start\n    Glyphs[\"wiggleCircularStart\"] = \"\\uEAC4\";\n    // U+EAAF  Glissando wiggle segment\n    Glyphs[\"wiggleGlissando\"] = \"\\uEAAF\";\n    // U+EABD  Group glissando 1\n    Glyphs[\"wiggleGlissandoGroup1\"] = \"\\uEABD\";\n    // U+EABE  Group glissando 2\n    Glyphs[\"wiggleGlissandoGroup2\"] = \"\\uEABE\";\n    // U+EABF  Group glissando 3\n    Glyphs[\"wiggleGlissandoGroup3\"] = \"\\uEABF\";\n    // U+EAF0  Quasi-random squiggle 1\n    Glyphs[\"wiggleRandom1\"] = \"\\uEAF0\";\n    // U+EAF1  Quasi-random squiggle 2\n    Glyphs[\"wiggleRandom2\"] = \"\\uEAF1\";\n    // U+EAF2  Quasi-random squiggle 3\n    Glyphs[\"wiggleRandom3\"] = \"\\uEAF2\";\n    // U+EAF3  Quasi-random squiggle 4\n    Glyphs[\"wiggleRandom4\"] = \"\\uEAF3\";\n    // U+EABB  Sawtooth line segment\n    Glyphs[\"wiggleSawtooth\"] = \"\\uEABB\";\n    // U+EABA  Narrow sawtooth line segment\n    Glyphs[\"wiggleSawtoothNarrow\"] = \"\\uEABA\";\n    // U+EABC  Wide sawtooth line segment\n    Glyphs[\"wiggleSawtoothWide\"] = \"\\uEABC\";\n    // U+EAB8  Square wave line segment\n    Glyphs[\"wiggleSquareWave\"] = \"\\uEAB8\";\n    // U+EAB7  Narrow square wave line segment\n    Glyphs[\"wiggleSquareWaveNarrow\"] = \"\\uEAB7\";\n    // U+EAB9  Wide square wave line segment\n    Glyphs[\"wiggleSquareWaveWide\"] = \"\\uEAB9\";\n    // U+EAA4  Trill wiggle segment\n    Glyphs[\"wiggleTrill\"] = \"\\uEAA4\";\n    // U+EAA3  Trill wiggle segment, fast\n    Glyphs[\"wiggleTrillFast\"] = \"\\uEAA3\";\n    // U+EAA2  Trill wiggle segment, faster\n    Glyphs[\"wiggleTrillFaster\"] = \"\\uEAA2\";\n    // U+EAA1  Trill wiggle segment, faster still\n    Glyphs[\"wiggleTrillFasterStill\"] = \"\\uEAA1\";\n    // U+EAA0  Trill wiggle segment, fastest\n    Glyphs[\"wiggleTrillFastest\"] = \"\\uEAA0\";\n    // U+EAA5  Trill wiggle segment, slow\n    Glyphs[\"wiggleTrillSlow\"] = \"\\uEAA5\";\n    // U+EAA6  Trill wiggle segment, slower\n    Glyphs[\"wiggleTrillSlower\"] = \"\\uEAA6\";\n    // U+EAA7  Trill wiggle segment, slower still\n    Glyphs[\"wiggleTrillSlowerStill\"] = \"\\uEAA7\";\n    // U+EAA8  Trill wiggle segment, slowest\n    Glyphs[\"wiggleTrillSlowest\"] = \"\\uEAA8\";\n    // U+EAEE  Vibrato largest, slower\n    Glyphs[\"wiggleVIbratoLargestSlower\"] = \"\\uEAEE\";\n    // U+EAE0  Vibrato medium, slower\n    Glyphs[\"wiggleVIbratoMediumSlower\"] = \"\\uEAE0\";\n    // U+EAB0  Vibrato / shake wiggle segment\n    Glyphs[\"wiggleVibrato\"] = \"\\uEAB0\";\n    // U+EAE5  Vibrato large, fast\n    Glyphs[\"wiggleVibratoLargeFast\"] = \"\\uEAE5\";\n    // U+EAE4  Vibrato large, faster\n    Glyphs[\"wiggleVibratoLargeFaster\"] = \"\\uEAE4\";\n    // U+EAE3  Vibrato large, faster still\n    Glyphs[\"wiggleVibratoLargeFasterStill\"] = \"\\uEAE3\";\n    // U+EAE2  Vibrato large, fastest\n    Glyphs[\"wiggleVibratoLargeFastest\"] = \"\\uEAE2\";\n    // U+EAE6  Vibrato large, slow\n    Glyphs[\"wiggleVibratoLargeSlow\"] = \"\\uEAE6\";\n    // U+EAE7  Vibrato large, slower\n    Glyphs[\"wiggleVibratoLargeSlower\"] = \"\\uEAE7\";\n    // U+EAE8  Vibrato large, slowest\n    Glyphs[\"wiggleVibratoLargeSlowest\"] = \"\\uEAE8\";\n    // U+EAEC  Vibrato largest, fast\n    Glyphs[\"wiggleVibratoLargestFast\"] = \"\\uEAEC\";\n    // U+EAEB  Vibrato largest, faster\n    Glyphs[\"wiggleVibratoLargestFaster\"] = \"\\uEAEB\";\n    // U+EAEA  Vibrato largest, faster still\n    Glyphs[\"wiggleVibratoLargestFasterStill\"] = \"\\uEAEA\";\n    // U+EAE9  Vibrato largest, fastest\n    Glyphs[\"wiggleVibratoLargestFastest\"] = \"\\uEAE9\";\n    // U+EAED  Vibrato largest, slow\n    Glyphs[\"wiggleVibratoLargestSlow\"] = \"\\uEAED\";\n    // U+EAEF  Vibrato largest, slowest\n    Glyphs[\"wiggleVibratoLargestSlowest\"] = \"\\uEAEF\";\n    // U+EADE  Vibrato medium, fast\n    Glyphs[\"wiggleVibratoMediumFast\"] = \"\\uEADE\";\n    // U+EADD  Vibrato medium, faster\n    Glyphs[\"wiggleVibratoMediumFaster\"] = \"\\uEADD\";\n    // U+EADC  Vibrato medium, faster still\n    Glyphs[\"wiggleVibratoMediumFasterStill\"] = \"\\uEADC\";\n    // U+EADB  Vibrato medium, fastest\n    Glyphs[\"wiggleVibratoMediumFastest\"] = \"\\uEADB\";\n    // U+EADF  Vibrato medium, slow\n    Glyphs[\"wiggleVibratoMediumSlow\"] = \"\\uEADF\";\n    // U+EAE1  Vibrato medium, slowest\n    Glyphs[\"wiggleVibratoMediumSlowest\"] = \"\\uEAE1\";\n    // U+EAD7  Vibrato small, fast\n    Glyphs[\"wiggleVibratoSmallFast\"] = \"\\uEAD7\";\n    // U+EAD6  Vibrato small, faster\n    Glyphs[\"wiggleVibratoSmallFaster\"] = \"\\uEAD6\";\n    // U+EAD5  Vibrato small, faster still\n    Glyphs[\"wiggleVibratoSmallFasterStill\"] = \"\\uEAD5\";\n    // U+EAD4  Vibrato small, fastest\n    Glyphs[\"wiggleVibratoSmallFastest\"] = \"\\uEAD4\";\n    // U+EAD8  Vibrato small, slow\n    Glyphs[\"wiggleVibratoSmallSlow\"] = \"\\uEAD8\";\n    // U+EAD9  Vibrato small, slower\n    Glyphs[\"wiggleVibratoSmallSlower\"] = \"\\uEAD9\";\n    // U+EADA  Vibrato small, slowest\n    Glyphs[\"wiggleVibratoSmallSlowest\"] = \"\\uEADA\";\n    // U+EAD0  Vibrato smallest, fast\n    Glyphs[\"wiggleVibratoSmallestFast\"] = \"\\uEAD0\";\n    // U+EACF  Vibrato smallest, faster\n    Glyphs[\"wiggleVibratoSmallestFaster\"] = \"\\uEACF\";\n    // U+EACE  Vibrato smallest, faster still\n    Glyphs[\"wiggleVibratoSmallestFasterStill\"] = \"\\uEACE\";\n    // U+EACD  Vibrato smallest, fastest\n    Glyphs[\"wiggleVibratoSmallestFastest\"] = \"\\uEACD\";\n    // U+EAD1  Vibrato smallest, slow\n    Glyphs[\"wiggleVibratoSmallestSlow\"] = \"\\uEAD1\";\n    // U+EAD2  Vibrato smallest, slower\n    Glyphs[\"wiggleVibratoSmallestSlower\"] = \"\\uEAD2\";\n    // U+EAD3  Vibrato smallest, slowest\n    Glyphs[\"wiggleVibratoSmallestSlowest\"] = \"\\uEAD3\";\n    // U+EACC  Vibrato start\n    Glyphs[\"wiggleVibratoStart\"] = \"\\uEACC\";\n    // U+EAB1  Wide vibrato / shake wiggle segment\n    Glyphs[\"wiggleVibratoWide\"] = \"\\uEAB1\";\n    // U+EAB5  Wavy line segment\n    Glyphs[\"wiggleWavy\"] = \"\\uEAB5\";\n    // U+EAB4  Narrow wavy line segment\n    Glyphs[\"wiggleWavyNarrow\"] = \"\\uEAB4\";\n    // U+EAB6  Wide wavy line segment\n    Glyphs[\"wiggleWavyWide\"] = \"\\uEAB6\";\n    // U+E5F4  Closed hole\n    Glyphs[\"windClosedHole\"] = \"\\uE5F4\";\n    // U+E5FB  Flatter embouchure\n    Glyphs[\"windFlatEmbouchure\"] = \"\\uE5FB\";\n    // U+E5F6  Half-closed hole\n    Glyphs[\"windHalfClosedHole1\"] = \"\\uE5F6\";\n    // U+E5F7  Half-closed hole 2\n    Glyphs[\"windHalfClosedHole2\"] = \"\\uE5F7\";\n    // U+E5F8  Half-open hole\n    Glyphs[\"windHalfClosedHole3\"] = \"\\uE5F8\";\n    // U+E5FE  Somewhat relaxed embouchure\n    Glyphs[\"windLessRelaxedEmbouchure\"] = \"\\uE5FE\";\n    // U+E600  Somewhat tight embouchure\n    Glyphs[\"windLessTightEmbouchure\"] = \"\\uE600\";\n    // U+E60A  Mouthpiece or hand pop\n    Glyphs[\"windMouthpiecePop\"] = \"\\uE60A\";\n    // U+E607  Combining multiphonics (black) for stem\n    Glyphs[\"windMultiphonicsBlackStem\"] = \"\\uE607\";\n    // U+E609  Combining multiphonics (black and white) for stem\n    Glyphs[\"windMultiphonicsBlackWhiteStem\"] = \"\\uE609\";\n    // U+E608  Combining multiphonics (white) for stem\n    Glyphs[\"windMultiphonicsWhiteStem\"] = \"\\uE608\";\n    // U+E5F9  Open hole\n    Glyphs[\"windOpenHole\"] = \"\\uE5F9\";\n    // U+E606  Much more reed (push inwards)\n    Glyphs[\"windReedPositionIn\"] = \"\\uE606\";\n    // U+E604  Normal reed position\n    Glyphs[\"windReedPositionNormal\"] = \"\\uE604\";\n    // U+E605  Very little reed (pull outwards)\n    Glyphs[\"windReedPositionOut\"] = \"\\uE605\";\n    // U+E5FD  Relaxed embouchure\n    Glyphs[\"windRelaxedEmbouchure\"] = \"\\uE5FD\";\n    // U+E60B  Rim only\n    Glyphs[\"windRimOnly\"] = \"\\uE60B\";\n    // U+E5FC  Sharper embouchure\n    Glyphs[\"windSharpEmbouchure\"] = \"\\uE5FC\";\n    // U+E603  Very tight embouchure / strong air pressure\n    Glyphs[\"windStrongAirPressure\"] = \"\\uE603\";\n    // U+E5F5  Three-quarters closed hole\n    Glyphs[\"windThreeQuartersClosedHole\"] = \"\\uE5F5\";\n    // U+E5FF  Tight embouchure\n    Glyphs[\"windTightEmbouchure\"] = \"\\uE5FF\";\n    // U+E5FA  Trill key\n    Glyphs[\"windTrillKey\"] = \"\\uE5FA\";\n    // U+E601  Very tight embouchure\n    Glyphs[\"windVeryTightEmbouchure\"] = \"\\uE601\";\n    // U+E602  Very relaxed embouchure / weak air-pressure\n    Glyphs[\"windWeakAirPressure\"] = \"\\uE602\";\n})(Glyphs || (Glyphs = {}));\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { RuntimeError } from './util';\n/** Music implements some standard music theory routines. */\nexport class Music {\n    /** Number of an canonical notes (12). */\n    static get NUM_TONES() {\n        return this.canonicalNotes.length;\n    }\n    /** Names of root notes ('c', 'd',...) */\n    static get roots() {\n        return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];\n    }\n    /** Values of the root notes.*/\n    static get rootValues() {\n        return [0, 2, 4, 5, 7, 9, 11];\n    }\n    /** Indexes of the root notes.*/\n    static get rootIndexes() {\n        return {\n            c: 0,\n            d: 1,\n            e: 2,\n            f: 3,\n            g: 4,\n            a: 5,\n            b: 6,\n        };\n    }\n    /** Names of canonical notes ('c', 'c#', 'd',...). */\n    static get canonicalNotes() {\n        return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];\n    }\n    /** Names of diatonic intervals ('unison', 'm2', 'M2',...). */\n    static get diatonicIntervals() {\n        return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];\n    }\n    /** NoteAccidental associated to diatonic intervals. */\n    static get diatonicAccidentals() {\n        return {\n            unison: { note: 0, accidental: 0 },\n            m2: { note: 1, accidental: -1 },\n            M2: { note: 1, accidental: 0 },\n            m3: { note: 2, accidental: -1 },\n            M3: { note: 2, accidental: 0 },\n            p4: { note: 3, accidental: 0 },\n            dim5: { note: 4, accidental: -1 },\n            p5: { note: 4, accidental: 0 },\n            m6: { note: 5, accidental: -1 },\n            M6: { note: 5, accidental: 0 },\n            b7: { note: 6, accidental: -1 },\n            M7: { note: 6, accidental: 0 },\n            octave: { note: 7, accidental: 0 },\n        };\n    }\n    /** Semitones shift associated to intervals .*/\n    static get intervals() {\n        return {\n            u: 0,\n            unison: 0,\n            m2: 1,\n            b2: 1,\n            min2: 1,\n            S: 1,\n            H: 1,\n            2: 2,\n            M2: 2,\n            maj2: 2,\n            T: 2,\n            W: 2,\n            m3: 3,\n            b3: 3,\n            min3: 3,\n            M3: 4,\n            3: 4,\n            maj3: 4,\n            4: 5,\n            p4: 5,\n            '#4': 6,\n            b5: 6,\n            aug4: 6,\n            dim5: 6,\n            5: 7,\n            p5: 7,\n            '#5': 8,\n            b6: 8,\n            aug5: 8,\n            6: 9,\n            M6: 9,\n            maj6: 9,\n            b7: 10,\n            m7: 10,\n            min7: 10,\n            dom7: 10,\n            M7: 11,\n            maj7: 11,\n            8: 12,\n            octave: 12,\n        };\n    }\n    /** Semitones shifts associated with scales. */\n    static get scales() {\n        return {\n            major: [2, 2, 1, 2, 2, 2, 1],\n            minor: [2, 1, 2, 2, 1, 2, 2],\n            ionian: [2, 2, 1, 2, 2, 2, 1],\n            dorian: [2, 1, 2, 2, 2, 1, 2],\n            phyrgian: [1, 2, 2, 2, 1, 2, 2],\n            lydian: [2, 2, 2, 1, 2, 2, 1],\n            mixolydian: [2, 2, 1, 2, 2, 1, 2],\n            aeolian: [2, 1, 2, 2, 1, 2, 2],\n            locrian: [1, 2, 2, 1, 2, 2, 2],\n        };\n    }\n    /** Scales associated with m (minor) and M (major). */\n    static get scaleTypes() {\n        return {\n            M: Music.scales.major,\n            m: Music.scales.minor,\n        };\n    }\n    /** Accidentals abbreviations. */\n    static get accidentals() {\n        return ['bb', 'b', 'n', '#', '##'];\n    }\n    /** Note values. */\n    static get noteValues() {\n        return {\n            c: { rootIndex: 0, intVal: 0 },\n            cn: { rootIndex: 0, intVal: 0 },\n            'c#': { rootIndex: 0, intVal: 1 },\n            'c##': { rootIndex: 0, intVal: 2 },\n            cb: { rootIndex: 0, intVal: 11 },\n            cbb: { rootIndex: 0, intVal: 10 },\n            d: { rootIndex: 1, intVal: 2 },\n            dn: { rootIndex: 1, intVal: 2 },\n            'd#': { rootIndex: 1, intVal: 3 },\n            'd##': { rootIndex: 1, intVal: 4 },\n            db: { rootIndex: 1, intVal: 1 },\n            dbb: { rootIndex: 1, intVal: 0 },\n            e: { rootIndex: 2, intVal: 4 },\n            en: { rootIndex: 2, intVal: 4 },\n            'e#': { rootIndex: 2, intVal: 5 },\n            'e##': { rootIndex: 2, intVal: 6 },\n            eb: { rootIndex: 2, intVal: 3 },\n            ebb: { rootIndex: 2, intVal: 2 },\n            f: { rootIndex: 3, intVal: 5 },\n            fn: { rootIndex: 3, intVal: 5 },\n            'f#': { rootIndex: 3, intVal: 6 },\n            'f##': { rootIndex: 3, intVal: 7 },\n            fb: { rootIndex: 3, intVal: 4 },\n            fbb: { rootIndex: 3, intVal: 3 },\n            g: { rootIndex: 4, intVal: 7 },\n            gn: { rootIndex: 4, intVal: 7 },\n            'g#': { rootIndex: 4, intVal: 8 },\n            'g##': { rootIndex: 4, intVal: 9 },\n            gb: { rootIndex: 4, intVal: 6 },\n            gbb: { rootIndex: 4, intVal: 5 },\n            a: { rootIndex: 5, intVal: 9 },\n            an: { rootIndex: 5, intVal: 9 },\n            'a#': { rootIndex: 5, intVal: 10 },\n            'a##': { rootIndex: 5, intVal: 11 },\n            ab: { rootIndex: 5, intVal: 8 },\n            abb: { rootIndex: 5, intVal: 7 },\n            b: { rootIndex: 6, intVal: 11 },\n            bn: { rootIndex: 6, intVal: 11 },\n            'b#': { rootIndex: 6, intVal: 0 },\n            'b##': { rootIndex: 6, intVal: 1 },\n            bb: { rootIndex: 6, intVal: 10 },\n            bbb: { rootIndex: 6, intVal: 9 },\n        };\n    }\n    isValidNoteValue(note) {\n        return note >= 0 && note < Music.canonicalNotes.length;\n    }\n    isValidIntervalValue(interval) {\n        return interval >= 0 && interval < Music.diatonicIntervals.length;\n    }\n    /** Return root and accidental associated to a note. */\n    getNoteParts(noteString) {\n        if (!noteString || noteString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        if (noteString.length > 3) {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n        const note = noteString.toLowerCase();\n        const regex = /^([cdefgab])(b|bb|n|#|##)?$/;\n        const match = regex.exec(note);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            return {\n                root,\n                accidental,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', 'Invalid note name: ' + noteString);\n        }\n    }\n    /** Return root, accidental and type associated to a key. */\n    getKeyParts(keyString) {\n        if (!keyString || keyString.length < 1) {\n            throw new RuntimeError('BadArguments', 'Invalid key: ' + keyString);\n        }\n        const key = keyString.toLowerCase();\n        // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.\n        const regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;\n        const match = regex.exec(key);\n        if (match !== null) {\n            const root = match[1];\n            const accidental = match[2];\n            let type = match[3];\n            // Unspecified type implies major\n            if (!type)\n                type = 'M';\n            return {\n                root,\n                accidental,\n                type,\n            };\n        }\n        else {\n            throw new RuntimeError('BadArguments', `Invalid key: ${keyString}`);\n        }\n    }\n    /** Note value associated to a note name. */\n    getNoteValue(noteString) {\n        const value = Music.noteValues[noteString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid note name: ${noteString}`);\n        }\n        return value.intVal;\n    }\n    /** Interval value associated to an interval name. */\n    getIntervalValue(intervalString) {\n        const value = Music.intervals[intervalString];\n        if (value === undefined) {\n            throw new RuntimeError('BadArguments', `Invalid interval name: ${intervalString}`);\n        }\n        return value;\n    }\n    /** Canonical note name associated to a value. */\n    getCanonicalNoteName(noteValue) {\n        if (!this.isValidNoteValue(noteValue)) {\n            throw new RuntimeError('BadArguments', `Invalid note value: ${noteValue}`);\n        }\n        return Music.canonicalNotes[noteValue];\n    }\n    /** Interval name associated to a value. */\n    getCanonicalIntervalName(intervalValue) {\n        if (!this.isValidIntervalValue(intervalValue)) {\n            throw new RuntimeError('BadArguments', `Invalid interval value: ${intervalValue}`);\n        }\n        return Music.diatonicIntervals[intervalValue];\n    }\n    /**\n     * Given a note, interval, and interval direction, produce the relative note.\n     */\n    getRelativeNoteValue(noteValue, intervalValue, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        let sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;\n        if (sum < 0)\n            sum += Music.NUM_TONES;\n        return sum;\n    }\n    /**\n     * Given a root and note value, produce the relative note name.\n     */\n    getRelativeNoteName(root, noteValue) {\n        const parts = this.getNoteParts(root);\n        const rootValue = this.getNoteValue(parts.root);\n        let interval = noteValue - rootValue;\n        if (Math.abs(interval) > Music.NUM_TONES - 3) {\n            let multiplier = 1;\n            if (interval > 0)\n                multiplier = -1;\n            // Possibly wrap around. (Add +1 for modulo operator)\n            const reverseInterval = ((noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES) * multiplier;\n            if (Math.abs(reverseInterval) > 2) {\n                throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n            }\n            else {\n                interval = reverseInterval;\n            }\n        }\n        if (Math.abs(interval) > 2) {\n            throw new RuntimeError('BadArguments', `Notes not related: ${root}, ${noteValue})`);\n        }\n        let relativeNoteName = parts.root;\n        if (interval > 0) {\n            for (let i = 1; i <= interval; ++i) {\n                relativeNoteName += '#';\n            }\n        }\n        else if (interval < 0) {\n            for (let i = -1; i >= interval; --i) {\n                relativeNoteName += 'b';\n            }\n        }\n        return relativeNoteName;\n    }\n    /**\n     * Return scale tones, given intervals. Each successive interval is\n     * relative to the previous one, e.g., Major Scale:\n     *\n     *   TTSTTTS = [2,2,1,2,2,2,1]\n     *\n     * When used with key = 0, returns C scale (which is isomorphic to\n     * interval list).\n     */\n    getScaleTones(key, intervals) {\n        const tones = [key];\n        let nextNote = key;\n        for (let i = 0; i < intervals.length; i++) {\n            nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);\n            if (nextNote !== key)\n                tones.push(nextNote);\n        }\n        return tones;\n    }\n    /**\n     * Return the interval of a note, given a diatonic scale.\n     * e.g., given the scale C, and the note E, returns M3.\n     */\n    getIntervalBetween(note1, note2, direction = 1) {\n        if (direction !== 1 && direction !== -1) {\n            throw new RuntimeError('BadArguments', `Invalid direction: ${direction}`);\n        }\n        if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {\n            throw new RuntimeError('BadArguments', `Invalid notes: ${note1}, ${note2}`);\n        }\n        let difference = direction === 1 ? note2 - note1 : note1 - note2;\n        if (difference < 0)\n            difference += Music.NUM_TONES;\n        return difference;\n    }\n    /**\n     * Create a scale map that represents the pitch state for a\n     * `keySignature`. For example, passing a `G` to `keySignature` would\n     * return a scale map with every note naturalized except for `F` which\n     * has an `F#` state.\n     */\n    createScaleMap(keySignature) {\n        const keySigParts = this.getKeyParts(keySignature);\n        if (!keySigParts.type)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: undefined');\n        const scaleName = Music.scaleTypes[keySigParts.type];\n        let keySigString = keySigParts.root;\n        if (keySigParts.accidental)\n            keySigString += keySigParts.accidental;\n        if (!scaleName)\n            throw new RuntimeError('BadArguments', 'Unsupported key type: ' + keySignature);\n        const scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);\n        const noteLocation = Music.rootIndexes[keySigParts.root];\n        const scaleMap = {};\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            let noteName = this.getRelativeNoteName(rootName, scale[i]);\n            if (noteName.length === 1) {\n                noteName += 'n';\n            }\n            scaleMap[rootName] = noteName;\n        }\n        return scaleMap;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { Fraction } from './fraction';\nimport { Glyphs } from './glyphs';\nimport { RuntimeError } from './util';\nconst RESOLUTION = 16384;\n/**\n * Map duration numbers to 'ticks', the unit of duration used throughout VexFlow.\n * For example, a quarter note is 4, so it maps to RESOLUTION / 4 = 4096 ticks.\n */\nconst durations = {\n    '1/2': RESOLUTION * 2,\n    1: RESOLUTION / 1,\n    2: RESOLUTION / 2,\n    4: RESOLUTION / 4,\n    8: RESOLUTION / 8,\n    16: RESOLUTION / 16,\n    32: RESOLUTION / 32,\n    64: RESOLUTION / 64,\n    128: RESOLUTION / 128,\n    256: RESOLUTION / 256,\n};\nconst durationAliases = {\n    w: '1',\n    h: '2',\n    q: '4',\n    // This is the default duration used to render bars (BarNote). Bars no longer\n    // consume ticks, so this should be a no-op.\n    // TODO(0xfe): This needs to be cleaned up.\n    b: '256',\n};\nconst keySignatures = {\n    C: { num: 0 },\n    Am: { num: 0 },\n    F: { accidental: 'b', num: 1 },\n    Dm: { accidental: 'b', num: 1 },\n    Bb: { accidental: 'b', num: 2 },\n    Gm: { accidental: 'b', num: 2 },\n    Eb: { accidental: 'b', num: 3 },\n    Cm: { accidental: 'b', num: 3 },\n    Ab: { accidental: 'b', num: 4 },\n    Fm: { accidental: 'b', num: 4 },\n    Db: { accidental: 'b', num: 5 },\n    Bbm: { accidental: 'b', num: 5 },\n    Gb: { accidental: 'b', num: 6 },\n    Ebm: { accidental: 'b', num: 6 },\n    Cb: { accidental: 'b', num: 7 },\n    Abm: { accidental: 'b', num: 7 },\n    G: { accidental: '#', num: 1 },\n    Em: { accidental: '#', num: 1 },\n    D: { accidental: '#', num: 2 },\n    Bm: { accidental: '#', num: 2 },\n    A: { accidental: '#', num: 3 },\n    'F#m': { accidental: '#', num: 3 },\n    E: { accidental: '#', num: 4 },\n    'C#m': { accidental: '#', num: 4 },\n    B: { accidental: '#', num: 5 },\n    'G#m': { accidental: '#', num: 5 },\n    'F#': { accidental: '#', num: 6 },\n    'D#m': { accidental: '#', num: 6 },\n    'C#': { accidental: '#', num: 7 },\n    'A#m': { accidental: '#', num: 7 },\n};\nconst clefs = {\n    treble: { lineShift: 0 },\n    bass: { lineShift: 6 },\n    tenor: { lineShift: 4 },\n    alto: { lineShift: 3 },\n    soprano: { lineShift: 1 },\n    percussion: { lineShift: 0 },\n    'mezzo-soprano': { lineShift: 2 },\n    'baritone-c': { lineShift: 5 },\n    'baritone-f': { lineShift: 5 },\n    subbass: { lineShift: 7 },\n    french: { lineShift: -1 },\n};\nconst notesInfo = {\n    C: { index: 0, intVal: 0 },\n    CN: { index: 0, intVal: 0 },\n    'C#': { index: 0, intVal: 1 },\n    'C##': { index: 0, intVal: 2 },\n    CB: { index: 0, intVal: 11 },\n    CBB: { index: 0, intVal: 10 },\n    D: { index: 1, intVal: 2 },\n    DN: { index: 1, intVal: 2 },\n    'D#': { index: 1, intVal: 3 },\n    'D##': { index: 1, intVal: 4 },\n    DB: { index: 1, intVal: 1 },\n    DBB: { index: 1, intVal: 0 },\n    E: { index: 2, intVal: 4 },\n    EN: { index: 2, intVal: 4 },\n    'E#': { index: 2, intVal: 5 },\n    'E##': { index: 2, intVal: 6 },\n    EB: { index: 2, intVal: 3 },\n    EBB: { index: 2, intVal: 2 },\n    F: { index: 3, intVal: 5 },\n    FN: { index: 3, intVal: 5 },\n    'F#': { index: 3, intVal: 6 },\n    'F##': { index: 3, intVal: 7 },\n    FB: { index: 3, intVal: 4 },\n    FBB: { index: 3, intVal: 3 },\n    G: { index: 4, intVal: 7 },\n    GN: { index: 4, intVal: 7 },\n    'G#': { index: 4, intVal: 8 },\n    'G##': { index: 4, intVal: 9 },\n    GB: { index: 4, intVal: 6 },\n    GBB: { index: 4, intVal: 5 },\n    A: { index: 5, intVal: 9 },\n    AN: { index: 5, intVal: 9 },\n    'A#': { index: 5, intVal: 10 },\n    'A##': { index: 5, intVal: 11 },\n    AB: { index: 5, intVal: 8 },\n    ABB: { index: 5, intVal: 7 },\n    B: { index: 6, intVal: 11 },\n    BN: { index: 6, intVal: 11 },\n    'B#': { index: 6, intVal: 12 },\n    'B##': { index: 6, intVal: 13 },\n    BB: { index: 6, intVal: 10 },\n    BBB: { index: 6, intVal: 9 },\n    R: { index: 6 }, // Rest\n    X: { index: 6 },\n};\nconst validNoteTypes = {\n    n: { name: 'note' },\n    r: { name: 'rest' },\n    h: { name: 'harmonic' },\n    m: { name: 'muted' },\n    s: { name: 'slash' },\n    g: { name: 'ghost' },\n    d: { name: 'diamond' },\n    x: { name: 'x' },\n    ci: { name: 'circled' },\n    cx: { name: 'circle x' },\n    sf: { name: 'slashed' },\n    sb: { name: 'slashed backward' },\n    sq: { name: 'square' },\n    tu: { name: 'triangle up' },\n    td: { name: 'triangle down' },\n};\nconst accidentals = {\n    '#': Glyphs.accidentalSharp,\n    '##': Glyphs.accidentalDoubleSharp,\n    b: Glyphs.accidentalFlat,\n    bb: Glyphs.accidentalDoubleFlat,\n    n: Glyphs.accidentalNatural,\n    '{': Glyphs.accidentalParensLeft,\n    '}': Glyphs.accidentalParensRight,\n    db: Glyphs.accidentalThreeQuarterTonesFlatZimmermann,\n    d: Glyphs.accidentalQuarterToneFlatStein,\n    '++': Glyphs.accidentalThreeQuarterTonesSharpStein,\n    '+': Glyphs.accidentalQuarterToneSharpStein,\n    '+-': Glyphs.accidentalKucukMucennebSharp,\n    bs: Glyphs.accidentalBakiyeFlat,\n    bss: Glyphs.accidentalBuyukMucennebFlat,\n    o: Glyphs.accidentalSori,\n    k: Glyphs.accidentalKoron,\n    bbs: Glyphs.accidentalBuyukMucennebSharp,\n    '++-': Glyphs.accidentalBuyukMucennebSharp,\n    ashs: Glyphs.accidentalBuyukMucennebSharp,\n    afhf: Glyphs.accidentalBuyukMucennebSharp,\n};\n// Helps determine the layout of accidentals.\nconst accidentalColumns = {\n    1: {\n        a: [1],\n        b: [1],\n    },\n    2: {\n        a: [1, 2],\n    },\n    3: {\n        a: [1, 3, 2],\n        b: [1, 2, 1],\n        secondOnBottom: [1, 2, 3],\n    },\n    4: {\n        a: [1, 3, 4, 2],\n        b: [1, 2, 3, 1],\n        spacedOutTetrachord: [1, 2, 1, 2],\n    },\n    5: {\n        a: [1, 3, 5, 4, 2],\n        b: [1, 2, 4, 3, 1],\n        spacedOutPentachord: [1, 2, 3, 2, 1],\n        verySpacedOutPentachord: [1, 2, 1, 2, 1],\n    },\n    6: {\n        a: [1, 3, 5, 6, 4, 2],\n        b: [1, 2, 4, 5, 3, 1],\n        spacedOutHexachord: [1, 3, 2, 1, 3, 2],\n        verySpacedOutHexachord: [1, 2, 1, 2, 1, 2],\n    },\n};\nconst articulations = {\n    'a.': { code: Glyphs.augmentationDot, betweenLines: true }, // Staccato\n    av: {\n        aboveCode: Glyphs.articStaccatissimoAbove,\n        belowCode: Glyphs.articStaccatissimoBelow,\n        betweenLines: true,\n    }, // Staccatissimo\n    'a>': {\n        aboveCode: Glyphs.articAccentAbove,\n        belowCode: Glyphs.articAccentBelow,\n        betweenLines: true,\n    }, // Accent\n    'a-': {\n        aboveCode: Glyphs.articTenutoAbove,\n        belowCode: Glyphs.articTenutoBelow,\n        betweenLines: true,\n    }, // Tenuto\n    'a^': {\n        aboveCode: Glyphs.articMarcatoAbove,\n        belowCode: Glyphs.articMarcatoBelow,\n        betweenLines: false,\n    }, // Marcato\n    'a+': { code: Glyphs.pluckedLeftHandPizzicato, betweenLines: false }, // Left hand pizzicato\n    ao: {\n        aboveCode: Glyphs.pluckedSnapPizzicatoAbove,\n        belowCode: Glyphs.pluckedSnapPizzicatoBelow,\n        betweenLines: false,\n    }, // Snap pizzicato\n    ah: { code: Glyphs.stringsHarmonic, betweenLines: false }, // Natural harmonic or open note\n    'a@': { aboveCode: Glyphs.fermataAbove, belowCode: Glyphs.fermataBelow, betweenLines: false }, // Fermata\n    'a@a': { code: Glyphs.fermataAbove, betweenLines: false }, // Fermata above staff\n    'a@u': { code: Glyphs.fermataBelow, betweenLines: false }, // Fermata below staff\n    'a@s': { aboveCode: Glyphs.fermataShortAbove, belowCode: Glyphs.fermataShortBelow, betweenLines: false }, // Fermata short\n    'a@as': { code: Glyphs.fermataShortAbove, betweenLines: false }, // Fermata short above staff\n    'a@us': { code: Glyphs.fermataShortBelow, betweenLines: false }, // Fermata short below staff\n    'a@l': { aboveCode: Glyphs.fermataLongAbove, belowCode: Glyphs.fermataLongBelow, betweenLines: false }, // Fermata long\n    'a@al': { code: Glyphs.fermataLongAbove, betweenLines: false }, // Fermata long above staff\n    'a@ul': { code: Glyphs.fermataLongBelow, betweenLines: false }, // Fermata long below staff\n    'a@vl': {\n        aboveCode: Glyphs.fermataVeryLongAbove,\n        belowCode: Glyphs.fermataVeryLongBelow,\n        betweenLines: false,\n    }, // Fermata very long\n    'a@avl': { code: Glyphs.fermataVeryLongAbove, betweenLines: false }, // Fermata very long above staff\n    'a@uvl': { code: Glyphs.fermataVeryLongBelow, betweenLines: false }, // Fermata very long below staff\n    'a|': { code: Glyphs.stringsUpBow, betweenLines: false }, // Bow up - up stroke\n    am: { code: Glyphs.stringsDownBow, betweenLines: false }, // Bow down - down stroke\n    'a,': { code: Glyphs.pictChokeCymbal, betweenLines: false }, // Choked\n};\nconst ornaments = {\n    mordent: Glyphs.ornamentShortTrill,\n    mordentInverted: Glyphs.ornamentMordent,\n    turn: Glyphs.ornamentTurn,\n    turnInverted: Glyphs.ornamentTurnSlash,\n    tr: Glyphs.ornamentTrill,\n    upprall: Glyphs.ornamentPrecompSlideTrillDAnglebert,\n    downprall: Glyphs.ornamentPrecompDoubleCadenceUpperPrefix,\n    prallup: Glyphs.ornamentPrecompTrillSuffixDandrieu,\n    pralldown: Glyphs.ornamentPrecompTrillLowerSuffix,\n    upmordent: Glyphs.ornamentPrecompSlideTrillBach,\n    downmordent: Glyphs.ornamentPrecompDoubleCadenceUpperPrefixTurn,\n    lineprall: Glyphs.ornamentPrecompAppoggTrill,\n    prallprall: Glyphs.ornamentTremblement,\n    scoop: Glyphs.brassScoop,\n    doit: Glyphs.brassDoitMedium,\n    fall: Glyphs.brassFallLipShort,\n    doitLong: Glyphs.brassLiftMedium,\n    fallLong: Glyphs.brassFallRoughMedium,\n    bend: Glyphs.brassBend,\n    plungerClosed: Glyphs.brassMuteClosed,\n    plungerOpen: Glyphs.brassMuteOpen,\n    flip: Glyphs.brassFlip,\n    jazzTurn: Glyphs.brassJazzTurn,\n    smear: Glyphs.brassSmear,\n};\nexport class Tables {\n    static clefProperties(clef) {\n        if (!clef || !(clef in clefs))\n            throw new RuntimeError('BadArgument', 'Invalid clef: ' + clef);\n        return clefs[clef];\n    }\n    /**\n     * @param keyOctaveGlyph a string in the format \"key/octave\" (e.g., \"c/5\") or \"key/octave/custom-note-head-code\" (e.g., \"g/5/t3\").\n     * @param clef\n     * @param params a struct with one option, `octaveShift` for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).\n     * @returns properties for the specified note.\n     */\n    static keyProperties(keyOctaveGlyph, clef = 'treble', type = 'N', params) {\n        let options = { octaveShift: 0, duration: '4' };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        const duration = Tables.sanitizeDuration(options.duration);\n        const pieces = keyOctaveGlyph.split('/');\n        if (pieces.length < 2) {\n            throw new RuntimeError('BadArguments', `First argument must be note/octave or note/octave/glyph-code: ${keyOctaveGlyph}`);\n        }\n        const key = pieces[0].toUpperCase();\n        type = type.toUpperCase();\n        const value = notesInfo[key];\n        if (!value)\n            throw new RuntimeError('BadArguments', 'Invalid key name: ' + key);\n        let octave = parseInt(pieces[1], 10);\n        // .octaveShift is the shift to compensate for clef 8va/8vb.\n        octave -= options.octaveShift;\n        const baseIndex = octave * 7 - 4 * 7;\n        let line = (baseIndex + value.index) / 2;\n        line += Tables.clefProperties(clef).lineShift;\n        // Integer value for note arithmetic.\n        const intValue = typeof value.intVal !== 'undefined' ? octave * 12 + value.intVal : undefined;\n        // If the user specified a glyph, overwrite the glyph code.\n        let code = '';\n        let glyphName = 'N';\n        if (pieces.length > 2 && pieces[2]) {\n            glyphName = pieces[2].toUpperCase();\n        }\n        else if (type !== 'N') {\n            glyphName = type;\n        }\n        else\n            glyphName = key;\n        code = this.codeNoteHead(glyphName, duration);\n        return {\n            key,\n            octave,\n            line,\n            intValue,\n            code,\n            displaced: false,\n        };\n    }\n    static integerToNote(integer) {\n        if (typeof integer === 'undefined' || integer < 0 || integer > 11) {\n            throw new RuntimeError('BadArguments', `integerToNote() requires an integer in the range [0, 11]: ${integer}`);\n        }\n        const table = {\n            0: 'C',\n            1: 'C#',\n            2: 'D',\n            3: 'D#',\n            4: 'E',\n            5: 'F',\n            6: 'F#',\n            7: 'G',\n            8: 'G#',\n            9: 'A',\n            10: 'A#',\n            11: 'B',\n        };\n        const noteValue = table[integer];\n        if (!noteValue) {\n            throw new RuntimeError('BadArguments', `Unknown note value for integer: ${integer}`);\n        }\n        return noteValue;\n    }\n    // Used by annotation.ts and bend.ts. Clearly this implementation only works for the default font size.\n    // TODO: The actual width depends on the font family, size, weight, style.\n    static textWidth(text) {\n        return 7 * text.toString().length;\n    }\n    static articulationCodes(artic) {\n        return articulations[artic];\n    }\n    static accidentalCodes(accidental) {\n        var _a;\n        return (_a = accidentals[accidental]) !== null && _a !== void 0 ? _a : accidental;\n    }\n    static ornamentCodes(ornament) {\n        var _a;\n        return (_a = ornaments[ornament]) !== null && _a !== void 0 ? _a : ornament;\n    }\n    static keySignature(spec) {\n        const keySpec = keySignatures[spec];\n        if (!keySpec) {\n            throw new RuntimeError('BadKeySignature', `Bad key signature spec: '${spec}'`);\n        }\n        if (!keySpec.accidental) {\n            return [];\n        }\n        const accidentalList = {\n            b: [2, 0.5, 2.5, 1, 3, 1.5, 3.5],\n            '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2],\n        };\n        const notes = accidentalList[keySpec.accidental];\n        const accList = [];\n        for (let i = 0; i < keySpec.num; ++i) {\n            const line = notes[i];\n            accList.push({ type: keySpec.accidental, line });\n        }\n        return accList;\n    }\n    static getKeySignatures() {\n        return keySignatures;\n    }\n    static hasKeySignature(spec) {\n        return spec in keySignatures;\n    }\n    /**\n     * Convert duration aliases to the number based duration.\n     * If the input isn't an alias, simply return the input.\n     * @param duration\n     * @returns Example: 'q' -> '4', '8' -> '8'\n     */\n    static sanitizeDuration(duration) {\n        const durationNumber = durationAliases[duration];\n        if (durationNumber !== undefined) {\n            duration = durationNumber;\n        }\n        if (durations[duration] === undefined) {\n            throw new RuntimeError('BadArguments', `The provided duration is not valid: ${duration}`);\n        }\n        return duration;\n    }\n    /** Convert the `duration` to a fraction. */\n    static durationToFraction(duration) {\n        return new Fraction().parse(Tables.sanitizeDuration(duration));\n    }\n    /** Convert the `duration` to a number. */\n    static durationToNumber(duration) {\n        return Tables.durationToFraction(duration).value();\n    }\n    /* Convert the `duration` to total ticks. */\n    static durationToTicks(duration) {\n        duration = Tables.sanitizeDuration(duration);\n        const ticks = durations[duration];\n        if (ticks === undefined) {\n            throw new RuntimeError('InvalidDuration');\n        }\n        return ticks;\n    }\n    static codeNoteHead(type, duration) {\n        switch (type) {\n            /* Diamond */\n            case 'D0':\n                return Glyphs.noteheadDiamondWhole;\n            case 'D1':\n                return Glyphs.noteheadDiamondHalf;\n            case 'D2':\n                return Glyphs.noteheadDiamondBlack;\n            case 'D3':\n                return Glyphs.noteheadDiamondBlack;\n            /* Triangle */\n            case 'T0':\n                return Glyphs.noteheadTriangleUpWhole;\n            case 'T1':\n                return Glyphs.noteheadTriangleUpHalf;\n            case 'T2':\n                return Glyphs.noteheadTriangleUpBlack;\n            case 'T3':\n                return Glyphs.noteheadTriangleUpBlack;\n            /* Cross */\n            case 'X0':\n                return Glyphs.noteheadXWhole;\n            case 'X1':\n                return Glyphs.noteheadXHalf;\n            case 'X2':\n                return Glyphs.noteheadXBlack;\n            case 'X3':\n                return Glyphs.noteheadCircleX;\n            /* Square */\n            case 'S1':\n                return Glyphs.noteheadSquareWhite;\n            case 'S2':\n                return Glyphs.noteheadSquareBlack;\n            /* Rectangle */\n            case 'R1':\n                return Glyphs.noteheadSquareWhite; // no smufl code\n            case 'R2':\n                return Glyphs.noteheadSquareWhite; // no smufl code\n            case 'DO':\n                return Glyphs.noteheadTriangleUpBlack;\n            case 'RE':\n                return Glyphs.noteheadMoonBlack;\n            case 'MI':\n                return Glyphs.noteheadDiamondBlack;\n            case 'FA':\n                return Glyphs.noteheadTriangleLeftBlack;\n            case 'FAUP':\n                return Glyphs.noteheadTriangleRightBlack;\n            case 'SO':\n                return Glyphs.noteheadBlack;\n            case 'LA':\n                return Glyphs.noteheadSquareBlack;\n            case 'TI':\n                return Glyphs.noteheadTriangleRoundDownBlack;\n            case 'DI': // Diamond\n            case 'H': // Harmonics\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadDiamondDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadDiamondWhole;\n                    case '2':\n                        return Glyphs.noteheadDiamondHalf;\n                    default:\n                        return Glyphs.noteheadDiamondBlack;\n                }\n            case 'X':\n            case 'M': // Muted\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadXDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadXWhole;\n                    case '2':\n                        return Glyphs.noteheadXHalf;\n                    default:\n                        return Glyphs.noteheadXBlack;\n                }\n            case 'CX':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadCircleXDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadCircleXWhole;\n                    case '2':\n                        return Glyphs.noteheadCircleXHalf;\n                    default:\n                        return Glyphs.noteheadCircleX;\n                }\n            case 'CI':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadCircledDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadCircledWhole;\n                    case '2':\n                        return Glyphs.noteheadCircledHalf;\n                    default:\n                        return Glyphs.noteheadCircledBlack;\n                }\n            case 'SQ':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadDoubleWholeSquare;\n                    case '1':\n                        return Glyphs.noteheadSquareWhite;\n                    case '2':\n                        return Glyphs.noteheadSquareWhite;\n                    default:\n                        return Glyphs.noteheadSquareBlack;\n                }\n            case 'TU':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadTriangleUpDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadTriangleUpWhole;\n                    case '2':\n                        return Glyphs.noteheadTriangleUpHalf;\n                    default:\n                        return Glyphs.noteheadTriangleUpBlack;\n                }\n            case 'TD':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadTriangleDownDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadTriangleDownWhole;\n                    case '2':\n                        return Glyphs.noteheadTriangleDownHalf;\n                    default:\n                        return Glyphs.noteheadTriangleDownBlack;\n                }\n            case 'SF':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadSlashedDoubleWhole1;\n                    case '1':\n                        return Glyphs.noteheadSlashedWhole1;\n                    case '2':\n                        return Glyphs.noteheadSlashedHalf1;\n                    default:\n                        return Glyphs.noteheadSlashedBlack1;\n                }\n            case 'SB':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadSlashedDoubleWhole2;\n                    case '1':\n                        return Glyphs.noteheadSlashedWhole2;\n                    case '2':\n                        return Glyphs.noteheadSlashedHalf2;\n                    default:\n                        return Glyphs.noteheadSlashedBlack2;\n                }\n            case 'R':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.restDoubleWhole;\n                    case '1':\n                        return Glyphs.restWhole;\n                    case '2':\n                        return Glyphs.restHalf;\n                    case '4':\n                        return Glyphs.restQuarter;\n                    case '8':\n                        return Glyphs.rest8th;\n                    case '16':\n                        return Glyphs.rest16th;\n                    case '32':\n                        return Glyphs.rest32nd;\n                    case '64':\n                        return Glyphs.rest64th;\n                    case '128':\n                        return Glyphs.rest128th;\n                }\n                break;\n            case 'S':\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadSlashWhiteDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadSlashWhiteWhole;\n                    case '2':\n                        return Glyphs.noteheadSlashWhiteHalf;\n                    default:\n                        return Glyphs.noteheadSlashVerticalEnds;\n                }\n            default:\n                switch (duration) {\n                    case '1/2':\n                        return Glyphs.noteheadDoubleWhole;\n                    case '1':\n                        return Glyphs.noteheadWhole;\n                    case '2':\n                        return Glyphs.noteheadHalf;\n                    default:\n                        return Glyphs.noteheadBlack;\n                }\n        }\n        return Glyphs.null;\n    }\n}\nTables.UNISON = true;\nTables.SOFTMAX_FACTOR = 10;\nTables.STEM_WIDTH = 1.5;\nTables.STEM_HEIGHT = 35;\nTables.STAVE_LINE_THICKNESS = 1;\nTables.RENDER_PRECISION_PLACES = 3;\nTables.RESOLUTION = RESOLUTION;\n// 1/2, 1, 2, 4, 8, 16, 32, 64, 128\n// NOTE: There is no 256 here! However, there are other mentions of 256 in this file.\n// For example, in durations has a 256 key, and sanitizeDuration() can return 256.\n// The sanitizeDuration() bit may need to be removed by 0xfe.\nTables.durationCodes = {\n    '1/2': {\n        stem: false,\n    },\n    1: {\n        stem: false,\n    },\n    2: {\n        stem: true,\n    },\n    4: {\n        stem: true,\n    },\n    8: {\n        stem: true,\n        beamCount: 1,\n        stemBeamExtension: 0,\n        codeFlagUp: Glyphs.flag8thUp,\n    },\n    16: {\n        beamCount: 2,\n        stemBeamExtension: 0,\n        stem: true,\n        codeFlagUp: Glyphs.flag16thUp,\n    },\n    32: {\n        beamCount: 3,\n        stemBeamExtension: 7.5,\n        stem: true,\n        codeFlagUp: Glyphs.flag32ndUp,\n    },\n    64: {\n        beamCount: 4,\n        stemBeamExtension: 15,\n        stem: true,\n        codeFlagUp: Glyphs.flag64thUp,\n    },\n    128: {\n        beamCount: 5,\n        stemBeamExtension: 22.5,\n        stem: true,\n        codeFlagUp: Glyphs.flag128thUp,\n    },\n};\nTables.NOTATION_FONT_SCALE = 39;\nTables.TABLATURE_FONT_SCALE = 39;\nTables.SLASH_NOTEHEAD_WIDTH = 15;\nTables.STAVE_LINE_DISTANCE = 10;\n// HACK:\n// Since text origins are positioned at the baseline, we must\n// compensate for the ascender of the text. Of course, 1 staff space is\n// a very poor approximation.\n//\n// This will be deprecated in the future. This is a temporary solution until\n// we have more robust text metrics.\nTables.TEXT_HEIGHT_OFFSET_HACK = 1;\nTables.accidentalColumnsTable = accidentalColumns;\n// TODO: Should these be moved to glyphs.ts? We could have a non-SMuFL section....\nTables.unicode = {\n    // ♯ accidental sharp\n    sharp: '\\u266f',\n    // ♭ accidental flat\n    flat: '\\u266d',\n    // ♮ accidental natural\n    natural: '\\u266e',\n    // △ major seventh\n    triangle: '\\u25b3',\n    // ø half-diminished\n    'o-with-slash': '\\u00f8',\n    // ° diminished\n    degrees: '\\u00b0',\n    // ○ diminished\n    circle: '\\u25cb',\n};\n/* The list of valid note types. Used by note.ts during parseNoteStruct(). */\nTables.validTypes = validNoteTypes;\n// Default time signature.\nTables.TIME4_4 = {\n    numBeats: 4,\n    beatValue: 4,\n    resolution: RESOLUTION,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n// @author Greg Ristow (modifications)\nimport { Fraction } from './fraction';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Music } from './music';\nimport { Tables } from './tables';\nimport { Category, isAccidental, isGraceNote, isGraceNoteGroup, isStaveNote } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Accidental.DEBUG)\n        log('VexFlow.Accidental', args);\n}\n/**\n * An `Accidental` inherits from `Modifier`, and is formatted within a\n * `ModifierContext`. Accidentals are modifiers that can be attached to\n * notes. Support is included for both western and microtonal accidentals.\n *\n * See `tests/accidental_tests.ts` for usage examples.\n */\nexport class Accidental extends Modifier {\n    /** Accidentals category string. */\n    static get CATEGORY() {\n        return Category.Accidental;\n    }\n    /** Arrange accidentals inside a ModifierContext. */\n    static format(accidentals, state) {\n        // If there are no accidentals, no need to format their positions.\n        if (!accidentals || accidentals.length === 0)\n            return;\n        const noteheadAccidentalPadding = Metrics.get('Accidental.noteheadAccidentalPadding');\n        const leftShift = state.leftShift + noteheadAccidentalPadding;\n        const accidentalSpacing = Metrics.get('Accidental.accidentalSpacing');\n        const additionalPadding = Metrics.get('Accidental.leftPadding'); // padding to the left of all accidentals\n        const accidentalLinePositionsAndSpaceNeeds = [];\n        let prevNote = undefined;\n        let extraXSpaceNeededForLeftDisplacedNotehead = 0;\n        // First determine the accidentals' Y positions from the note.keys\n        for (let i = 0; i < accidentals.length; ++i) {\n            const accidental = accidentals[i];\n            const note = accidental.getNote();\n            const stave = note.getStave();\n            const index = accidental.checkIndex();\n            const props = note.getKeyProps()[index];\n            if (note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    // If the current extra left-space needed isn't as big as this note's,\n                    // then we need to use this note's.\n                    extraXSpaceNeededForLeftDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx() - note.getXShift(), extraXSpaceNeededForLeftDisplacedNotehead);\n                }\n                prevNote = note;\n            }\n            if (stave) {\n                const lineSpace = stave.getSpacingBetweenLines();\n                const y = stave.getYForLine(props.line);\n                const accLine = Math.round((y / lineSpace) * 2) / 2;\n                accidentalLinePositionsAndSpaceNeeds.push({\n                    y,\n                    line: accLine,\n                    extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,\n                    accidental: accidental,\n                    spacingBetweenStaveLines: lineSpace,\n                });\n            }\n            else {\n                accidentalLinePositionsAndSpaceNeeds.push({\n                    line: props.line,\n                    extraXSpaceNeeded: extraXSpaceNeededForLeftDisplacedNotehead,\n                    accidental: accidental,\n                });\n            }\n        }\n        // Sort accidentals by line number.\n        accidentalLinePositionsAndSpaceNeeds.sort((a, b) => b.line - a.line);\n        const staveLineAccidentalLayoutMetrics = [];\n        // amount by which all accidentals must be shifted right or left for\n        // stem flipping, notehead shifting concerns.\n        let maxExtraXSpaceNeeded = 0;\n        // Create an array of unique line numbers (staveLineAccidentalLayoutMetrics)\n        // from accidentalLinePositionsAndSpaceNeeds\n        for (let i = 0; i < accidentalLinePositionsAndSpaceNeeds.length; i++) {\n            const accidentalLinePositionAndSpaceNeeds = accidentalLinePositionsAndSpaceNeeds[i];\n            const accidentalType = accidentalLinePositionAndSpaceNeeds.accidental.type;\n            const priorLineMetric = staveLineAccidentalLayoutMetrics[staveLineAccidentalLayoutMetrics.length - 1];\n            let currentLineMetric;\n            // if this is the first line, or a new line, add a staveLineAccidentalLayoutMetric\n            if (!priorLineMetric || (priorLineMetric === null || priorLineMetric === void 0 ? void 0 : priorLineMetric.line) !== accidentalLinePositionAndSpaceNeeds.line) {\n                currentLineMetric = {\n                    line: accidentalLinePositionAndSpaceNeeds.line,\n                    flatLine: true,\n                    dblSharpLine: true,\n                    numAcc: 0,\n                    width: 0,\n                    column: 0,\n                };\n                staveLineAccidentalLayoutMetrics.push(currentLineMetric);\n            }\n            else {\n                currentLineMetric = priorLineMetric;\n            }\n            // if this accidental is not a flat, the accidental needs 3.0 lines lower\n            // clearance instead of 2.5 lines for b or bb.\n            if (accidentalType !== 'b' && accidentalType !== 'bb') {\n                currentLineMetric.flatLine = false;\n            }\n            // if this accidental is not a double sharp, the accidental needs 3.0 lines above\n            if (accidentalType !== '##') {\n                currentLineMetric.dblSharpLine = false;\n            }\n            // Track how many accidentals are on this line:\n            currentLineMetric.numAcc++;\n            // Track the total xOffset needed for this line which will be needed\n            // for formatting lines w/ multiple accidentals:\n            // width = accidental width + universal spacing between accidentals\n            currentLineMetric.width += accidentalLinePositionAndSpaceNeeds.accidental.getWidth() + accidentalSpacing;\n            // if this extraXSpaceNeeded is the largest so far, use it as the starting point for\n            // all accidental columns.\n            maxExtraXSpaceNeeded = Math.max(accidentalLinePositionAndSpaceNeeds.extraXSpaceNeeded, maxExtraXSpaceNeeded);\n        }\n        // ### Place Accidentals in Columns\n        //\n        // Default to a classic triangular layout (middle accidental farthest left),\n        // but follow exceptions as outlined in G. Read's _Music Notation_ and\n        // Elaine Gould's _Behind Bars_.\n        //\n        // Additionally, this implements different vertical collision rules for\n        // flats (only need 2.5 lines clearance below) and double sharps (only\n        // need 2.5 lines of clearance above or below).\n        //\n        // Classic layouts and exception patterns are found in the 'tables.js'\n        // in 'Tables.accidentalColumnsTable'\n        //\n        // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,\n        // using as few columns as possible for the vertical structure.\n        //\n        // TODO (?): Allow column to be specified for an accidental at run-time?\n        let totalColumns = 0;\n        // establish the boundaries for a group of notes with clashing accidentals:\n        for (let i = 0; i < staveLineAccidentalLayoutMetrics.length; i++) {\n            let noFurtherConflicts = false;\n            const groupStart = i;\n            let groupEnd = i;\n            while (groupEnd + 1 < staveLineAccidentalLayoutMetrics.length && !noFurtherConflicts) {\n                // if this note conflicts with the next:\n                if (this.checkCollision(staveLineAccidentalLayoutMetrics[groupEnd], staveLineAccidentalLayoutMetrics[groupEnd + 1])) {\n                    // include the next note in the group:\n                    groupEnd++;\n                }\n                else {\n                    noFurtherConflicts = true;\n                }\n            }\n            // Gets a line from the `lineList`, relative to the current group\n            const getGroupLine = (index) => staveLineAccidentalLayoutMetrics[groupStart + index];\n            const getGroupLines = (indexes) => indexes.map(getGroupLine);\n            const lineDifference = (indexA, indexB) => {\n                const [a, b] = getGroupLines([indexA, indexB]).map((item) => item.line);\n                return a - b;\n            };\n            const notColliding = (...indexPairs) => indexPairs.map(getGroupLines).every(([line1, line2]) => !this.checkCollision(line1, line2));\n            // Set columns for the lines in this group:\n            const groupLength = groupEnd - groupStart + 1;\n            // Set the accidental column for each line of the group\n            let endCase = this.checkCollision(staveLineAccidentalLayoutMetrics[groupStart], staveLineAccidentalLayoutMetrics[groupEnd])\n                ? 'a'\n                : 'b';\n            switch (groupLength) {\n                case 3:\n                    if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {\n                        endCase = 'secondOnBottom';\n                    }\n                    break;\n                case 4:\n                    if (notColliding([0, 2], [1, 3])) {\n                        endCase = 'spacedOutTetrachord';\n                    }\n                    break;\n                case 5:\n                    if (endCase === 'b' && notColliding([1, 3])) {\n                        endCase = 'spacedOutPentachord';\n                        if (notColliding([0, 2], [2, 4])) {\n                            endCase = 'verySpacedOutPentachord';\n                        }\n                    }\n                    break;\n                case 6:\n                    if (notColliding([0, 3], [1, 4], [2, 5])) {\n                        endCase = 'spacedOutHexachord';\n                    }\n                    if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {\n                        endCase = 'verySpacedOutHexachord';\n                    }\n                    break;\n                default:\n                    break;\n            }\n            let groupMember;\n            let column;\n            // If the group contains seven members or more, use ascending parallel lines\n            // of accidentals, using as few columns as possible while avoiding collisions.\n            if (groupLength >= 7) {\n                // First, determine how many columns to use:\n                let patternLength = 2;\n                let collisionDetected = true;\n                while (collisionDetected === true) {\n                    collisionDetected = false;\n                    for (let line = 0; line + patternLength < staveLineAccidentalLayoutMetrics.length; line++) {\n                        if (this.checkCollision(staveLineAccidentalLayoutMetrics[line], staveLineAccidentalLayoutMetrics[line + patternLength])) {\n                            collisionDetected = true;\n                            patternLength++;\n                            break;\n                        }\n                    }\n                }\n                // Then, assign a column to each line of accidentals\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = ((groupMember - i) % patternLength) + 1;\n                    staveLineAccidentalLayoutMetrics[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            else {\n                // If the group contains fewer than seven members, use the layouts from\n                // the Tables.accidentalColumnsTable (See: tables.ts).\n                for (groupMember = i; groupMember <= groupEnd; groupMember++) {\n                    column = Tables.accidentalColumnsTable[groupLength][endCase][groupMember - i];\n                    staveLineAccidentalLayoutMetrics[groupMember].column = column;\n                    totalColumns = totalColumns > column ? totalColumns : column;\n                }\n            }\n            // Increment i to the last note that was set, so that if a lower set of notes\n            // does not conflict at all with this group, it can have its own classic shape.\n            i = groupEnd;\n        }\n        // ### Convert Columns to xOffsets\n        //\n        // This keeps columns aligned, even if they have different accidentals within them\n        // which sometimes results in a larger xOffset than is an accidental might need\n        // to preserve the symmetry of the accidental shape.\n        //\n        // Neither A.C. Vinci nor G. Read address this, and it typically only happens in\n        // music with complex chord clusters.\n        //\n        // TODO (?): Optionally allow closer compression of accidentals, instead of forcing\n        // parallel columns.\n        // track each column's max width, which will be used as initial shift of later columns:\n        const columnWidths = [];\n        const columnXOffsets = [];\n        for (let i = 0; i <= totalColumns; i++) {\n            columnWidths[i] = 0;\n            columnXOffsets[i] = 0;\n        }\n        columnWidths[0] = leftShift + maxExtraXSpaceNeeded;\n        columnXOffsets[0] = leftShift;\n        // Fill columnWidths with the widest needed x-space;\n        // this is what keeps the columns parallel.\n        staveLineAccidentalLayoutMetrics.forEach((line) => {\n            if (line.width > columnWidths[line.column])\n                columnWidths[line.column] = line.width;\n        });\n        for (let i = 1; i < columnWidths.length; i++) {\n            // this column's offset = this column's width + previous column's offset\n            columnXOffsets[i] = columnWidths[i] + columnXOffsets[i - 1];\n        }\n        const totalShift = columnXOffsets[columnXOffsets.length - 1];\n        // Set the xShift for each accidental according to column offsets:\n        let accCount = 0;\n        staveLineAccidentalLayoutMetrics.forEach((line) => {\n            let lineWidth = 0;\n            const lastAccOnLine = accCount + line.numAcc;\n            // handle all accidentals on a given line:\n            for (accCount; accCount < lastAccOnLine; accCount++) {\n                const xShift = columnXOffsets[line.column - 1] + lineWidth + maxExtraXSpaceNeeded;\n                accidentalLinePositionsAndSpaceNeeds[accCount].accidental.setXShift(xShift);\n                // keep track of the width of accidentals we've added so far, so that when\n                // we loop, we add space for them.\n                lineWidth += accidentalLinePositionsAndSpaceNeeds[accCount].accidental.getWidth() + accidentalSpacing;\n                L('Line, accCount, shift: ', line.line, accCount, xShift);\n            }\n        });\n        // update the overall layout with the full width of the accidental shapes:\n        state.leftShift = totalShift + additionalPadding;\n    }\n    /** Helper function to determine whether two lines of accidentals collide vertically */\n    static checkCollision(line1, line2) {\n        let clearance = line2.line - line1.line;\n        let clearanceRequired = 3;\n        // But less clearance is required for certain accidentals: b, bb and ##.\n        if (clearance > 0) {\n            // then line 2 is on top\n            clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;\n            if (line1.dblSharpLine)\n                clearance -= 0.5;\n        }\n        else {\n            // line 1 is on top\n            clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;\n            if (line2.dblSharpLine)\n                clearance -= 0.5;\n        }\n        const collision = Math.abs(clearance) < clearanceRequired;\n        L('Line1, Line2, Collision: ', line1.line, line2.line, collision);\n        return collision;\n    }\n    /**\n     * Use this method to automatically apply accidentals to a set of `voices`.\n     * The accidentals will be remembered between all the voices provided.\n     * Optionally, you can also provide an initial `keySignature`.\n     */\n    static applyAccidentals(voices, keySignature) {\n        const tickPositions = [];\n        const tickNoteMap = {};\n        // Sort the tickables in each voice by their tick position in the voice.\n        voices.forEach((voice) => {\n            const tickPosition = new Fraction(0, 1);\n            const tickable = voice.getTickables();\n            tickable.forEach((t) => {\n                if (t.shouldIgnoreTicks())\n                    return;\n                const notesAtPosition = tickNoteMap[tickPosition.value()];\n                if (!notesAtPosition) {\n                    tickPositions.push(tickPosition.value());\n                    tickNoteMap[tickPosition.value()] = [t];\n                }\n                else {\n                    notesAtPosition.push(t);\n                }\n                tickPosition.add(t.getTicks());\n            });\n        });\n        const music = new Music();\n        // Default key signature is C major.\n        if (!keySignature)\n            keySignature = 'C';\n        // Get the scale map, which represents the current state of each pitch.\n        const scaleMapKey = music.createScaleMap(keySignature);\n        const scaleMap = {};\n        tickPositions.forEach((tickPos) => {\n            const tickables = tickNoteMap[tickPos];\n            // Array to store all pitches that modified accidental states\n            // at this tick position\n            const modifiedPitches = [];\n            const processNote = (t) => {\n                // Only StaveNote implements .addModifier(), which is used below.\n                if (!isStaveNote(t) || t.isRest() || t.shouldIgnoreTicks()) {\n                    return;\n                }\n                // Go through each key and determine if an accidental should be applied.\n                const staveNote = t;\n                staveNote.keys.forEach((keyString, keyIndex) => {\n                    const key = music.getNoteParts(keyString.split('/')[0]);\n                    const octave = keyString.split('/')[1];\n                    // Force a natural for every key without an accidental\n                    const accidentalString = key.accidental || 'n';\n                    const pitch = key.root + accidentalString;\n                    // Determine if the current pitch has the same accidental\n                    // as the scale state\n                    if (!scaleMap[key.root + octave])\n                        scaleMap[key.root + octave] = scaleMapKey[key.root];\n                    const sameAccidental = scaleMap[key.root + octave] === pitch;\n                    // Determine if an identical pitch in the chord already\n                    // modified the accidental state\n                    const previouslyModified = modifiedPitches.indexOf(keyString) > -1;\n                    // Remove accidentals\n                    staveNote.getModifiers().forEach((modifier, index) => {\n                        if (isAccidental(modifier) && modifier.type == accidentalString && modifier.getIndex() == keyIndex) {\n                            staveNote.getModifiers().splice(index, 1);\n                        }\n                    });\n                    // Add the accidental to the StaveNote\n                    if (!sameAccidental || (sameAccidental && previouslyModified)) {\n                        // Modify the scale map so that the root pitch has an\n                        // updated state\n                        scaleMap[key.root + octave] = pitch;\n                        // Create the accidental\n                        const accidental = new Accidental(accidentalString);\n                        // Attach the accidental to the StaveNote\n                        staveNote.addModifier(accidental, keyIndex);\n                        // Add the pitch to list of pitches that modified accidentals\n                        modifiedPitches.push(keyString);\n                    }\n                });\n                // process grace notes\n                staveNote.getModifiers().forEach((modifier) => {\n                    if (isGraceNoteGroup(modifier)) {\n                        modifier.getGraceNotes().forEach(processNote);\n                    }\n                });\n            };\n            tickables.forEach(processNote);\n        });\n    }\n    /**\n     * Create accidental.\n     * @param type value from `VexFlow.accidentalCodes.accidentals` table in `tables.ts`.\n     * For example: `#`, `##`, `b`, `n`, etc.\n     */\n    constructor(type) {\n        super();\n        L('New accidental: ', type);\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        // Cautionary accidentals have parentheses around them\n        this.cautionary = false;\n        this.reset();\n    }\n    reset() {\n        this.text = '';\n        if (!this.cautionary) {\n            this.text += Tables.accidentalCodes(this.type);\n            this.fontInfo.size = Metrics.get('Accidental.fontSize');\n        }\n        else {\n            this.text += Tables.accidentalCodes('{');\n            this.text += Tables.accidentalCodes(this.type);\n            this.text += Tables.accidentalCodes('}');\n            this.fontInfo.size = Metrics.get('Accidental.cautionary.fontSize');\n        }\n        // Accidentals attached to grace notes are rendered smaller.\n        if (isGraceNote(this.note)) {\n            this.fontInfo.size = Metrics.get('Accidental.grace.fontSize');\n        }\n    }\n    /** Attach this accidental to `note`, which must be a `StaveNote`. */\n    setNote(note) {\n        defined(note, 'ArgumentError', `Bad note value: ${note}`);\n        this.note = note;\n        this.reset();\n        return this;\n    }\n    /** If called, draws parenthesis around accidental. */\n    setAsCautionary() {\n        this.cautionary = true;\n        this.reset();\n        return this;\n    }\n    /** Render accidental onto canvas. */\n    draw() {\n        const { type, position, index } = this;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        // Figure out the start `x` and `y` coordinates for note and index.\n        const start = note.getModifierStartXY(position, index);\n        this.x = start.x - this.width;\n        this.y = start.y;\n        L('Rendering: ', type, start.x, start.y);\n        this.renderText(ctx, 0, 0);\n    }\n}\n/** To enable logging for this class. Set `VexFlow.Accidental.DEBUG` to `true`. */\nAccidental.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// This file implements the `Stem` object. Generally this object is handled\n// by its parent `StemmableNote`.\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Stem.DEBUG)\n        log('VexFlow.Stem', args);\n}\nexport class Stem extends Element {\n    static get CATEGORY() {\n        return Category.Stem;\n    }\n    // Stem directions\n    static get UP() {\n        return 1;\n    }\n    static get DOWN() {\n        return -1;\n    }\n    // Theme\n    static get WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static get HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        super();\n        this.stemUpYOffset = 0;\n        this.stemDownYOffset = 0;\n        this.stemUpYBaseOffset = 0;\n        this.stemDownYBaseOffset = 0;\n        // Default notehead x bounds\n        this.xBegin = (_a = options === null || options === void 0 ? void 0 : options.xBegin) !== null && _a !== void 0 ? _a : 0;\n        this.xEnd = (_b = options === null || options === void 0 ? void 0 : options.xEnd) !== null && _b !== void 0 ? _b : 0;\n        // Y bounds for top/bottom most notehead\n        this.yTop = (_c = options === null || options === void 0 ? void 0 : options.yTop) !== null && _c !== void 0 ? _c : 0;\n        this.yBottom = (_d = options === null || options === void 0 ? void 0 : options.yBottom) !== null && _d !== void 0 ? _d : 0;\n        // Stem top extension\n        this.stemExtension = (_e = options === null || options === void 0 ? void 0 : options.stemExtension) !== null && _e !== void 0 ? _e : 0;\n        // Direction of the stem\n        this.stemDirection = (_f = options === null || options === void 0 ? void 0 : options.stemDirection) !== null && _f !== void 0 ? _f : 0;\n        // Flag to override all draw calls\n        this.hide = (options === null || options === void 0 ? void 0 : options.hide) || false;\n        this.isStemlet = (options === null || options === void 0 ? void 0 : options.isStemlet) || false;\n        this.stemletHeight = (_g = options === null || options === void 0 ? void 0 : options.stemletHeight) !== null && _g !== void 0 ? _g : 0;\n        // Use to adjust the rendered height without affecting\n        // the results of `.getExtents()`\n        this.renderHeightAdjustment = 0;\n        this.setOptions(options);\n    }\n    setOptions(options) {\n        var _a, _b, _c, _d;\n        // Changing where the stem meets the head\n        this.stemUpYOffset = (_a = options === null || options === void 0 ? void 0 : options.stemUpYOffset) !== null && _a !== void 0 ? _a : 0;\n        this.stemDownYOffset = (_b = options === null || options === void 0 ? void 0 : options.stemDownYOffset) !== null && _b !== void 0 ? _b : 0;\n        this.stemUpYBaseOffset = (_c = options === null || options === void 0 ? void 0 : options.stemUpYBaseOffset) !== null && _c !== void 0 ? _c : 0;\n        this.stemDownYBaseOffset = (_d = options === null || options === void 0 ? void 0 : options.stemDownYBaseOffset) !== null && _d !== void 0 ? _d : 0;\n    }\n    // Set the x bounds for the default notehead\n    setNoteHeadXBounds(xBegin, xEnd) {\n        this.xBegin = xBegin;\n        this.xEnd = xEnd;\n        return this;\n    }\n    // Set the direction of the stem in relation to the noteheads\n    setDirection(direction) {\n        this.stemDirection = direction;\n    }\n    // Set the extension for the stem, generally for flags or beams\n    setExtension(ext) {\n        this.stemExtension = ext;\n    }\n    getExtension() {\n        return this.stemExtension;\n    }\n    // The the y bounds for the top and bottom noteheads\n    setYBounds(yTop, yBottom) {\n        this.yTop = yTop;\n        this.yBottom = yBottom;\n    }\n    // Gets the entire height for the stem\n    getHeight() {\n        const yOffset = this.stemDirection === Stem.UP ? this.stemUpYOffset : this.stemDownYOffset;\n        const unsignedHeight = this.yBottom - this.yTop + (Stem.HEIGHT - yOffset + this.stemExtension); // parentheses just for grouping.\n        return unsignedHeight * this.stemDirection;\n    }\n    getBoundingBox() {\n        throw new RuntimeError('NotImplemented', 'getBoundingBox() not implemented.');\n    }\n    // Get the y coordinates for the very base of the stem to the top of\n    // the extension\n    getExtents() {\n        const isStemUp = this.stemDirection === Stem.UP;\n        const ys = [this.yTop, this.yBottom];\n        const stemHeight = Stem.HEIGHT + this.stemExtension;\n        const innerMostNoteheadY = (isStemUp ? Math.min : Math.max)(...ys);\n        const outerMostNoteheadY = (isStemUp ? Math.max : Math.min)(...ys);\n        const stemTipY = innerMostNoteheadY + stemHeight * -this.stemDirection;\n        return { topY: stemTipY, baseY: outerMostNoteheadY };\n    }\n    setVisibility(isVisible) {\n        this.hide = !isVisible;\n        return this;\n    }\n    setStemlet(isStemlet, stemletHeight) {\n        this.isStemlet = isStemlet;\n        this.stemletHeight = stemletHeight;\n        return this;\n    }\n    adjustHeightForFlag() {\n        this.renderHeightAdjustment = Metrics.get('Stem.heightAdjustmentForFlag', -3);\n    }\n    adjustHeightForBeam() {\n        this.renderHeightAdjustment = -Stem.WIDTH / 2;\n    }\n    // Render the stem onto the canvas\n    draw() {\n        this.setRendered();\n        if (this.hide)\n            return;\n        const ctx = this.checkContext();\n        let stemX;\n        let stemY;\n        const stemDirection = this.stemDirection;\n        let yBaseOffset = 0;\n        if (stemDirection === Stem.DOWN) {\n            // Down stems are rendered to the left of the head.\n            stemX = this.xBegin;\n            stemY = this.yTop + this.stemDownYOffset;\n            yBaseOffset = this.stemDownYBaseOffset;\n        }\n        else {\n            // Up stems are rendered to the right of the head.\n            stemX = this.xEnd;\n            stemY = this.yBottom - this.stemUpYOffset;\n            yBaseOffset = this.stemUpYBaseOffset;\n        }\n        const stemHeight = this.getHeight();\n        L('Rendering stem - ', 'Top Y: ', this.yTop, 'Bottom Y: ', this.yBottom);\n        // The offset from the stem's base which is required fo satisfy the stemlet height\n        const stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stemDirection : 0;\n        // Draw the stem\n        ctx.openGroup('stem', this.getAttribute('id'));\n        ctx.beginPath();\n        ctx.setLineWidth(Stem.WIDTH);\n        ctx.moveTo(stemX, stemY - stemletYOffset + yBaseOffset);\n        ctx.lineTo(stemX, stemY - stemHeight - this.renderHeightAdjustment * stemDirection);\n        ctx.stroke();\n        ctx.closeGroup();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.Stem.DEBUG` to `true`. */\nStem.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Font } from './font';\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStemmableNote, isTabNote } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Annotation.DEBUG)\n        log('VexFlow.Annotation', args);\n}\nexport var AnnotationHorizontalJustify;\n(function (AnnotationHorizontalJustify) {\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    AnnotationHorizontalJustify[AnnotationHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationHorizontalJustify || (AnnotationHorizontalJustify = {}));\nexport var AnnotationVerticalJustify;\n(function (AnnotationVerticalJustify) {\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"BOTTOM\"] = 3] = \"BOTTOM\";\n    AnnotationVerticalJustify[AnnotationVerticalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(AnnotationVerticalJustify || (AnnotationVerticalJustify = {}));\n/**\n * Annotations are modifiers that can be attached to\n * notes.\n *\n * See `tests/annotation_tests.ts` for usage examples.\n */\nexport class Annotation extends Modifier {\n    /** Annotations category string. */\n    static get CATEGORY() {\n        return Category.Annotation;\n    }\n    // Use the same padding for annotations as note head so the\n    // words don't run into each other.\n    static get minAnnotationPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Arrange annotations within a `ModifierContext` */\n    static format(annotations, state) {\n        if (!annotations || annotations.length === 0)\n            return false;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (let i = 0; i < annotations.length; ++i) {\n            const annotation = annotations[i];\n            // Text height is expressed in fractional stave spaces.\n            const textLines = (2 + Font.convertSizeToPixelValue(annotation.fontInfo.size)) / Tables.STAVE_LINE_DISTANCE;\n            let verticalSpaceNeeded = textLines;\n            const note = annotation.checkAttachedNote();\n            const glyphWidth = note.getGlyphWidth();\n            // Get the text width from the font metrics.\n            const textWidth = annotation.getWidth();\n            if (annotation.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n                maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                leftWidth = Math.max(leftWidth, textWidth) + Annotation.minAnnotationPadding;\n            }\n            else if (annotation.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n                maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                rightWidth = Math.max(rightWidth, textWidth);\n            }\n            else {\n                leftWidth = Math.max(leftWidth, textWidth / 2) + Annotation.minAnnotationPadding;\n                rightWidth = Math.max(rightWidth, textWidth / 2);\n                maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n            }\n            const stave = note.getStave();\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            let lines = 5;\n            if (isTabNote(note)) {\n                if (note.renderOptions.drawStem) {\n                    const stem = note.getStem();\n                    if (stem) {\n                        stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                    }\n                }\n                else {\n                    stemHeight = 0;\n                }\n            }\n            else if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem && note.getNoteType() === 'n') {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (annotation.verticalJustification === this.VerticalJustify.TOP) {\n                let noteLine = note.getLineNumber(true);\n                if (isTabNote(note)) {\n                    noteLine = lines - (note.leastString() - 0.5);\n                }\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                const curTop = noteLine + state.topTextLine + 0.5;\n                if (curTop < lines) {\n                    annotation.setTextLine(lines - noteLine);\n                    verticalSpaceNeeded += lines - noteLine;\n                    state.topTextLine = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.topTextLine);\n                    state.topTextLine += verticalSpaceNeeded;\n                }\n            }\n            else if (annotation.verticalJustification === this.VerticalJustify.BOTTOM) {\n                let noteLine = lines - note.getLineNumber();\n                if (isTabNote(note)) {\n                    noteLine = note.greatestString() - 1;\n                }\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                const curBottom = noteLine + state.textLine + 1;\n                if (curBottom < lines) {\n                    annotation.setTextLine(lines - curBottom);\n                    verticalSpaceNeeded += lines - curBottom;\n                    state.textLine = verticalSpaceNeeded;\n                }\n                else {\n                    annotation.setTextLine(state.textLine);\n                    state.textLine += verticalSpaceNeeded;\n                }\n            }\n            else {\n                annotation.setTextLine(state.textLine);\n            }\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));\n        state.leftShift += leftOverlap;\n        state.rightShift += rightOverlap;\n        return true;\n    }\n    /**\n     * Annotations inherit from `Modifier` and is positioned correctly when\n     * in a `ModifierContext`.\n     * Create a new `Annotation` with the string `text`.\n     */\n    constructor(text) {\n        super();\n        this.text = text;\n        this.horizontalJustification = AnnotationHorizontalJustify.CENTER;\n        // warning: the default in the constructor is TOP, but in the factory the default is BOTTOM.\n        // this is to support legacy application that may expect this.\n        this.verticalJustification = AnnotationVerticalJustify.TOP;\n    }\n    /**\n     * Set vertical position of text (above or below stave).\n     * @param just value in `AnnotationVerticalJustify`.\n     */\n    setVerticalJustification(just) {\n        this.verticalJustification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;\n        return this;\n    }\n    /**\n     * Get horizontal justification.\n     */\n    getJustification() {\n        return this.horizontalJustification;\n    }\n    /**\n     * Set horizontal justification.\n     * @param just value in `Annotation.Justify`.\n     */\n    setJustification(just) {\n        this.horizontalJustification = typeof just === 'string' ? Annotation.HorizontalJustifyString[just] : just;\n        return this;\n    }\n    /** Render text beside the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        const start = note.getModifierStartXY(ModifierPosition.ABOVE, this.index);\n        this.setRendered();\n        ctx.openGroup('annotation', this.getAttribute('id'));\n        const textWidth = this.getWidth();\n        const textHeight = Font.convertSizeToPixelValue(this.fontInfo.size);\n        let x;\n        let y;\n        if (this.horizontalJustification === AnnotationHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.RIGHT) {\n            x = start.x - textWidth;\n        }\n        else if (this.horizontalJustification === AnnotationHorizontalJustify.CENTER) {\n            x = start.x - textWidth / 2;\n        } /* CENTER_STEM */\n        else {\n            x = note.getStemX() - textWidth / 2;\n        }\n        let stemExt = {};\n        let spacing = 0;\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        if (hasStem) {\n            stemExt = note.checkStem().getExtents();\n            spacing = stave.getSpacingBetweenLines();\n        }\n        if (this.verticalJustification === AnnotationVerticalJustify.BOTTOM) {\n            // Use the largest (lowest) Y value\n            const ys = note.getYs();\n            y = ys.reduce((a, b) => (a > b ? a : b));\n            y += (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE + textHeight;\n            if (hasStem && stemDirection === Stem.DOWN) {\n                y = Math.max(y, stemExt.topY + textHeight + spacing * this.textLine);\n            }\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.CENTER) {\n            const yt = note.getYForTopText(this.textLine) - 1;\n            const yb = stave.getYForBottomText(this.textLine);\n            y = yt + (yb - yt) / 2 + textHeight / 2;\n        }\n        else if (this.verticalJustification === AnnotationVerticalJustify.TOP) {\n            const topY = Math.min(...note.getYs());\n            y = topY - (this.textLine + 1) * Tables.STAVE_LINE_DISTANCE;\n            if (hasStem && stemDirection === Stem.UP) {\n                // If the stem is above the stave already, go with default line width vs. actual\n                // since the lines between don't really matter.\n                spacing = stemExt.topY < stave.getTopLineTopY() ? Tables.STAVE_LINE_DISTANCE : spacing;\n                y = Math.min(y, stemExt.topY - spacing * (this.textLine + 1));\n            }\n        } /* CENTER_STEM */\n        else {\n            const extents = note.getStemExtents();\n            y = extents.topY + (extents.baseY - extents.topY) / 2 + textHeight / 2;\n        }\n        L('Rendering annotation: ', this.text, x, y);\n        this.x = x;\n        this.y = y;\n        this.renderText(ctx, 0, 0);\n        ctx.closeGroup();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.Annotation.DEBUG` to `true`. */\nAnnotation.DEBUG = false;\n/** Text annotations can be positioned and justified relative to the note. */\nAnnotation.HorizontalJustify = AnnotationHorizontalJustify;\nAnnotation.HorizontalJustifyString = {\n    left: AnnotationHorizontalJustify.LEFT,\n    right: AnnotationHorizontalJustify.RIGHT,\n    center: AnnotationHorizontalJustify.CENTER,\n    centerStem: AnnotationHorizontalJustify.CENTER_STEM,\n};\nAnnotation.VerticalJustify = AnnotationVerticalJustify;\nAnnotation.VerticalJustifyString = {\n    above: AnnotationVerticalJustify.TOP,\n    top: AnnotationVerticalJustify.TOP,\n    below: AnnotationVerticalJustify.BOTTOM,\n    bottom: AnnotationVerticalJustify.BOTTOM,\n    center: AnnotationVerticalJustify.CENTER,\n    centerStem: AnnotationVerticalJustify.CENTER_STEM,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns.\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isGraceNote, isStaveNote, isStemmableNote, isTabNote } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Articulation.DEBUG)\n        log('VexFlow.Articulation', args);\n}\nconst { ABOVE, BELOW } = Modifier.Position;\nfunction roundToNearestHalf(mathFn, value) {\n    return mathFn(value / 0.5) * 0.5;\n}\n// This includes both staff and ledger lines\nfunction isWithinLines(line, position) {\n    return position === ABOVE ? line <= 5 : line >= 1;\n}\nfunction getRoundingFunction(line, position) {\n    if (isWithinLines(line, position)) {\n        if (position === ABOVE) {\n            return Math.ceil;\n        }\n        else {\n            return Math.floor;\n        }\n    }\n    else {\n        return Math.round;\n    }\n}\nfunction snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {\n    // Initially, snap to nearest staff line or space\n    const snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);\n    const canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);\n    const onStaffLine = snappedLine % 1 === 0;\n    if (canSnapToStaffSpace && onStaffLine) {\n        const HALF_STAFF_SPACE = 0.5;\n        return snappedLine + HALF_STAFF_SPACE * -offsetDirection;\n    }\n    else {\n        return snappedLine;\n    }\n}\n// Helper function for checking if a Note object is either a StaveNote or a GraceNote.\nconst isStaveOrGraceNote = (note) => isStaveNote(note) || isGraceNote(note);\nexport function getTopY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return stemBaseY;\n            }\n        }\n        else {\n            return Math.min(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemTipY;\n            }\n            else {\n                return note.checkStave().getYForTopText(textLine);\n            }\n        }\n        else {\n            return note.checkStave().getYForTopText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\nexport function getBottomY(note, textLine) {\n    const stemDirection = note.getStemDirection();\n    const { topY: stemTipY, baseY: stemBaseY } = note.getStemExtents();\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return stemBaseY;\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return Math.max(...note.getYs());\n        }\n    }\n    else if (isTabNote(note)) {\n        if (note.hasStem()) {\n            if (stemDirection === Stem.UP) {\n                return note.checkStave().getYForBottomText(textLine);\n            }\n            else {\n                return stemTipY;\n            }\n        }\n        else {\n            return note.checkStave().getYForBottomText(textLine);\n        }\n    }\n    else {\n        throw new RuntimeError('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');\n    }\n}\n/**\n * Get the initial offset of the articulation from the y value of the starting position.\n * This is required because the top/bottom text positions already have spacing applied to\n * provide a \"visually pleasant\" default position. However the y values provided from\n * the stavenote's top/bottom do *not* have any pre-applied spacing. This function\n * normalizes this asymmetry.\n * @param note\n * @param position\n * @returns\n */\nexport function getInitialOffset(note, position) {\n    const isOnStemTip = (position === ABOVE && note.getStemDirection() === Stem.UP) ||\n        (position === BELOW && note.getStemDirection() === Stem.DOWN);\n    if (isStaveOrGraceNote(note)) {\n        if (note.hasStem() && isOnStemTip) {\n            return 0.5;\n        }\n        else {\n            // this amount is larger than the stem-tip offset because we start from\n            // the center of the notehead\n            return 1;\n        }\n    }\n    else {\n        if (note.hasStem() && isOnStemTip) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\n/**\n * Articulations and Accents are modifiers that can be\n * attached to notes. The complete list of articulations is available in\n * `tables.ts` under `VexFlow.articulationCodes`.\n *\n * See `tests/articulation_tests.ts` for usage examples.\n */\nexport class Articulation extends Modifier {\n    /** Articulations category string. */\n    static get CATEGORY() {\n        return Category.Articulation;\n    }\n    /**\n     * FIXME:\n     * Most of the complex formatting logic (ie: snapping to space) is\n     * actually done in .render(). But that logic belongs in this method.\n     *\n     * Unfortunately, this isn't possible because, by this point, stem lengths\n     * have not yet been finalized. Finalized stem lengths are required to determine the\n     * initial position of any stem-side articulation.\n     *\n     * This indicates that all objects should have their stave set before being\n     * formatted. It can't be an optional if you want accurate vertical positioning.\n     * Consistently positioned articulations that play nice with other modifiers\n     * won't be possible until we stop relying on render-time formatting.\n     *\n     * Ideally, when this function has completed, the vertical articulation positions\n     * should be ready to render without further adjustment. But the current state\n     * is far from this ideal.\n     */\n    static format(articulations, state) {\n        if (!articulations || articulations.length === 0)\n            return false;\n        const margin = 0.5;\n        let maxGlyphWidth = 0;\n        const getIncrement = (articulation, line, position) => roundToNearestHalf(getRoundingFunction(line, position), articulation.height / 10 + margin);\n        articulations.forEach((articulation) => {\n            const note = articulation.checkAttachedNote();\n            maxGlyphWidth = Math.max(note.getGlyphWidth(), maxGlyphWidth);\n            let lines = 5;\n            const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n            let stemHeight = 0;\n            // Decide if we need to consider beam direction in placement.\n            if (isStemmableNote(note)) {\n                const stem = note.getStem();\n                if (stem) {\n                    stemHeight = Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n            }\n            const stave = note.getStave();\n            if (stave) {\n                lines = stave.getNumLines();\n            }\n            if (articulation.getPosition() === ABOVE) {\n                let noteLine = note.getLineNumber(true);\n                if (stemDirection === Stem.UP) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.topTextLine, ABOVE);\n                const curTop = noteLine + state.topTextLine + 0.5;\n                // If articulation must be above stave, add lines between note and stave top\n                if (!articulation.articulation.betweenLines && curTop < lines) {\n                    increment += lines - curTop;\n                }\n                articulation.setTextLine(state.topTextLine);\n                state.topTextLine += increment;\n                articulation.setOrigin(0.5, 1);\n            }\n            else if (articulation.getPosition() === BELOW) {\n                let noteLine = Math.max(lines - note.getLineNumber(), 0);\n                if (stemDirection === Stem.DOWN) {\n                    noteLine += stemHeight;\n                }\n                let increment = getIncrement(articulation, state.textLine, BELOW);\n                const curBottom = noteLine + state.textLine + 0.5;\n                // if articulation must be below stave, add lines from note to stave bottom\n                if (!articulation.articulation.betweenLines && curBottom < lines) {\n                    increment += lines - curBottom;\n                }\n                articulation.setTextLine(state.textLine);\n                state.textLine += increment;\n                articulation.setOrigin(0.5, 0);\n            }\n        });\n        const width = articulations\n            .map((articulation) => articulation.getWidth())\n            .reduce((maxWidth, articWidth) => Math.max(articWidth, maxWidth));\n        const overlap = Math.min(Math.max(width - maxGlyphWidth, 0), Math.max(width - (state.leftShift + state.rightShift), 0));\n        state.leftShift += overlap / 2;\n        state.rightShift += overlap / 2;\n        return true;\n    }\n    static easyScoreHook({ articulations }, note, builder) {\n        if (!articulations)\n            return;\n        const articNameToCode = {\n            staccato: 'a.',\n            tenuto: 'a-',\n            accent: 'a>',\n        };\n        articulations\n            .split(',')\n            .map((articString) => articString.trim().split('.'))\n            .map(([name, position]) => {\n            const artic = { type: articNameToCode[name] };\n            if (position)\n                artic.position = Modifier.PositionString[position];\n            return builder.getFactory().Articulation(artic);\n        })\n            .map((artic) => note.addModifier(artic, 0));\n    }\n    /**\n     * Create a new articulation.\n     * @param type entry in `VexFlow.articulationCodes` in `tables.ts` or Glyph code.\n     *\n     * Notes default positions (see https://w3c.github.io/smufl/latest/tables/articulation.html):\n     * - Even codes will be positioned ABOVE\n     * - Odd codes will be positioned BELOW\n     */\n    constructor(type) {\n        var _a;\n        super();\n        this.heightShift = 0;\n        this.type = type;\n        this.position = ABOVE;\n        if (!Tables.articulationCodes(this.type)) {\n            if (((_a = this.type.codePointAt(0)) !== null && _a !== void 0 ? _a : 0) % 2 === 0)\n                this.position = ABOVE;\n            else\n                this.position = BELOW;\n        }\n        this.articulation = { betweenLines: false };\n        this.reset();\n    }\n    reset() {\n        this.articulation = Tables.articulationCodes(this.type);\n        // Use type as glyph code, if not defined as articulation code\n        if (!this.articulation) {\n            this.articulation = { code: this.type, betweenLines: false };\n        }\n        const code = (this.position === ABOVE ? this.articulation.aboveCode : this.articulation.belowCode) ||\n            this.articulation.code ||\n            Glyphs.null;\n        this.text = code;\n    }\n    /** Set if articulation should be rendered between lines. */\n    setBetweenLines(betweenLines = true) {\n        this.articulation.betweenLines = betweenLines;\n        return this;\n    }\n    /** Render articulation in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const index = this.checkIndex();\n        const { position, textLine } = this;\n        const canSitBetweenLines = this.articulation.betweenLines;\n        const stave = note.checkStave();\n        const staffSpace = stave.getSpacingBetweenLines();\n        const isTab = isTabNote(note);\n        // Articulations are centered over/under the note head.\n        const { x } = note.getModifierStartXY(position, index);\n        const shouldSitOutsideStaff = !canSitBetweenLines || isTab;\n        const initialOffset = getInitialOffset(note, position);\n        let y = {\n            [ABOVE]: () => {\n                const y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n            [BELOW]: () => {\n                const y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;\n                return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;\n            },\n        }[position]();\n        if (!isTab) {\n            const offsetDirection = position === ABOVE ? -1 : +1;\n            const noteLine = note.getKeyProps()[index].line;\n            const distanceFromNote = (note.getYs()[index] - y) / staffSpace;\n            const articLine = distanceFromNote + Number(noteLine);\n            const snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);\n            if (isWithinLines(snappedLine, position))\n                this.setOrigin(0.5, 0.5);\n            y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection;\n        }\n        L(`Rendering articulation at (x: ${x}, y: ${y})`);\n        this.x = x;\n        this.y = y;\n        this.renderText(ctx, 0, 0);\n    }\n}\n/** To enable logging for this class. Set `VexFlow.Articulation.DEBUG` to `true`. */\nArticulation.DEBUG = false;\nArticulation.INITIAL_OFFSET = -0.5;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Category } from './typeguard';\nexport class RenderContext {\n    static get CATEGORY() {\n        return Category.RenderContext;\n    }\n    set font(f) {\n        this.setFont(f);\n    }\n    get font() {\n        return this.getFont();\n    }\n}\n/**\n * Draw a tiny dot marker on the specified context. A great debugging aid.\n * @param ctx context\n * @param x dot x coordinate\n * @param y dot y coordinate\n * @param color\n */\nexport function drawDot(ctx, x, y, color = '#F55') {\n    ctx.save();\n    ctx.setFillStyle(color);\n    // draw a circle\n    ctx.beginPath();\n    ctx.arc(x, y, 3, 0, Math.PI * 2, false);\n    ctx.closePath();\n    ctx.fill();\n    ctx.restore();\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Tickable represents a element that sit on a score and\n * has a duration, i.e., Tickables occupy space in the musical rendering dimension.\n */\nexport class Tickable extends Element {\n    static get CATEGORY() {\n        return Category.Tickable;\n    }\n    constructor() {\n        super();\n        this._preFormatted = false;\n        this._postFormatted = false;\n        // These properties represent the duration of\n        // this tickable element.\n        this.ticks = new Fraction(0, 1); // Fractional value of ticks\n        this.intrinsicTicks = 0; // Floating point value of ticks\n        this.tickMultiplier = new Fraction(1, 1);\n        this.modifiers = [];\n        this.tupletStack = [];\n        this.alignCenter = false;\n        this.centerXShift = 0; // Shift from tick context if center aligned\n        // This flag tells the formatter to ignore this tickable during\n        // formatting and justification. It is set by tickables such as BarNote.\n        this.ignoreTicks = false;\n        // This is a space for an external formatting class or function to maintain\n        // metrics.\n        this.formatterMetrics = {\n            // The freedom of a tickable is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n            // The simplified rational duration of this tick as a string. It can be\n            // used as an index to a map or hashtable.\n            duration: '',\n            // The number of formatting iterations undergone.\n            iterations: 0,\n            // The space in pixels allocated by this formatter, along with the mean space\n            // for tickables of this duration, and the deviation from the mean.\n            space: {\n                used: 0,\n                mean: 0,\n                deviation: 0,\n            },\n        };\n    }\n    /** Reset the Tickable, this function will be overloaded. */\n    reset() {\n        return this;\n    }\n    /** Return the ticks. */\n    getTicks() {\n        return this.ticks;\n    }\n    /** Check if it ignores the ticks. */\n    shouldIgnoreTicks() {\n        return this.ignoreTicks;\n    }\n    /** Ignore the ticks. */\n    setIgnoreTicks(flag) {\n        this.ignoreTicks = flag;\n        return this;\n    }\n    /** Get width of note. Used by the formatter for positioning. */\n    getWidth() {\n        if (!this._preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetWidth on an unformatted note.\");\n        }\n        return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);\n    }\n    /** Get `x` position of this tick context. */\n    getX() {\n        const tickContext = this.checkTickContext(`Can't getX() without a TickContext.`);\n        return tickContext.getX() + this.xShift;\n    }\n    /** Return the formatterMetrics. */\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n    /** Return the center `x` shift. */\n    getCenterXShift() {\n        if (this.isCenterAligned()) {\n            return this.centerXShift;\n        }\n        return 0;\n    }\n    /** Set the center `x` shift. */\n    setCenterXShift(centerXShift) {\n        this.centerXShift = centerXShift;\n        return this;\n    }\n    // Check if tickable is center aligned. */\n    isCenterAligned() {\n        return this.alignCenter;\n    }\n    // Set/unset center alignment. */\n    setCenterAlignment(alignCenter) {\n        this.alignCenter = alignCenter;\n        return this;\n    }\n    /**\n     * Return the associated voice. Every tickable must be associated with a voice.\n     * This allows formatters and preFormatter to associate them with the right modifierContexts.\n     */\n    getVoice() {\n        return defined(this.voice, 'NoVoice', 'Tickable has no voice.');\n    }\n    /** Set the associated voice. */\n    setVoice(voice) {\n        this.voice = voice;\n    }\n    /** Get the tuplet. */\n    getTuplet() {\n        return this.tuplet;\n    }\n    /** Return a list of Tuplets. */\n    getTupletStack() {\n        return this.tupletStack;\n    }\n    /**\n     * Reset the specific Tuplet (if this is not provided, all tuplets are reset).\n     * Remove any prior tuplets from the tick calculation and\n     * reset the intrinsic tick value.\n     */\n    resetTuplet(tuplet) {\n        let noteCount;\n        let notesOccupied;\n        if (tuplet) {\n            const i = this.tupletStack.indexOf(tuplet);\n            if (i !== -1) {\n                this.tupletStack.splice(i, 1);\n                noteCount = tuplet.getNoteCount();\n                notesOccupied = tuplet.getNotesOccupied();\n                // Revert old multiplier by inverting numerator & denom.:\n                this.applyTickMultiplier(noteCount, notesOccupied);\n            }\n            return this;\n        }\n        while (this.tupletStack.length) {\n            tuplet = this.tupletStack.pop();\n            noteCount = tuplet.getNoteCount();\n            notesOccupied = tuplet.getNotesOccupied();\n            // Revert old multiplier by inverting numerator & denom.:\n            this.applyTickMultiplier(noteCount, notesOccupied);\n        }\n        return this;\n    }\n    /** Attach to new tuplet. */\n    setTuplet(tuplet) {\n        if (tuplet) {\n            this.tupletStack.push(tuplet);\n            const noteCount = tuplet.getNoteCount();\n            const notesOccupied = tuplet.getNotesOccupied();\n            this.applyTickMultiplier(notesOccupied, noteCount);\n        }\n        this.tuplet = tuplet;\n        return this;\n    }\n    /**\n     * Add self to the provided ModifierContext `mc`.\n     * If this tickable has modifiers, set modifierContext.\n     * @returns this\n     */\n    addToModifierContext(mc) {\n        this.modifierContext = mc;\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            this.modifierContext.addMember(this.modifiers[i]);\n        }\n        this.modifierContext.addMember(this);\n        this._preFormatted = false;\n        return this;\n    }\n    /**\n     * Optional, if tickable has modifiers, associate a Modifier.\n     * @param mod the modifier\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addModifier(modifier, index = 0) {\n        this.modifiers.push(modifier);\n        this._preFormatted = false;\n        return this;\n    }\n    /** Get the list of associated modifiers. */\n    getModifiers() {\n        return this.modifiers;\n    }\n    /** Set the Tick Context. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this._preFormatted = false;\n    }\n    checkTickContext(message = 'Tickable has no tick context.') {\n        return defined(this.tickContext, 'NoTickContext', message);\n    }\n    /** Preformat the Tickable. */\n    preFormat() {\n        if (this._preFormatted)\n            return;\n        this.width = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            this.width += this.modifierContext.getWidth();\n        }\n    }\n    /** Set preformatted status. */\n    set preFormatted(value) {\n        this._preFormatted = value;\n    }\n    get preFormatted() {\n        return this._preFormatted;\n    }\n    /** Postformat the Tickable. */\n    postFormat() {\n        if (this._postFormatted)\n            return this;\n        this._postFormatted = true;\n        return this;\n    }\n    /** Set postformatted status. */\n    set postFormatted(value) {\n        this._postFormatted = value;\n    }\n    get postFormatted() {\n        return this._postFormatted;\n    }\n    /** Return the intrinsic ticks. */\n    getIntrinsicTicks() {\n        return this.intrinsicTicks;\n    }\n    /** Set the intrinsic ticks. */\n    setIntrinsicTicks(intrinsicTicks) {\n        this.intrinsicTicks = intrinsicTicks;\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Get the tick multiplier. */\n    getTickMultiplier() {\n        return this.tickMultiplier;\n    }\n    /** Apply a tick multiplier. */\n    applyTickMultiplier(numerator, denominator) {\n        this.tickMultiplier.multiply(numerator, denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);\n    }\n    /** Set the duration. */\n    setDuration(duration) {\n        const ticks = duration.numerator * (Tables.RESOLUTION / duration.denominator);\n        this.ticks = this.tickMultiplier.clone().multiply(ticks);\n        this.intrinsicTicks = this.ticks.value();\n    }\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        return tickContext.getX();\n    }\n    /** Attach this note to a modifier context. */\n    setModifierContext(mc) {\n        this.modifierContext = mc;\n        return this;\n    }\n    /** Get `ModifierContext`. */\n    getModifierContext() {\n        return this.modifierContext;\n    }\n    /** Check and get `ModifierContext`. */\n    checkModifierContext() {\n        return defined(this.modifierContext, 'NoModifierContext', 'No modifier context attached to this tickable.');\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { drawDot } from './rendercontext';\nimport { Tables } from './tables';\nimport { Tickable } from './tickable';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Note implements an abstract interface for notes and chords that\n * are rendered on a stave. Notes have some common properties: All of them\n * have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)\n *\n * Some notes have stems, heads, dots, etc. Most notational elements that\n * surround a note are called *modifiers*, and every note has an associated\n * array of them. All notes also have a rendering context and belong to a stave.\n */\nexport class Note extends Tickable {\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    // STATIC MEMBERS\n    static get CATEGORY() {\n        return Category.Note;\n    }\n    // Return a glyph given duration and type. The type can be a custom glyph code from customNoteHeads.\n    // The default type is a regular note ('n').\n    static getGlyphProps(duration, type = 'n') {\n        duration = Tables.sanitizeDuration(duration);\n        // Lookup duration for default glyph head code\n        let code = Tables.durationCodes[duration];\n        if (code === undefined) {\n            code = Tables.durationCodes['4'];\n        }\n        // Try and get the note head\n        const codeNoteHead = Tables.codeNoteHead(type.toUpperCase(), duration);\n        // Merge duration props for 'duration' with the note head properties.\n        if (codeNoteHead !== Glyphs.null) {\n            code = Object.assign(Object.assign({}, code), { codeHead: codeNoteHead });\n        }\n        return code;\n    }\n    /** Debug helper. Displays various note metrics for the given note. */\n    static plotMetrics(ctx, note, yPos) {\n        var _a;\n        const metrics = note.getMetrics();\n        const xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.leftDisplacedHeadPx;\n        const xPre1 = note.getAbsoluteX() - metrics.leftDisplacedHeadPx;\n        const xAbs = note.getAbsoluteX();\n        const xPost1 = note.getAbsoluteX() + metrics.notePx;\n        const xPost2 = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx;\n        const xEnd = note.getAbsoluteX() + metrics.notePx + metrics.rightDisplacedHeadPx + metrics.modRightPx;\n        const xFreedomRight = xEnd + ((_a = note.getFormatterMetrics().freedom.right) !== null && _a !== void 0 ? _a : 0);\n        const xWidth = xEnd - xStart;\n        ctx.save();\n        ctx.setFont(Metrics.get('fontFamily'), 8);\n        ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);\n        const y = yPos + 7;\n        function stroke(x1, x2, color, yy = y) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(3);\n            ctx.moveTo(x1 + note.getXShift(), yy);\n            ctx.lineTo(x2 + note.getXShift(), yy);\n            ctx.stroke();\n        }\n        stroke(xStart, xPre1, 'red');\n        stroke(xPre1, xAbs, '#999');\n        stroke(xAbs, xPost1, 'green');\n        stroke(xPost1, xPost2, '#999');\n        stroke(xPost2, xEnd, 'red');\n        stroke(xEnd, xFreedomRight, '#DD0');\n        stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift\n        drawDot(ctx, xAbs + note.getXShift(), y, 'blue');\n        const formatterMetrics = note.getFormatterMetrics();\n        if (formatterMetrics.iterations > 0) {\n            const spaceDeviation = formatterMetrics.space.deviation;\n            const prefix = spaceDeviation >= 0 ? '+' : '';\n            ctx.setFillStyle('red');\n            ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);\n        }\n        ctx.restore();\n    }\n    static parseDuration(durationString) {\n        if (!durationString) {\n            return undefined;\n        }\n        const regexp = /(\\d*\\/?\\d+|[a-z])(d*)([nrhms]|$)/;\n        const result = regexp.exec(durationString);\n        if (!result) {\n            return undefined;\n        }\n        const duration = result[1];\n        const dots = result[2].length;\n        const type = result[3] || 'n';\n        return { duration, dots, type };\n    }\n    static parseNoteStruct(noteStruct) {\n        // Preserve backwards-compatibility\n        const durationProps = Note.parseDuration(noteStruct.duration);\n        if (!durationProps) {\n            return undefined;\n        }\n        // If specified type is invalid, return undefined.\n        let type = noteStruct.type;\n        if (type && !Tables.validTypes[type]) {\n            return undefined;\n        }\n        // If no type specified, check duration or custom types\n        const customTypes = [];\n        if (!type) {\n            type = durationProps.type || 'n';\n            // If we have keys, try and check if we've got a custom glyph\n            if (noteStruct.keys !== undefined) {\n                noteStruct.keys.forEach((k, i) => {\n                    const result = k.split('/');\n                    // We have a custom glyph specified after the note eg. /X2\n                    customTypes[i] = (result && result.length === 3 ? result[2] : type);\n                });\n            }\n        }\n        // Calculate the tick duration of the note\n        let ticks = Tables.durationToTicks(durationProps.duration);\n        if (!ticks) {\n            return undefined;\n        }\n        // Are there any dots?\n        const dots = noteStruct.dots ? noteStruct.dots : durationProps.dots;\n        if (typeof dots !== 'number') {\n            return undefined;\n        }\n        // Add ticks as necessary depending on the numbr of dots\n        let currentTicks = ticks;\n        for (let i = 0; i < dots; i++) {\n            if (currentTicks <= 1)\n                return undefined;\n            currentTicks = currentTicks / 2;\n            ticks += currentTicks;\n        }\n        return {\n            duration: durationProps.duration,\n            type,\n            customTypes,\n            dots,\n            ticks,\n        };\n    }\n    /**\n     * Every note is a tickable, i.e., it can be mutated by the `Formatter` class for\n     * positioning and layout.\n     *\n     * @param noteStruct To create a new note you need to provide a `noteStruct`.\n     */\n    constructor(noteStruct) {\n        super();\n        if (!noteStruct) {\n            throw new RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');\n        }\n        /** Parses `noteStruct` and get note properties. */\n        const parsedNoteStruct = Note.parseNoteStruct(noteStruct);\n        if (!parsedNoteStruct) {\n            throw new RuntimeError('BadArguments', `Invalid note initialization object: ${JSON.stringify(noteStruct)}`);\n        }\n        // Set note properties from parameters.\n        this.keys = noteStruct.keys || [];\n        // per-pitch properties\n        this.keyProps = [];\n        this.duration = parsedNoteStruct.duration;\n        this.noteType = parsedNoteStruct.type;\n        this.customTypes = parsedNoteStruct.customTypes;\n        if (noteStruct.durationOverride) {\n            // Custom duration\n            this.setDuration(noteStruct.durationOverride);\n        }\n        else {\n            // Default duration\n            this.setIntrinsicTicks(parsedNoteStruct.ticks);\n        }\n        this.modifiers = [];\n        // Get the glyph code for this note from the font.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        this.customGlyphs = this.customTypes.map((t) => Note.getGlyphProps(this.duration, t));\n        // Note to play for audio players.\n        this.playNote = undefined;\n        // Positioning contexts used by the Formatter.\n        this.ignoreTicks = false;\n        // Positioning variables\n        this.width = 0; // Width in pixels calculated after preFormat\n        this.leftDisplacedHeadPx = 0; // Extra room on left for displaced note head\n        this.rightDisplacedHeadPx = 0; // Extra room on right for displaced note head\n        this.xShift = 0; // X shift from tick context X\n        this.ys = []; // list of y coordinates for each note\n        // we need to hold on to these for ties and beams.\n        if (noteStruct.alignCenter) {\n            this.setCenterAlignment(noteStruct.alignCenter);\n        }\n        // The render surface.\n        this.renderOptions = {\n            annotationSpacing: 5,\n            strokePx: 1,\n            yShift: 0,\n        };\n    }\n    /**\n     * Get the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    getPlayNote() {\n        return this.playNote;\n    }\n    /**\n     * Set the play note, which is arbitrary data that can be used by an\n     * audio player.\n     */\n    setPlayNote(note) {\n        this.playNote = note;\n        return this;\n    }\n    /**\n     * @returns true if this note is a type of rest.\n     *\n     * Rests don't have pitches, but take up space in the score.\n     * Subclasses should override this default implementation.\n     */\n    isRest() {\n        return false;\n    }\n    /** Add stroke. */\n    addStroke(index, stroke) {\n        stroke.setNote(this);\n        stroke.setIndex(index);\n        this.modifiers.push(stroke);\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the target stave. */\n    getStave() {\n        return this.stave;\n    }\n    /** Check and get the target stave. */\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /** Set the target stave. */\n    setStave(stave) {\n        this.stave = stave;\n        this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.\n        this.setContext(this.stave.getContext());\n        return this;\n    }\n    /** Get spacing to the left of the notes. */\n    getLeftDisplacedHeadPx() {\n        return this.leftDisplacedHeadPx;\n    }\n    /** Get spacing to the right of the notes. */\n    getRightDisplacedHeadPx() {\n        return this.rightDisplacedHeadPx;\n    }\n    /** Set spacing to the left of the notes. */\n    setLeftDisplacedHeadPx(x) {\n        this.leftDisplacedHeadPx = x;\n        return this;\n    }\n    /** Set spacing to the right of the notes. */\n    setRightDisplacedHeadPx(x) {\n        this.rightDisplacedHeadPx = x;\n        return this;\n    }\n    /** True if this note has no duration (e.g., bar notes, spacers, etc.). */\n    shouldIgnoreTicks() {\n        return this.ignoreTicks;\n    }\n    /** Get the stave line number for the note. */\n    // eslint-disable-next-line\n    getLineNumber(isTopNote) {\n        return 0;\n    }\n    /** Get the stave line number for rest. */\n    getLineForRest() {\n        return 0;\n    }\n    /** Get the glyph associated with this note. */\n    getGlyphProps() {\n        return this.glyphProps;\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return 0;\n    }\n    /**\n     * Set Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    setYs(ys) {\n        this.ys = ys;\n        return this;\n    }\n    /**\n     * Get Y positions for this note. Each Y value is associated with\n     * an individual pitch/key within the note/chord.\n     */\n    getYs() {\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-values calculated for this note.');\n        }\n        return this.ys;\n    }\n    /**\n     * Get the Y position of the space above the stave onto which text can\n     * be rendered.\n     */\n    getYForTopText(textLine) {\n        return this.checkStave().getYForTopText(textLine);\n    }\n    /** Return the voice that this note belongs in. */\n    getVoice() {\n        if (!this.voice)\n            throw new RuntimeError('NoVoice', 'Note has no voice.');\n        return this.voice;\n    }\n    /** Attach this note to `voice`. */\n    setVoice(voice) {\n        this.voice = voice;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Get the `TickContext` for this note. */\n    getTickContext() {\n        return this.checkTickContext();\n    }\n    /** Set the `TickContext` for this note. */\n    setTickContext(tc) {\n        this.tickContext = tc;\n        this.preFormatted = false;\n        return this;\n    }\n    /** Accessor to duration. */\n    getDuration() {\n        return this.duration;\n    }\n    /** Accessor to isDotted. */\n    isDotted() {\n        return this.getModifiersByType(Category.Dot).length > 0;\n    }\n    /** Accessor to hasStem. */\n    hasStem() {\n        return false;\n    }\n    /** Accessor to note type. */\n    getNoteType() {\n        return this.noteType;\n    }\n    /** Get the beam. */\n    getBeam() {\n        return this.beam;\n    }\n    /** Check and get the beam. */\n    checkBeam() {\n        return defined(this.beam, 'NoBeam', 'No beam attached to instance');\n    }\n    /** Check it has a beam. */\n    hasBeam() {\n        return this.beam !== undefined;\n    }\n    /** Set the beam. */\n    setBeam(beam) {\n        this.beam = beam;\n        return this;\n    }\n    /**\n     * Attach a modifier to this note.\n     * @param modifier the Modifier to add.\n     * @param index of the key to modify.\n     * @returns this\n     */\n    addModifier(modifier, index = 0) {\n        const signature = 'Note.addModifier(modifier: Modifier, index: number=0)';\n        // Backwards compatibility with 3.0.9.\n        if (typeof index === 'string') {\n            index = parseInt(index);\n            // eslint-disable-next-line\n            console.warn(signature + ' expected a number for `index`, but received a string.');\n        }\n        // Some versions of VexFlow had the two parameters reversed.\n        // Check here and throw an error if the argument types are not correct.\n        if (typeof modifier !== 'object' || typeof index !== 'number') {\n            throw new RuntimeError('WrongParams', 'Incorrect call signature. Use ' + signature + ' instead.');\n        }\n        modifier.setNote(this);\n        modifier.setIndex(index);\n        super.addModifier(modifier);\n        return this;\n    }\n    /** Get all modifiers of a specific type in `this.modifiers`. */\n    getModifiersByType(type) {\n        return this.modifiers.filter((modifier) => modifier.getCategory() === type);\n    }\n    /** Get the coordinates for where modifiers begin. */\n    // eslint-disable-next-line\n    getModifierStartXY(position, index, options) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        return {\n            x: this.getAbsoluteX(),\n            y: this.ys[0],\n        };\n    }\n    getRightParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getRightDisplacedHeadPx() : 0;\n    }\n    getLeftParenthesisPx(index) {\n        const props = this.getKeyProps()[index];\n        return props.displaced ? this.getLeftDisplacedHeadPx() - this.xShift : -this.xShift;\n    }\n    getFirstDotPx() {\n        let px = this.getRightDisplacedHeadPx();\n        const parentheses = this.checkModifierContext().getMembers('Parenthesis');\n        // consider parentheses on noteheads, dots should be to the right of them\n        if (parentheses.length !== 0) {\n            px += parentheses[0].getWidth() + 1;\n        }\n        return px;\n    }\n    /** Get the metrics for this note. */\n    getMetrics() {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call getMetrics on an unformatted note.\");\n        }\n        const modLeftPx = this.modifierContext ? this.modifierContext.getState().leftShift : 0;\n        const modRightPx = this.modifierContext ? this.modifierContext.getState().rightShift : 0;\n        const width = this.getWidth();\n        const glyphWidth = this.getGlyphWidth();\n        const notePx = width -\n            modLeftPx - // subtract left modifiers\n            modRightPx - // subtract right modifiers\n            this.leftDisplacedHeadPx - // subtract left displaced head\n            this.rightDisplacedHeadPx; // subtract right displaced head\n        // NOTE: If you change this, remember to update MockTickable.getMetrics() in the tests/ directory.\n        return {\n            width,\n            glyphWidth,\n            notePx,\n            // Modifier spacing.\n            modLeftPx,\n            modRightPx,\n            // Displaced note head on left or right.\n            leftDisplacedHeadPx: this.leftDisplacedHeadPx,\n            rightDisplacedHeadPx: this.rightDisplacedHeadPx,\n            glyphPx: 0,\n        };\n    }\n    /**\n     * Get the absolute `X` position of this note's tick context. This\n     * excludes xShift, so you'll need to factor it in if you're\n     * looking for the post-formatted x-position.\n     */\n    getAbsoluteX() {\n        const tickContext = this.checkTickContext(`Can't getAbsoluteX() without a TickContext.`);\n        // Position note to left edge of tick context.\n        let x = tickContext.getX();\n        if (this.stave) {\n            x += this.stave.getNoteStartX() + Metrics.get('Stave.padding', 0);\n        }\n        if (this.isCenterAligned()) {\n            x += this.getCenterXShift();\n        }\n        return x;\n    }\n    /** Get the direction of the stem. */\n    getStemDirection() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the top and bottom `y` values of the stem. */\n    getStemExtents() {\n        throw new RuntimeError('NoStem', 'No stem attached to this note.');\n    }\n    /** Get the `x` coordinate to the right of the note. */\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        const noteGlyphWidth = this.getGlyphWidth();\n        tieStartX += noteGlyphWidth / 2;\n        tieStartX += -this.width / 2 + this.width + 2;\n        return tieStartX;\n    }\n    /** Get the `x` coordinate to the left of the note. */\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        const noteGlyphWidth = this.getGlyphWidth();\n        tieEndX += noteGlyphWidth / 2;\n        tieEndX -= this.width / 2 + 2;\n        return tieEndX;\n    }\n    // Get the pitches in the note\n    getKeys() {\n        return this.keys;\n    }\n    // Get the properties for all the keys in the note\n    getKeyProps() {\n        return this.keyProps;\n    }\n    // Get the `BoundingBox` for the entire note\n    getBoundingBox() {\n        const boundingBox = super.getBoundingBox();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            boundingBox.mergeWith(this.modifiers[i].getBoundingBox());\n        }\n        return boundingBox;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// A base class for stave modifiers (e.g. clefs, key signatures)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport var StaveModifierPosition;\n(function (StaveModifierPosition) {\n    StaveModifierPosition[StaveModifierPosition[\"CENTER\"] = 0] = \"CENTER\";\n    StaveModifierPosition[StaveModifierPosition[\"LEFT\"] = 1] = \"LEFT\";\n    StaveModifierPosition[StaveModifierPosition[\"RIGHT\"] = 2] = \"RIGHT\";\n    StaveModifierPosition[StaveModifierPosition[\"ABOVE\"] = 3] = \"ABOVE\";\n    StaveModifierPosition[StaveModifierPosition[\"BELOW\"] = 4] = \"BELOW\";\n    StaveModifierPosition[StaveModifierPosition[\"BEGIN\"] = 5] = \"BEGIN\";\n    StaveModifierPosition[StaveModifierPosition[\"END\"] = 6] = \"END\";\n})(StaveModifierPosition || (StaveModifierPosition = {}));\nexport class StaveModifier extends Element {\n    static get CATEGORY() {\n        return Category.StaveModifier;\n    }\n    static get Position() {\n        return StaveModifierPosition;\n    }\n    constructor() {\n        super();\n        this.padding = 10;\n        this.position = StaveModifierPosition.ABOVE;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setPosition(position) {\n        this.position = position;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getPadding(index) {\n        return index !== undefined && index < 2 ? 0 : this.padding;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    setLayoutMetrics(layoutMetrics) {\n        this.layoutMetrics = layoutMetrics;\n        return this;\n    }\n    getLayoutMetrics() {\n        return this.layoutMetrics;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// @author: Larry Kuhns 2011\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nexport var BarlineType;\n(function (BarlineType) {\n    BarlineType[BarlineType[\"SINGLE\"] = 1] = \"SINGLE\";\n    BarlineType[BarlineType[\"DOUBLE\"] = 2] = \"DOUBLE\";\n    BarlineType[BarlineType[\"END\"] = 3] = \"END\";\n    BarlineType[BarlineType[\"REPEAT_BEGIN\"] = 4] = \"REPEAT_BEGIN\";\n    BarlineType[BarlineType[\"REPEAT_END\"] = 5] = \"REPEAT_END\";\n    BarlineType[BarlineType[\"REPEAT_BOTH\"] = 6] = \"REPEAT_BOTH\";\n    BarlineType[BarlineType[\"NONE\"] = 7] = \"NONE\";\n})(BarlineType || (BarlineType = {}));\nexport class Barline extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Barline;\n    }\n    static get type() {\n        return BarlineType;\n    }\n    static get typeString() {\n        return {\n            single: BarlineType.SINGLE,\n            double: BarlineType.DOUBLE,\n            end: BarlineType.END,\n            repeatBegin: BarlineType.REPEAT_BEGIN,\n            repeatEnd: BarlineType.REPEAT_END,\n            repeatBoth: BarlineType.REPEAT_BOTH,\n            none: BarlineType.NONE,\n        };\n    }\n    constructor(type) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        const TYPE = BarlineType;\n        this.widths = {};\n        this.widths[TYPE.SINGLE] = 5;\n        this.widths[TYPE.DOUBLE] = 5;\n        this.widths[TYPE.END] = 5;\n        this.widths[TYPE.REPEAT_BEGIN] = 5;\n        this.widths[TYPE.REPEAT_END] = 5;\n        this.widths[TYPE.REPEAT_BOTH] = 5;\n        this.widths[TYPE.NONE] = 5;\n        this.paddings = {};\n        this.paddings[TYPE.SINGLE] = 0;\n        this.paddings[TYPE.DOUBLE] = 0;\n        this.paddings[TYPE.END] = 0;\n        this.paddings[TYPE.REPEAT_BEGIN] = 15;\n        this.paddings[TYPE.REPEAT_END] = 15;\n        this.paddings[TYPE.REPEAT_BOTH] = 15;\n        this.paddings[TYPE.NONE] = 0;\n        this.layoutMetricsMap = {};\n        this.layoutMetricsMap[TYPE.SINGLE] = {\n            xMin: 0,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.DOUBLE] = {\n            xMin: -3,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.END] = {\n            xMin: -5,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_END] = {\n            xMin: -10,\n            xMax: 1,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BEGIN] = {\n            xMin: -2,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.REPEAT_BOTH] = {\n            xMin: -10,\n            xMax: 10,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.layoutMetricsMap[TYPE.NONE] = {\n            xMin: 0,\n            xMax: 0,\n            paddingLeft: 5,\n            paddingRight: 5,\n        };\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type);\n    }\n    getType() {\n        return this.type;\n    }\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        this.setWidth(this.widths[this.type]);\n        this.setPadding(this.paddings[this.type]);\n        this.setLayoutMetrics(this.layoutMetricsMap[this.type]);\n        return this;\n    }\n    // Draw barlines\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.openGroup('stavebarline', this.getAttribute('id'));\n        switch (this.type) {\n            case BarlineType.SINGLE:\n                this.drawVerticalBar(stave, this.x, false);\n                break;\n            case BarlineType.DOUBLE:\n                this.drawVerticalBar(stave, this.x, true);\n                break;\n            case BarlineType.END:\n                this.drawVerticalEndBar(stave, this.x);\n                break;\n            case BarlineType.REPEAT_BEGIN:\n                // If the barline is shifted over (in front of clef/time/key)\n                // Draw vertical bar at the beginning.\n                this.drawRepeatBar(stave, this.x, true);\n                if (stave.getX() !== this.x) {\n                    this.drawVerticalBar(stave, stave.getX());\n                }\n                break;\n            case BarlineType.REPEAT_END:\n                this.drawRepeatBar(stave, this.x, false);\n                break;\n            case BarlineType.REPEAT_BOTH:\n                this.drawRepeatBar(stave, this.x, false);\n                this.drawRepeatBar(stave, this.x, true);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.closeGroup();\n    }\n    drawVerticalBar(stave, x, doubleBar) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        if (doubleBar) {\n            staveCtx.fillRect(x - 3, topY, 1, botY - topY);\n        }\n        staveCtx.fillRect(x, topY, 1, botY - topY);\n    }\n    drawVerticalEndBar(stave, x) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        staveCtx.fillRect(x - 5, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n    }\n    drawRepeatBar(stave, x, begin) {\n        const staveCtx = stave.checkContext();\n        const topY = stave.getTopLineTopY();\n        const botY = stave.getBottomLineBottomY();\n        let xShift = 3;\n        if (!begin) {\n            xShift = -5;\n        }\n        staveCtx.fillRect(x + xShift, topY, 1, botY - topY);\n        staveCtx.fillRect(x - 2, topY, 3, botY - topY);\n        const dotRadius = 2;\n        // Shift dots left or right\n        if (begin) {\n            xShift += 4;\n        }\n        else {\n            xShift -= 4;\n        }\n        const dotX = x + xShift + dotRadius / 2;\n        // calculate the y offset based on number of stave lines\n        let yOffset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();\n        yOffset = yOffset / 2 - stave.getSpacingBetweenLines() / 2;\n        let dotY = topY + yOffset + dotRadius / 2;\n        // draw the top repeat dot\n        staveCtx.beginPath();\n        staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n        // draw the bottom repeat dot\n        dotY += stave.getSpacingBetweenLines();\n        staveCtx.beginPath();\n        staveCtx.arc(dotX, dotY, dotRadius, 0, Math.PI * 2, false);\n        staveCtx.fill();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// @author Aaron (@AaronDavidNewman)\n//\n// This implements chord symbols above/below a chord.\n// Chord symbols are modifiers that can be attached to notes.\n// They can contain multiple 'blocks' which represent text or\n// glyphs with various positioning options.\n//\n// See `tests/chordsymbol_tests.ts` for usage examples.\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category, isStemmableNote } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `VexFlow.ChordSymbol.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ChordSymbol.DEBUG)\n        log('VexFlow.ChordSymbol', args);\n}\nexport class ChordSymbolBlock extends Element {\n    constructor(text, symbolModifier, xShift, yShift, vAlign) {\n        super();\n        this.text = text;\n        this.symbolModifier = symbolModifier;\n        this.xShift = xShift;\n        this.yShift = yShift;\n        this.vAlign = vAlign;\n    }\n    isSuperscript() {\n        return this.symbolModifier === SymbolModifiers.SUPERSCRIPT;\n    }\n    isSubscript() {\n        return this.symbolModifier === SymbolModifiers.SUBSCRIPT;\n    }\n}\nexport var ChordSymbolHorizontalJustify;\n(function (ChordSymbolHorizontalJustify) {\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"LEFT\"] = 1] = \"LEFT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER\"] = 2] = \"CENTER\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"RIGHT\"] = 3] = \"RIGHT\";\n    ChordSymbolHorizontalJustify[ChordSymbolHorizontalJustify[\"CENTER_STEM\"] = 4] = \"CENTER_STEM\";\n})(ChordSymbolHorizontalJustify || (ChordSymbolHorizontalJustify = {}));\nexport var ChordSymbolVerticalJustify;\n(function (ChordSymbolVerticalJustify) {\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"TOP\"] = 1] = \"TOP\";\n    ChordSymbolVerticalJustify[ChordSymbolVerticalJustify[\"BOTTOM\"] = 2] = \"BOTTOM\";\n})(ChordSymbolVerticalJustify || (ChordSymbolVerticalJustify = {}));\nexport var SymbolModifiers;\n(function (SymbolModifiers) {\n    SymbolModifiers[SymbolModifiers[\"NONE\"] = 1] = \"NONE\";\n    SymbolModifiers[SymbolModifiers[\"SUBSCRIPT\"] = 2] = \"SUBSCRIPT\";\n    SymbolModifiers[SymbolModifiers[\"SUPERSCRIPT\"] = 3] = \"SUPERSCRIPT\";\n})(SymbolModifiers || (SymbolModifiers = {}));\n/**\n * ChordSymbol is a modifier that creates a chord symbol above/below a chord.\n * As a modifier, it is attached to an existing note.\n */\nexport class ChordSymbol extends Modifier {\n    static get CATEGORY() {\n        return Category.ChordSymbol;\n    }\n    static get superSubRatio() {\n        return Metrics.get('ChordSymbol.superSubRatio');\n    }\n    static get spacingBetweenBlocks() {\n        return Metrics.get('ChordSymbol.spacing');\n    }\n    static get superscriptOffset() {\n        return Metrics.get('ChordSymbol.superscriptOffset');\n    }\n    static get subscriptOffset() {\n        return Metrics.get('ChordSymbol.subscriptOffset');\n    }\n    static get minPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /**\n     * Estimate the width of the whole chord symbol, based on the sum of the widths of the individual blocks.\n     * Estimate how many lines above/below the staff we need.\n     */\n    static format(symbols, state) {\n        if (!symbols || symbols.length === 0)\n            return false;\n        let width = 0;\n        let leftWidth = 0;\n        let rightWidth = 0;\n        let maxLeftGlyphWidth = 0;\n        let maxRightGlyphWidth = 0;\n        for (const symbol of symbols) {\n            const note = symbol.checkAttachedNote();\n            let lineSpaces = 1;\n            for (let j = 0; j < symbol.symbolBlocks.length; ++j) {\n                const block = symbol.symbolBlocks[j];\n                const sup = block.isSuperscript();\n                const sub = block.isSubscript();\n                block.setXShift(width);\n                // If there are super/subscripts, they extend beyond the line so\n                // assume they take up 2 lines\n                if (sup || sub) {\n                    lineSpaces = 2;\n                }\n                // If a subscript immediately follows a superscript block, try to\n                // overlay them.\n                if (sub && j > 0) {\n                    const prev = symbol.symbolBlocks[j - 1];\n                    if (prev.isSuperscript()) {\n                        // slide the symbol over so it lines up with superscript\n                        block.setXShift(width - prev.getWidth() - ChordSymbol.minPadding);\n                        block.vAlign = true;\n                        width +=\n                            -prev.getWidth() -\n                                ChordSymbol.minPadding +\n                                (prev.getWidth() > block.getWidth() ? prev.getWidth() - block.getWidth() : 0);\n                    }\n                }\n                width += block.getWidth() + ChordSymbol.minPadding;\n            }\n            if (symbol.getVertical() === ChordSymbolVerticalJustify.TOP) {\n                symbol.setTextLine(state.topTextLine);\n                state.topTextLine += lineSpaces;\n            }\n            else {\n                symbol.setTextLine(state.textLine + 1);\n                state.textLine += lineSpaces + 1;\n            }\n            if (symbol.getReportWidth()) {\n                if (isStemmableNote(note)) {\n                    const glyphWidth = note.getGlyphWidth();\n                    if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.RIGHT) {\n                        maxLeftGlyphWidth = Math.max(glyphWidth, maxLeftGlyphWidth);\n                        leftWidth = Math.max(leftWidth, width) + ChordSymbol.minPadding;\n                    }\n                    else if (symbol.getHorizontal() === ChordSymbolHorizontalJustify.LEFT) {\n                        maxRightGlyphWidth = Math.max(glyphWidth, maxRightGlyphWidth);\n                        rightWidth = Math.max(rightWidth, width);\n                    }\n                    else {\n                        leftWidth = Math.max(leftWidth, width / 2) + ChordSymbol.minPadding;\n                        rightWidth = Math.max(rightWidth, width / 2);\n                        maxLeftGlyphWidth = Math.max(glyphWidth / 2, maxLeftGlyphWidth);\n                        maxRightGlyphWidth = Math.max(glyphWidth / 2, maxRightGlyphWidth);\n                    }\n                }\n                symbol.width = width;\n            }\n            width = 0; // reset symbol width\n        }\n        const rightOverlap = Math.min(Math.max(rightWidth - maxRightGlyphWidth, 0), Math.max(rightWidth - state.rightShift, 0));\n        const leftOverlap = Math.min(Math.max(leftWidth - maxLeftGlyphWidth, 0), Math.max(leftWidth - state.leftShift, 0));\n        state.leftShift += leftOverlap;\n        state.rightShift += rightOverlap;\n        return true;\n    }\n    constructor() {\n        super();\n        this.symbolBlocks = [];\n        this.horizontal = ChordSymbolHorizontalJustify.LEFT;\n        this.vertical = ChordSymbolVerticalJustify.TOP;\n        this.reportWidth = true;\n    }\n    /**\n     * The offset is specified in `em`. Scale this value by the font size in pixels.\n     */\n    get superscriptOffset() {\n        return ChordSymbol.superscriptOffset * Font.convertSizeToPixelValue(this.fontInfo.size);\n    }\n    get subscriptOffset() {\n        return ChordSymbol.subscriptOffset * Font.convertSizeToPixelValue(this.fontInfo.size);\n    }\n    setReportWidth(value) {\n        this.reportWidth = value;\n        return this;\n    }\n    getReportWidth() {\n        return this.reportWidth;\n    }\n    /**\n     * ChordSymbol allows multiple blocks so we can mix glyphs and font text.\n     * Each block can have its own vertical orientation.\n     */\n    getSymbolBlock(params = {}) {\n        var _a, _b;\n        const symbolBlock = new ChordSymbolBlock((_a = params.text) !== null && _a !== void 0 ? _a : '', (_b = params.symbolModifier) !== null && _b !== void 0 ? _b : SymbolModifiers.NONE, 0, 0, false);\n        if (symbolBlock.isSubscript()) {\n            symbolBlock.setYShift(this.subscriptOffset);\n        }\n        if (symbolBlock.isSuperscript()) {\n            symbolBlock.setYShift(this.superscriptOffset);\n        }\n        if (symbolBlock.isSubscript() || symbolBlock.isSuperscript()) {\n            const { family, size, weight, style } = this.fontInfo;\n            const smallerFontSize = Font.scaleSize(size, ChordSymbol.superSubRatio);\n            symbolBlock.setFont(family, smallerFontSize, weight, style);\n        }\n        else {\n            symbolBlock.setFont(this.fontInfo);\n        }\n        return symbolBlock;\n    }\n    /** Add a symbol to this chord, could be text, glyph or line. */\n    addSymbolBlock(parameters) {\n        this.symbolBlocks.push(this.getSymbolBlock(parameters));\n        return this;\n    }\n    // ### Convenience functions for creating different types of chord symbol parts.\n    /** Add a text block. */\n    addText(text, parameters = {}) {\n        return this.addSymbolBlock(Object.assign(Object.assign({}, parameters), { text }));\n    }\n    /** Add a text block with superscript modifier. */\n    addTextSuperscript(text) {\n        const symbolModifier = SymbolModifiers.SUPERSCRIPT;\n        return this.addSymbolBlock({ text, symbolModifier });\n    }\n    /** Add a text block with subscript modifier. */\n    addTextSubscript(text) {\n        const symbolModifier = SymbolModifiers.SUBSCRIPT;\n        return this.addSymbolBlock({ text, symbolModifier });\n    }\n    /** Add a glyph block with superscript modifier. */\n    addGlyphSuperscript(glyph) {\n        return this.addTextSuperscript(ChordSymbol.glyphs[glyph]);\n    }\n    /** Add a glyph block. */\n    addGlyph(glyph, params = {}) {\n        return this.addText(ChordSymbol.glyphs[glyph], params);\n    }\n    /**\n     * Add a glyph for each character in 'text'. If the glyph is not available, use text from the font.\n     * e.g. `addGlyphOrText('(+5#11)')` will use text for the '5' and '11', and glyphs for everything else.\n     */\n    addGlyphOrText(text, params = {}) {\n        let str = '';\n        for (let i = 0; i < text.length; ++i) {\n            const char = text[i];\n            const glyph = ChordSymbol.glyphs[char];\n            if (glyph) {\n                str += glyph;\n            }\n            else {\n                // Collect consecutive characters with no glyphs.\n                str += char;\n            }\n        }\n        if (str.length > 0) {\n            this.addText(str, params);\n        }\n        return this;\n    }\n    /** Add a line of the given width, used as a continuation of the previous symbol in analysis, or lyrics, etc. */\n    addLine(params = {}) {\n        // Two csymMinor glyphs next to each other.\n        return this.addText('\\ue874\\ue874' /*{csymMinor}{csymMinor}*/, params);\n    }\n    /** Set vertical position of text (above or below stave). */\n    setVertical(vj) {\n        this.vertical = typeof vj === 'string' ? ChordSymbol.VerticalJustifyString[vj] : vj;\n        return this;\n    }\n    getVertical() {\n        return this.vertical;\n    }\n    /** Set horizontal justification. */\n    setHorizontal(hj) {\n        this.horizontal = typeof hj === 'string' ? ChordSymbol.HorizontalJustifyString[hj] : hj;\n        return this;\n    }\n    getHorizontal() {\n        return this.horizontal;\n    }\n    /** Render text and glyphs above/below the note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        ctx.openGroup('chordsymbol', this.getAttribute('id'));\n        const start = note.getModifierStartXY(Modifier.Position.ABOVE, this.index);\n        ctx.setFont(this.fontInfo);\n        let y;\n        // The position of the text varies based on whether or not the note\n        // has a stem.\n        const hasStem = note.hasStem();\n        const stave = note.checkStave();\n        if (this.vertical === ChordSymbolVerticalJustify.BOTTOM) {\n            // HACK: We need to compensate for the text's height since its origin is bottom-right.\n            y = stave.getYForBottomText(this.textLine + Tables.TEXT_HEIGHT_OFFSET_HACK);\n            if (hasStem) {\n                const stemExt = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                const stemBase = note.getStemDirection() === 1 ? stemExt.baseY : stemExt.topY;\n                y = Math.max(y, stemBase + spacing * (this.textLine + 2));\n            }\n        }\n        else {\n            // (this.vertical === VerticalJustify.TOP)\n            const topY = Math.min(...note.getYs());\n            y = Math.min(stave.getYForTopText(this.textLine), topY - 10);\n            if (hasStem) {\n                const stemExt = note.checkStem().getExtents();\n                const spacing = stave.getSpacingBetweenLines();\n                y = Math.min(y, stemExt.topY - 5 - spacing * this.textLine);\n            }\n        }\n        let x = start.x;\n        if (this.horizontal === ChordSymbolHorizontalJustify.LEFT) {\n            x = start.x;\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.RIGHT) {\n            x = start.x + this.getWidth();\n        }\n        else if (this.horizontal === ChordSymbolHorizontalJustify.CENTER) {\n            x = start.x - this.getWidth() / 2;\n        }\n        else {\n            // HorizontalJustify.CENTER_STEM\n            x = note.getStemX() - this.getWidth() / 2;\n        }\n        L('Rendering ChordSymbol: ', x, y);\n        this.symbolBlocks.forEach((symbol) => {\n            L('Rendering Text: ', symbol.getText(), x + symbol.getXShift(), y + symbol.getYShift());\n            symbol.setX(x);\n            symbol.setY(y);\n            symbol.renderText(ctx, 0, 0);\n        });\n        ctx.closeGroup();\n    }\n    // Get the `BoundingBox` for the entire chord\n    getBoundingBox() {\n        const boundingBox = this.symbolBlocks[0].getBoundingBox();\n        for (let i = 1; i < this.symbolBlocks.length; i++) {\n            boundingBox.mergeWith(this.symbolBlocks[i].getBoundingBox());\n        }\n        return boundingBox;\n    }\n}\nChordSymbol.DEBUG = false;\n// Chord symbols can be positioned and justified relative to the note.\nChordSymbol.HorizontalJustify = ChordSymbolHorizontalJustify;\nChordSymbol.HorizontalJustifyString = {\n    left: ChordSymbolHorizontalJustify.LEFT,\n    right: ChordSymbolHorizontalJustify.RIGHT,\n    center: ChordSymbolHorizontalJustify.CENTER,\n    centerStem: ChordSymbolHorizontalJustify.CENTER_STEM,\n};\nChordSymbol.VerticalJustify = ChordSymbolVerticalJustify;\nChordSymbol.VerticalJustifyString = {\n    top: ChordSymbolVerticalJustify.TOP,\n    above: ChordSymbolVerticalJustify.TOP,\n    below: ChordSymbolVerticalJustify.BOTTOM,\n    bottom: ChordSymbolVerticalJustify.BOTTOM,\n};\n// Glyph data\nChordSymbol.glyphs = {\n    diminished: Glyphs.csymDiminished,\n    dim: Glyphs.csymDiminished,\n    halfDiminished: Glyphs.csymHalfDiminished,\n    '+': Glyphs.csymAugmented,\n    augmented: Glyphs.csymAugmented,\n    majorSeventh: Glyphs.csymMajorSeventh,\n    minor: Glyphs.csymMinor,\n    '-': Glyphs.csymMinor,\n    '(': '(', // Glyphs.csymParensLeftTall,\n    leftParen: '(', // Glyphs.csymParensLeftTall,\n    ')': ')', // Glyphs.csymParensRightTall,\n    rightParen: ')', // Glyphs.csymParensRightTall,\n    leftBracket: Glyphs.csymBracketLeftTall,\n    rightBracket: Glyphs.csymBracketRightTall,\n    leftParenTall: '(', // Glyphs.csymParensLeftVeryTall,\n    rightParenTall: ')', // Glyphs.csymParensRightVeryTall,\n    '/': Glyphs.csymDiagonalArrangementSlash,\n    over: Glyphs.csymDiagonalArrangementSlash,\n    '#': Glyphs.csymAccidentalSharp,\n    b: Glyphs.csymAccidentalFlat,\n};\nChordSymbol.symbolModifiers = SymbolModifiers;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Note } from './note';\nimport { Barline, BarlineType } from './stavebarline';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (BarNote.DEBUG)\n        log('VexFlow.BarNote', args);\n}\n/**\n * A `BarNote` is used to render bar lines (from `barline.ts`). `BarNote`s can\n * be added to a voice and rendered in the middle of a stave. Since it has no\n * duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.\n *\n * See `tests/barnote_tests.ts` for usage examples.\n */\nexport class BarNote extends Note {\n    static get CATEGORY() {\n        return Category.BarNote;\n    }\n    constructor(type = BarlineType.SINGLE) {\n        super({ duration: 'b' });\n        this.metrics = {\n            widths: {},\n        };\n        const TYPE = BarlineType;\n        this.metrics.widths = {\n            [TYPE.SINGLE]: 8,\n            [TYPE.DOUBLE]: 12,\n            [TYPE.END]: 15,\n            [TYPE.REPEAT_BEGIN]: 14,\n            [TYPE.REPEAT_END]: 14,\n            [TYPE.REPEAT_BOTH]: 18,\n            [TYPE.NONE]: 0,\n        };\n        // Tell the formatter that bar notes have no duration.\n        this.ignoreTicks = true;\n        this.setType(type);\n    }\n    /** Get the type of bar note.*/\n    getType() {\n        return this.type;\n    }\n    /** Set the type of bar note. */\n    setType(type) {\n        this.type = typeof type === 'string' ? Barline.typeString[type] : type;\n        // Set width to width of relevant `Barline`.\n        this.setWidth(this.metrics.widths[this.type]);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    /** Overridden to ignore. */\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render note to stave. */\n    draw() {\n        const ctx = this.checkContext();\n        L('Rendering bar line at: ', this.getAbsoluteX());\n        const barline = new Barline(this.type);\n        barline.setX(this.getAbsoluteX());\n        barline.setStave(this.checkStave());\n        barline.setContext(ctx);\n        barline.drawWithStyle();\n        this.setRendered();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.BarNote.DEBUG` to `true`. */\nBarNote.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Category, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\n/** Bend implements tablature bends. */\nexport class Bend extends Modifier {\n    static get CATEGORY() {\n        return Category.Bend;\n    }\n    static get UP() {\n        return 0;\n    }\n    static get DOWN() {\n        return 1;\n    }\n    // Arrange bends in `ModifierContext`\n    static format(bends, state) {\n        if (!bends || bends.length === 0)\n            return false;\n        let lastWidth = 0;\n        // Format Bends\n        for (let i = 0; i < bends.length; ++i) {\n            const bend = bends[i];\n            const note = bend.checkAttachedNote();\n            if (isTabNote(note)) {\n                const stringPos = note.leastString() - 1;\n                if (state.topTextLine < stringPos) {\n                    state.topTextLine = stringPos;\n                }\n            }\n            bend.setXShift(lastWidth);\n            lastWidth = bend.getWidth();\n            bend.setTextLine(state.topTextLine);\n        }\n        state.rightShift += lastWidth;\n        state.topTextLine += 1;\n        return true;\n    }\n    /** Set the element style used for rendering the lines. */\n    setStyleLine(style) {\n        this.styleLine = style;\n        return this;\n    }\n    /** Get the element style used for rendering the lines. */\n    getStyleLine() {\n        return this.styleLine;\n    }\n    /**\n     * Example of a phrase:\n     * ```\n     *    [{\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"half\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: UP,\n     *     text: \"whole\"\n     *     width: 8;\n     *   },\n     *   {\n     *     type: DOWN,\n     *     text: \"1 1/2\"\n     *     width: 8;\n     *   }]\n     * ```\n     */\n    constructor(phrase) {\n        super();\n        this.styleLine = Metrics.getStyle('Bend.line');\n        this.xShift = 0;\n        this.tap = '';\n        this.renderOptions = {\n            bendWidth: 8,\n            releaseWidth: 8,\n        };\n        this.phrase = phrase;\n        this.updateWidth();\n    }\n    /** Set horizontal shift in pixels. */\n    setXShift(value) {\n        this.xShift = value;\n        this.updateWidth();\n        return this;\n    }\n    setTap(value) {\n        this.tap = value;\n        return this;\n    }\n    getTextHeight() {\n        const element = new Element(Category.Bend);\n        element.setText(this.phrase[0].text);\n        return element.getHeight();\n    }\n    /** Recalculate width. */\n    updateWidth() {\n        const measureText = (text) => {\n            const element = new Element(Category.Bend);\n            element.setText(text);\n            return element.getWidth();\n        };\n        let totalWidth = 0;\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (bend.width !== undefined) {\n                totalWidth += bend.width;\n            }\n            else {\n                const additionalWidth = bend.type === Bend.UP ? this.renderOptions.bendWidth : this.renderOptions.releaseWidth;\n                bend.width = Math.max(additionalWidth, measureText(bend.text)) + 3;\n                bend.drawWidth = bend.width / 2;\n                totalWidth += bend.width;\n            }\n        }\n        this.setWidth(totalWidth + this.xShift);\n        return this;\n    }\n    /** Draw the bend on the rendering context. */\n    draw() {\n        var _a;\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        start.x += 3;\n        start.y += 0.5;\n        const xShift = this.xShift;\n        const stave = note.checkStave();\n        const spacing = stave.getSpacingBetweenLines();\n        const lowestY = note.getYs().reduce((a, b) => (a < b ? a : b));\n        // this.textLine is relative to top string in the group.\n        const bendHeight = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) + 3;\n        const annotationY = start.y - ((this.textLine + 1) * spacing + start.y - lowestY) - 1;\n        const renderBend = (x, y, width, height) => {\n            const cpX = x + width;\n            const cpY = y;\n            this.applyStyle(ctx, this.styleLine);\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.quadraticCurveTo(cpX, cpY, x + width, height);\n            ctx.stroke();\n        };\n        const renderRelease = (x, y, width, height) => {\n            this.applyStyle(ctx, this.styleLine);\n            ctx.beginPath();\n            ctx.moveTo(x, height);\n            ctx.quadraticCurveTo(x + width, height, x + width, y);\n            ctx.stroke();\n        };\n        const renderArrowHead = (x, y, direction) => {\n            const width = 4;\n            const yBase = y + width * direction;\n            ctx.beginPath();\n            ctx.moveTo(x, y); // tip of the arrow\n            ctx.lineTo(x - width, yBase);\n            ctx.lineTo(x + width, yBase);\n            ctx.closePath();\n            ctx.fill();\n        };\n        const renderText = (x, text) => {\n            ctx.setFont(this.fontInfo);\n            const renderX = x - ctx.measureText(text).width / 2;\n            ctx.fillText(text, renderX, annotationY);\n        };\n        let lastBend = undefined;\n        let lastBendDrawWidth = 0;\n        let lastDrawnWidth = 0;\n        if ((_a = this.tap) === null || _a === void 0 ? void 0 : _a.length) {\n            const tapStart = note.getModifierStartXY(Modifier.Position.CENTER, this.index);\n            renderText(tapStart.x, this.tap);\n        }\n        for (let i = 0; i < this.phrase.length; ++i) {\n            const bend = this.phrase[i];\n            if (!bend.drawWidth)\n                bend.drawWidth = 0;\n            if (i === 0)\n                bend.drawWidth += xShift;\n            lastDrawnWidth = bend.drawWidth + lastBendDrawWidth - (i === 1 ? xShift : 0);\n            if (bend.type === Bend.UP) {\n                if (lastBend && lastBend.type === Bend.UP) {\n                    renderArrowHead(start.x, bendHeight, +1);\n                }\n                renderBend(start.x, start.y, lastDrawnWidth, bendHeight);\n            }\n            if (bend.type === Bend.DOWN) {\n                if (lastBend && lastBend.type === Bend.UP) {\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n                if (lastBend && lastBend.type === Bend.DOWN) {\n                    renderArrowHead(start.x, start.y, -1);\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n                if (!lastBend) {\n                    lastDrawnWidth = bend.drawWidth;\n                    renderRelease(start.x, start.y, lastDrawnWidth, bendHeight);\n                }\n            }\n            renderText(start.x + lastDrawnWidth, bend.text);\n            lastBend = bend;\n            lastBendDrawWidth = bend.drawWidth;\n            lastBend.x = start.x;\n            start.x += lastDrawnWidth;\n        }\n        if (!lastBend || lastBend.x === undefined) {\n            throw new RuntimeError('NoLastBendForBend', 'Internal error.');\n        }\n        // Final arrowhead and text\n        if (lastBend.type === Bend.UP) {\n            renderArrowHead(lastBend.x + lastDrawnWidth, bendHeight, +1);\n        }\n        else if (lastBend.type === Bend.DOWN) {\n            renderArrowHead(lastBend.x + lastDrawnWidth, start.y, -1);\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements dot modifiers for notes.\nimport { Glyphs } from './glyphs';\nimport { Modifier } from './modifier';\nimport { Category, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Dot extends Modifier {\n    static get CATEGORY() {\n        return Category.Dot;\n    }\n    /** Returns the dots associated to a Note. */\n    static getDots(note) {\n        return note.getModifiersByType(Dot.CATEGORY);\n    }\n    /** Add a dot on the specified keys to the notes. */\n    static buildAndAttach(notes, options) {\n        for (const note of notes) {\n            if (options === null || options === void 0 ? void 0 : options.all) {\n                for (let i = 0; i < note.keys.length; i++) {\n                    const dot = new Dot();\n                    note.addModifier(dot, i);\n                }\n            }\n            else if ((options === null || options === void 0 ? void 0 : options.index) !== undefined) {\n                const dot = new Dot();\n                note.addModifier(dot, options === null || options === void 0 ? void 0 : options.index);\n            }\n            else {\n                const dot = new Dot();\n                note.addModifier(dot, 0);\n            }\n        }\n    }\n    // Arrange dots inside a ModifierContext.\n    static format(dots, state) {\n        const rightShift = state.rightShift;\n        const dotSpacing = 1;\n        if (!dots || dots.length === 0)\n            return false;\n        const dotList = [];\n        const maxShiftMap = {};\n        for (let i = 0; i < dots.length; ++i) {\n            const dot = dots[i];\n            const note = dot.getNote();\n            let props;\n            let shift;\n            if (isStaveNote(note)) {\n                const index = dot.checkIndex();\n                props = note.getKeyProps()[index];\n                // consider right displaced head with no previous modifier\n                shift = note.getFirstDotPx();\n            }\n            else if (isTabNote(note)) {\n                props = { line: 0.5 }; // Shim key props for dot placement\n                shift = rightShift;\n            }\n            else {\n                // note object is not StaveNote or TabNote.\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n            const noteId = note.getAttribute('id');\n            dotList.push({ line: props.line, note, noteId, dot });\n            maxShiftMap[noteId] = Math.max(maxShiftMap[noteId] || shift, shift);\n        }\n        // Sort dots by line number.\n        dotList.sort((a, b) => b.line - a.line);\n        let dotShift = rightShift;\n        let xWidth = 0;\n        let lastLine = null;\n        let lastNote = null;\n        let prevDottedSpace = null;\n        let halfShiftY = 0;\n        for (let i = 0; i < dotList.length; ++i) {\n            const { dot, note, noteId, line } = dotList[i];\n            // Reset the position of the dot every line.\n            if (line !== lastLine || note !== lastNote) {\n                dotShift = maxShiftMap[noteId];\n            }\n            if (!note.isRest() && line !== lastLine) {\n                if (Math.abs(line % 1) === 0.5) {\n                    // note is on a space, so no dot shift\n                    halfShiftY = 0;\n                }\n                else {\n                    // note is on a line, so shift dot to space above the line\n                    halfShiftY = 0.5;\n                    if (lastNote !== null && !lastNote.isRest() && lastLine !== null && lastLine - line === 0.5) {\n                        // previous note on a space, so shift dot to space below the line\n                        halfShiftY = -0.5;\n                    }\n                    else if (line + halfShiftY === prevDottedSpace) {\n                        // previous space is dotted, so shift dot to space below the line\n                        halfShiftY = -0.5;\n                    }\n                }\n            }\n            // Convert halfShiftY to a multiplier for dots.draw().\n            if (note.isRest()) {\n                dot.dotShiftY += -halfShiftY;\n            }\n            else {\n                dot.dotShiftY = -halfShiftY;\n            }\n            prevDottedSpace = line + halfShiftY;\n            dot.setXShift(dotShift);\n            dotShift += dot.getWidth() + dotSpacing; // spacing\n            xWidth = dotShift > xWidth ? dotShift : xWidth;\n            lastLine = line;\n            lastNote = note;\n        }\n        // Update state.\n        state.rightShift += xWidth;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.setText(Glyphs.augmentationDot);\n        this.dotShiftY = 0;\n    }\n    setNote(note) {\n        this.note = note;\n        this.font = note.font;\n        return this;\n    }\n    setDotShiftY(y) {\n        this.dotShiftY = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        const lineSpace = stave.getSpacingBetweenLines();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        // Set the starting y coordinate to the base of the stem for TabNotes.\n        if (isTabNote(note)) {\n            start.y = note.getStemExtents().baseY;\n        }\n        this.x = start.x;\n        this.y = start.y + this.dotShiftY * lineSpace;\n        this.renderText(ctx, 0, 0);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns 2013\n// Class to draws string numbers into the notation.\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class FretHandFinger extends Modifier {\n    static get CATEGORY() {\n        return Category.FretHandFinger;\n    }\n    // Arrange fingerings inside a ModifierContext.\n    static format(nums, state) {\n        const { leftShift, rightShift } = state;\n        const numSpacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const numsList = [];\n        let prevNote = null;\n        let shiftLeft = 0;\n        let shiftRight = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const textHeight = Metrics.get('FretHandFinger.fontSize');\n            if (num.position === ModifierPosition.ABOVE) {\n                state.topTextLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (num.position === ModifierPosition.BELOW) {\n                state.textLine += textHeight / Tables.STAVE_LINE_DISTANCE + 0.5;\n            }\n            if (note !== prevNote) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (leftShift === 0) {\n                        shiftLeft = Math.max(note.getLeftDisplacedHeadPx(), shiftLeft);\n                    }\n                    if (rightShift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prevNote = note;\n            }\n            numsList.push({\n                note,\n                num,\n                pos,\n                line: props.line,\n                shiftL: shiftLeft,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort fingernumbers by line number.\n        numsList.sort((a, b) => b.line - a.line);\n        let numShiftL = 0;\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < numsList.length; ++i) {\n            let numShift = 0;\n            const { note, pos, num, line, shiftL, shiftR } = numsList[i];\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftL = leftShift + shiftL;\n                numShiftR = rightShift + shiftR;\n            }\n            const numWidth = num.getWidth() + numSpacing;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(leftShift + numShiftL);\n                numShift = leftShift + numWidth; // spacing\n                xWidthL = numShift > xWidthL ? numShift : xWidthL;\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                numShift = shiftRight + numWidth; // spacing\n                xWidthR = numShift > xWidthR ? numShift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    static easyScoreHook({ fingerings } = {}, note, builder) {\n        fingerings === null || fingerings === void 0 ? void 0 : fingerings.split(',').map((fingeringString) => {\n            const split = fingeringString.trim().split('.');\n            const params = { number: split[0] };\n            if (split[1])\n                params.position = split[1];\n            return builder.getFactory().Fingering(params);\n        }).map((fingering, index) => note.addModifier(fingering, index));\n    }\n    constructor(finger) {\n        super();\n        this.setFretHandFinger(finger);\n        this.position = Modifier.Position.LEFT; // Default position above stem or note head\n        this.xOffset = 0; // Horizontal offset from default\n        this.yOffset = 0; // Vertical offset from default\n    }\n    setFretHandFinger(finger) {\n        this.text = finger;\n        return this;\n    }\n    getFretHandFinger() {\n        return this.text;\n    }\n    setOffsetX(x) {\n        this.xOffset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.yOffset = y;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let dotX = start.x + this.xOffset;\n        let dotY = start.y + this.yOffset + 5;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                dotX -= 4;\n                dotY -= 12;\n                break;\n            case Modifier.Position.BELOW:\n                dotX -= 2;\n                dotY += 10;\n                break;\n            case Modifier.Position.LEFT:\n                dotX -= this.width;\n                break;\n            case Modifier.Position.RIGHT:\n                dotX += 1;\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} does not exist`);\n        }\n        this.renderText(ctx, dotX, dotY);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Category } from './typeguard';\nimport { defined, log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (NoteHead.DEBUG)\n        log('VexFlow.NoteHead', args);\n}\n/**\n * `NoteHeads` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n *\n * See `tests/notehead_tests.ts` for usage examples.\n */\nexport class NoteHead extends Note {\n    static get CATEGORY() {\n        return Category.NoteHead;\n    }\n    constructor(noteStruct) {\n        var _a;\n        super(noteStruct);\n        this.customGlyph = false;\n        // map notehead SMuFL codes to the corresponding SMuFL code with ledger line\n        this.ledger = {\n            '\\ue4e3' /*restWhole*/: '\\ue4f4' /*restWholeLegerLine*/,\n            '\\ue4e4' /*restHalf*/: '\\ue4f5' /*restHalfLegerLine*/,\n        };\n        this.index = noteStruct.index;\n        this.x = noteStruct.x || 0;\n        this.y = noteStruct.y || 0;\n        if (noteStruct.noteType)\n            this.noteType = noteStruct.noteType;\n        this.displaced = noteStruct.displaced || false;\n        this.stemDirection = noteStruct.stemDirection || Stem.UP;\n        this.line = noteStruct.line || 0;\n        // Get glyph code based on duration and note type. This could be\n        // regular notes, rests, or other custom codes.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // Swap out the glyph with ledger lines\n        if ((this.line > 5 || this.line < 0) && this.ledger[this.glyphProps.codeHead]) {\n            this.glyphProps.codeHead = this.ledger[this.glyphProps.codeHead];\n        }\n        this.text = this.glyphProps.codeHead;\n        if (noteStruct.customGlyphCode) {\n            this.customGlyph = true;\n            this.text = noteStruct.customGlyphCode;\n        }\n        this.setStyle((_a = noteStruct.style) !== null && _a !== void 0 ? _a : {});\n        this.slashed = noteStruct.slashed || false;\n        this.renderOptions = Object.assign({}, this.renderOptions);\n    }\n    /** Get the width of the notehead. */\n    getWidth() {\n        return this.width;\n    }\n    /** Determine if the notehead is displaced. */\n    isDisplaced() {\n        return this.displaced === true;\n    }\n    /** Get the stave line the notehead is placed on. */\n    getLine() {\n        return this.line;\n    }\n    /** Set the stave line the notehead is placed on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Get the canvas `x` coordinate position of the notehead. */\n    getAbsoluteX() {\n        // If the note has not been preformatted, then get the static x value\n        // Otherwise, it's been formatted and we should use it's x value relative\n        // to its tick context\n        const x = !this.preFormatted ? this.x : super.getAbsoluteX();\n        // For a more natural displaced notehead, we adjust the displacement amount\n        // by half the stem width in order to maintain a slight overlap with the stem\n        const displacementStemAdjustment = Stem.WIDTH / 2;\n        return x + (this.displaced ? (this.width - displacementStemAdjustment) * this.stemDirection : 0);\n    }\n    /** Set notehead to a provided `stave`. */\n    setStave(stave) {\n        const line = this.getLine();\n        this.stave = stave;\n        if (this.stave) {\n            this.setY(this.stave.getYForNote(line));\n            this.setContext(this.stave.getContext());\n        }\n        return this;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the notehead. */\n    draw() {\n        var _a;\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.openGroup('notehead', this.getAttribute('id'));\n        L(\"Drawing note head '\", this.noteType, this.duration, \"' at\", this.x, this.y);\n        this.x = this.getAbsoluteX();\n        this.renderText(ctx, 0, 0);\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.drawModifiers(this);\n        ctx.closeGroup();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.NoteHead.DEBUG` to `true`. */\nNoteHead.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Flag.DEBUG)\n        log('VexFlow.Flag', args);\n}\n/**\n * `Flags` are typically not manipulated\n * directly, but used internally in `StaveNote`.\n */\nexport class Flag extends Element {\n    static get CATEGORY() {\n        return Category.Flag;\n    }\n    /** Draw the notehead. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.openGroup('flag', this.getAttribute('id'));\n        L(\"Drawing flag '\", this.text, \"' at\", this.x, this.y);\n        this.renderText(ctx, 0, 0);\n        ctx.closeGroup();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.NoteHead.DEBUG` to `true`. */\nFlag.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// `StemmableNote` is an abstract interface for notes with optional stems.\n// Examples of stemmable notes are `StaveNote` and `TabNote`\nimport { Flag } from './flag';\nimport { Glyphs } from './glyphs';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StemmableNote extends Note {\n    static get CATEGORY() {\n        return Category.StemmableNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct);\n        this.flag = new Flag();\n    }\n    // Get and set the note's `Stem`\n    getStem() {\n        return this.stem;\n    }\n    checkStem() {\n        if (!this.stem) {\n            throw new RuntimeError('NoStem', 'No stem attached to instance');\n        }\n        return this.stem;\n    }\n    setStem(stem) {\n        this.stem = stem;\n        this.addChild(stem);\n        return this;\n    }\n    // Builds and sets a new stem\n    buildStem() {\n        const stem = new Stem();\n        this.setStem(stem);\n        return this;\n    }\n    buildFlag() {\n        var _a, _b, _c;\n        const { glyphProps } = this;\n        if (this.hasFlag()) {\n            const flagCode = \n            // codeFlagDown = codeFlagUp + 1\n            // if codeFlagUp is undefined, codePoint will be 0\n            this.getStemDirection() === Stem.DOWN\n                ? String.fromCodePoint(((_b = (_a = glyphProps.codeFlagUp) === null || _a === void 0 ? void 0 : _a.codePointAt(0)) !== null && _b !== void 0 ? _b : -1) + 1)\n                : ((_c = glyphProps.codeFlagUp) !== null && _c !== void 0 ? _c : Glyphs.null);\n            this.flag.setText(flagCode);\n            this.flag.fontInfo = this.fontInfo;\n        }\n    }\n    // Get the custom glyph associated with the outer note head on the base of the stem.\n    getBaseCustomNoteHeadGlyphProps() {\n        if (this.getStemDirection() === Stem.DOWN) {\n            return this.customGlyphs[this.customGlyphs.length - 1];\n        }\n        else {\n            return this.customGlyphs[0];\n        }\n    }\n    // Get the full length of stem\n    getStemLength() {\n        return Stem.HEIGHT + this.getStemExtension();\n    }\n    // Get the number of beams for this duration\n    getBeamCount() {\n        const glyphProps = this.getGlyphProps();\n        if (glyphProps) {\n            return glyphProps.beamCount;\n        }\n        else {\n            return 0;\n        }\n    }\n    // Get the minimum length of stem\n    getStemMinimumLength() {\n        const frac = Tables.durationToFraction(this.duration);\n        const beamIsUndefined = this.beam === undefined;\n        let length = frac.value() <= 1 ? 0 : 20;\n        // if note is flagged, cannot shorten beam\n        switch (this.duration) {\n            case '8':\n            case '16':\n                length = beamIsUndefined ? 35 : 25;\n                break;\n            case '32':\n                length = beamIsUndefined ? 45 : 35;\n                break;\n            case '64':\n                length = beamIsUndefined ? 50 : 40;\n                break;\n            case '128':\n                length = beamIsUndefined ? 55 : 45;\n                break;\n            default:\n                break;\n        }\n        return length;\n    }\n    // Get/set the direction of the stem\n    getStemDirection() {\n        if (!this.stemDirection)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stemDirection;\n    }\n    setStemDirection(direction) {\n        if (!direction)\n            direction = Stem.UP;\n        if (direction !== Stem.UP && direction !== Stem.DOWN) {\n            throw new RuntimeError('BadArgument', `Invalid stem direction: ${direction}`);\n        }\n        this.stemDirection = direction;\n        // Reset and reformat everything. Flag has to be built before calling getStemExtension.\n        this.reset();\n        if (this.hasFlag()) {\n            this.buildFlag();\n        }\n        this.beam = undefined;\n        if (this.stem) {\n            this.stem.setDirection(direction);\n            this.stem.setExtension(this.getStemExtension());\n        }\n        if (this.preFormatted) {\n            this.preFormat();\n        }\n        return this;\n    }\n    // Get the `x` coordinate of the stem\n    getStemX() {\n        const xBegin = this.getAbsoluteX() + this.xShift;\n        const xEnd = this.getAbsoluteX() + this.xShift + this.getGlyphWidth();\n        const stemX = this.stemDirection === Stem.DOWN ? xBegin : xEnd;\n        return stemX;\n    }\n    // Get the `x` coordinate for the center of the glyph.\n    // Used for `TabNote` stems and stemlets over rests\n    getCenterGlyphX() {\n        return this.getAbsoluteX() + this.xShift + this.getGlyphWidth() / 2;\n    }\n    // Get the stem extension for the current duration\n    getStemExtension() {\n        const glyphProps = this.getGlyphProps();\n        const flagHeight = this.flag.getHeight();\n        const scale = this.getFontScale();\n        if (this.stemExtensionOverride !== undefined) {\n            return this.stemExtensionOverride;\n        }\n        // Use stemBeamExtension with beams\n        if (this.beam) {\n            return glyphProps.stemBeamExtension * scale;\n        }\n        // If the flag is longer than the stem, extend the stem by the difference.\n        return flagHeight > Stem.HEIGHT * scale ? flagHeight - Stem.HEIGHT * scale : 0;\n    }\n    // Set the stem length to a specific. Will override the default length.\n    setStemLength(height) {\n        this.stemExtensionOverride = height - Stem.HEIGHT;\n        return this;\n    }\n    // Get the top and bottom `y` values of the stem.\n    getStemExtents() {\n        if (!this.stem)\n            throw new RuntimeError('NoStem', 'No stem attached to this note.');\n        return this.stem.getExtents();\n    }\n    /** Gets the `y` value for the top modifiers at a specific `textLine`. */\n    getYForTopText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.min(stave.getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));\n        }\n        else {\n            return stave.getYForTopText(textLine);\n        }\n    }\n    /** Gets the `y` value for the bottom modifiers at a specific `textLine`. */\n    getYForBottomText(textLine) {\n        const stave = this.checkStave();\n        if (this.hasStem()) {\n            const extents = this.getStemExtents();\n            if (!extents)\n                throw new RuntimeError('InvalidState', 'Stem does not have extents.');\n            return Math.max(stave.getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);\n        }\n        else {\n            return stave.getYForBottomText(textLine);\n        }\n    }\n    hasFlag() {\n        return this.glyphProps.codeFlagUp !== undefined && !this.beam && !this.isRest();\n    }\n    /** Post formats the note. */\n    postFormat() {\n        var _a;\n        (_a = this.beam) === null || _a === void 0 ? void 0 : _a.postFormat();\n        this.postFormatted = true;\n        return this;\n    }\n    /** Renders the stem onto the canvas. */\n    drawStem(stemOptions) {\n        var _a;\n        this.checkContext();\n        this.setRendered();\n        this.setStem(new Stem(stemOptions));\n        (_a = this.stem) === null || _a === void 0 ? void 0 : _a.setContext(this.getContext()).drawWithStyle();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This file implements notes for standard notation. This consists of one or\n// more `NoteHeads`, an optional stem, and an optional flag.\n//\n// Throughout these comments, a \"note\" refers to the entire `StaveNote`,\n// and a \"key\" refers to a specific pitch/notehead within a note.\n//\n// See `tests/stavenote_tests.ts` for usage examples.\nimport { BoundingBox } from './boundingbox';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, log, midLine, RuntimeError } from './util';\n// To enable logging for this class. Set `VexFlow.StaveNote.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (StaveNote.DEBUG)\n        log('VexFlow.StaveNote', args);\n}\nconst isInnerNoteIndex = (note, index) => index === (note.getStemDirection() === Stem.UP ? note.keyProps.length - 1 : 0);\n// Helper methods for rest positioning in ModifierContext.\nfunction shiftRestVertical(rest, note, dir) {\n    const delta = dir;\n    rest.line += delta;\n    rest.maxLine += delta;\n    rest.minLine += delta;\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);\n}\n// Called from formatNotes :: center a rest between two notes\nfunction centerRest(rest, noteU, noteL) {\n    const delta = rest.line - midLine(noteU.minLine, noteL.maxLine);\n    rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);\n    rest.line -= delta;\n    rest.maxLine -= delta;\n    rest.minLine -= delta;\n}\nexport class StaveNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.StaveNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 3;\n    }\n    static get minNoteheadPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Format notes inside a ModifierContext. */\n    static format(notes, state) {\n        if (!notes || notes.length < 2)\n            return false;\n        const notesList = [];\n        for (let i = 0; i < notes.length; i++) {\n            // Formatting uses sortedKeyProps to calculate line and minL.\n            const props = notes[i].sortedKeyProps;\n            const line = props[0].keyProps.line;\n            let minL = props[props.length - 1].keyProps.line;\n            const stemDirection = notes[i].getStemDirection();\n            const stemMax = notes[i].getStemLength() / 10;\n            const stemMin = notes[i].getStemMinimumLength() / 10;\n            let maxL;\n            if (notes[i].isRest()) {\n                maxL =\n                    line +\n                        Math.ceil(notes[i]._noteHeads[0].getTextMetrics().actualBoundingBoxAscent / Tables.STAVE_LINE_DISTANCE);\n                minL =\n                    line -\n                        Math.ceil(notes[i]._noteHeads[0].getTextMetrics().actualBoundingBoxDescent / Tables.STAVE_LINE_DISTANCE);\n            }\n            else {\n                maxL =\n                    stemDirection === 1 ? props[props.length - 1].keyProps.line + stemMax : props[props.length - 1].keyProps.line;\n                minL = stemDirection === 1 ? props[0].keyProps.line : props[0].keyProps.line - stemMax;\n            }\n            notesList.push({\n                line: props[0].keyProps.line, // note/rest base line\n                maxLine: maxL, // note/rest upper bounds line\n                minLine: minL, // note/rest lower bounds line\n                isrest: notes[i].isRest(),\n                stemDirection,\n                stemMax, // Maximum (default) note stem length;\n                stemMin, // minimum note stem length\n                voiceShift: notes[i].getVoiceShiftWidth(),\n                isDisplaced: notes[i].isDisplaced(), // note manually displaced\n                note: notes[i],\n            });\n        }\n        let voices = 0;\n        let noteU = undefined;\n        let noteM = undefined;\n        let noteL = undefined;\n        const draw = [false, false, false];\n        for (let i = 0; i < notesList.length; i++) {\n            // If .draw is true or undefined, we set draw[i] = true\n            draw[i] = notesList[i].note.renderOptions.draw !== false;\n        }\n        if (draw[0] && draw[1] && draw[2]) {\n            // Three visible notes\n            voices = 3;\n            noteU = notesList[0];\n            noteM = notesList[1];\n            noteL = notesList[2];\n        }\n        else if (draw[0] && draw[1]) {\n            // Two visible notes, 0 & 1\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[1];\n        }\n        else if (draw[0] && draw[2]) {\n            // Two visible notes, 0 & 2\n            voices = 2;\n            noteU = notesList[0];\n            noteL = notesList[2];\n        }\n        else if (draw[1] && draw[2]) {\n            // Two visible notes, 1 & 2\n            voices = 2;\n            noteU = notesList[1];\n            noteL = notesList[2];\n        }\n        else {\n            // No shift required for less than 2 visible notes\n            return true;\n        }\n        // for two voice backward compatibility, ensure upper voice is stems up\n        // for three voices, the voices must be in order (upper, middle, lower)\n        if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {\n            noteU = notesList[1];\n            noteL = notesList[0];\n        }\n        const voiceXShift = Math.max(noteU.voiceShift, noteL.voiceShift);\n        let xShift = 0;\n        // Test for two voice note intersection\n        if (voices === 2) {\n            const lineSpacing = noteU.note.hasStem() && noteL.note.hasStem() && noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;\n            if (noteL.isrest && noteU.isrest && noteU.note.duration === noteL.note.duration) {\n                noteL.note.renderOptions.draw = false;\n            }\n            else if (noteU.minLine <= noteL.maxLine + lineSpacing) {\n                if (noteU.isrest) {\n                    // shift rest up\n                    shiftRestVertical(noteU, noteL, 1);\n                }\n                else if (noteL.isrest) {\n                    // shift rest down\n                    shiftRestVertical(noteL, noteU, -1);\n                }\n                else {\n                    //Instead of shifting notes, remove the appropriate flag\n                    //If we are sharing a line, switch one notes stem direction.\n                    //If we are sharing a line and in the same voice, only then offset one note\n                    const lineDiff = Math.abs(noteU.line - noteL.line);\n                    if (noteU.note.hasStem() && noteL.note.hasStem()) {\n                        const noteUHead = noteU.note.sortedKeyProps[0].keyProps.code;\n                        const noteLHead = noteL.note.sortedKeyProps[noteL.note.sortedKeyProps.length - 1].keyProps.code;\n                        if (\n                        // If unison is not configured, shift\n                        !Tables.UNISON ||\n                            // If we have different noteheads, shift\n                            noteUHead !== noteLHead ||\n                            // If we have different dot values, shift\n                            noteU.note.getModifiers().filter((item) => item.getCategory() === Category.Dot && item.getIndex() === 0)\n                                .length !==\n                                noteL.note.getModifiers().filter((item) => item.getCategory() === Category.Dot && item.getIndex() === 0)\n                                    .length ||\n                            // If the notes are quite close but not on the same line, shift\n                            (lineDiff < 1 && lineDiff > 0) ||\n                            // If styles are different, shift\n                            JSON.stringify(noteU.note.getStyle()) !== JSON.stringify(noteL.note.getStyle())) {\n                            xShift = voiceXShift + 2;\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                // upper voice is middle voice, so shift it right\n                                noteU.note.setXShift(xShift);\n                            }\n                            else {\n                                // shift lower voice right\n                                noteL.note.setXShift(xShift);\n                            }\n                        }\n                        else if (noteU.note.voice !== noteL.note.voice) {\n                            //If we are not in the same voice\n                            if (noteU.stemDirection === noteL.stemDirection) {\n                                if (noteU.line !== noteL.line) {\n                                    xShift = voiceXShift + 2;\n                                    noteU.note.setXShift(xShift);\n                                }\n                                else {\n                                    //same line, swap stem direction for one note\n                                    if (noteL.stemDirection === 1) {\n                                        noteL.stemDirection = -1;\n                                        noteL.note.setStemDirection(-1);\n                                    }\n                                }\n                            }\n                        } //Very close whole notes\n                    }\n                    else if (lineDiff < 1) {\n                        xShift = voiceXShift + 2;\n                        if (noteU.note.duration < noteL.note.duration) {\n                            // upper voice is shorter, so shift it right\n                            noteU.note.setXShift(xShift);\n                        }\n                        else {\n                            // shift lower voice right\n                            noteL.note.setXShift(xShift);\n                        }\n                    }\n                    else if (noteU.note.hasStem()) {\n                        noteU.stemDirection = -noteU.note.getStemDirection();\n                        noteU.note.setStemDirection(noteU.stemDirection);\n                    }\n                    else if (noteL.note.hasStem()) {\n                        noteL.stemDirection = -noteL.note.getStemDirection();\n                        noteL.note.setStemDirection(noteL.stemDirection);\n                    }\n                }\n            }\n            // format complete\n            state.rightShift += xShift;\n            return true;\n        }\n        if (!noteM)\n            throw new RuntimeError('InvalidState', 'noteM not defined.');\n        // For three voices, test if rests can be repositioned\n        //\n        // Special case 1 :: middle voice rest between two notes\n        //\n        if (noteM.isrest && !noteU.isrest && !noteL.isrest) {\n            if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {\n                const restHeight = noteM.maxLine - noteM.minLine;\n                const space = noteU.minLine - noteL.maxLine;\n                if (restHeight < space) {\n                    // center middle voice rest between the upper and lower voices\n                    centerRest(noteM, noteU, noteL);\n                }\n                else {\n                    xShift = voiceXShift + 2; // shift middle rest right\n                    noteM.note.setXShift(xShift);\n                    if (noteL.note.hasBeam() === false) {\n                        noteL.stemDirection = -1;\n                        noteL.note.setStemDirection(-1);\n                    }\n                    if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                        noteU.stemDirection = 1;\n                        noteU.note.setStemDirection(1);\n                    }\n                }\n                // format complete\n                state.rightShift += xShift;\n                return true;\n            }\n        }\n        // Special case 2 :: all voices are rests\n        if (noteU.isrest && noteM.isrest && noteL.isrest) {\n            // Hide upper voice rest\n            noteU.note.renderOptions.draw = false;\n            // Hide lower voice rest\n            noteL.note.renderOptions.draw = false;\n            // format complete\n            state.rightShift += xShift;\n            return true;\n        }\n        // Test if any other rests can be repositioned\n        if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {\n            // Hide middle voice rest\n            noteM.note.renderOptions.draw = false;\n        }\n        if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {\n            // Hide middle voice rest\n            noteM.note.renderOptions.draw = false;\n        }\n        if (noteU.isrest && noteU.minLine <= noteM.maxLine) {\n            // shift upper voice rest up;\n            shiftRestVertical(noteU, noteM, 1);\n        }\n        if (noteL.isrest && noteM.minLine <= noteL.maxLine) {\n            // shift lower voice rest down\n            shiftRestVertical(noteL, noteM, -1);\n        }\n        // If middle voice intersects upper or lower voice\n        if (noteU.minLine <= noteM.maxLine + 0.5 || noteM.minLine <= noteL.maxLine) {\n            // shift middle note right\n            xShift = voiceXShift + 2;\n            noteM.note.setXShift(xShift);\n            if (noteL.note.hasBeam() === false) {\n                noteL.stemDirection = -1;\n                noteL.note.setStemDirection(-1);\n            }\n            if (noteU.minLine <= noteL.maxLine && noteU.note.hasBeam() === false) {\n                noteU.stemDirection = 1;\n                noteU.note.setStemDirection(1);\n            }\n        }\n        state.rightShift += xShift;\n        return true;\n    }\n    static postFormat(notes) {\n        if (!notes)\n            return false;\n        notes.forEach((note) => note.postFormat());\n        return true;\n    }\n    constructor(noteStruct) {\n        var _a, _b, _c;\n        super(noteStruct);\n        //////////////////////////////////////////////////////////////////////////////////////////////////\n        // INSTANCE MEMBERS\n        this.minLine = 0;\n        this.maxLine = 0;\n        // Sorted variant of keyProps used internally.\n        this.sortedKeyProps = [];\n        this.ledgerLineStyle = {};\n        this.clef = (_a = noteStruct.clef) !== null && _a !== void 0 ? _a : 'treble';\n        this.octaveShift = (_b = noteStruct.octaveShift) !== null && _b !== void 0 ? _b : 0;\n        // Pull note rendering properties.\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        // if true, displace note to right\n        this.displaced = false;\n        this.dotShiftY = 0;\n        // for displaced ledger lines\n        this.useDefaultHeadX = false;\n        // Drawing\n        this._noteHeads = [];\n        this.modifiers = [];\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // number of stroke px to the left and right of head\n            strokePx: noteStruct.strokePx || StaveNote.LEDGER_LINE_OFFSET });\n        this.calculateKeyProps();\n        this.buildStem();\n        // Set the stem direction\n        if (noteStruct.autoStem) {\n            this.autoStem();\n        }\n        else {\n            this.setStemDirection((_c = noteStruct.stemDirection) !== null && _c !== void 0 ? _c : Stem.UP);\n        }\n        this.reset();\n        this.buildFlag();\n    }\n    reset() {\n        super.reset();\n        // Save prior noteHead styles & reapply them after making new noteheads.\n        const noteHeadStyles = this._noteHeads.map((noteHead) => noteHead.getStyle());\n        this.buildNoteHeads();\n        this._noteHeads.forEach((noteHead, index) => {\n            const noteHeadStyle = noteHeadStyles[index];\n            if (noteHeadStyle)\n                noteHead.setStyle(noteHeadStyle);\n        });\n        const stave = this.stave;\n        if (stave) {\n            this.setStave(stave);\n        }\n        this.calcNoteDisplacements();\n        return this;\n    }\n    setBeam(beam) {\n        this.beam = beam;\n        this.calcNoteDisplacements();\n        // Update stem extension if a beam is assigned.\n        if (this.stem) {\n            this.stem.setExtension(this.getStemExtension());\n        }\n        return this;\n    }\n    // Builds a `Stem` for the note\n    buildStem() {\n        this.setStem(new Stem({ hide: this.isRest() }));\n        return this;\n    }\n    // Builds a `NoteHead` for each key in the note\n    buildNoteHeads() {\n        this._noteHeads = [];\n        const stemDirection = this.getStemDirection();\n        const keys = this.getKeys();\n        let lastLine = undefined;\n        let lineDiff = undefined;\n        let displaced = false;\n        // Draw notes from bottom to top.\n        // For down-stem notes, we draw from top to bottom.\n        let start;\n        let end;\n        let step;\n        if (stemDirection === Stem.UP) {\n            start = 0;\n            end = keys.length;\n            step = 1;\n        }\n        else {\n            start = keys.length - 1;\n            end = -1;\n            step = -1;\n        }\n        for (let i = start; i !== end; i += step) {\n            // Building noteheads rely on sortedKeNotes in order to calculate the displacements\n            const noteProps = this.sortedKeyProps[i].keyProps;\n            const line = noteProps.line;\n            // Keep track of last line with a note head, so that consecutive heads\n            // are correctly displaced.\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                lineDiff = Math.abs(lastLine - line);\n                if (lineDiff === 0 || lineDiff === 0.5) {\n                    displaced = !displaced;\n                }\n                else {\n                    displaced = false;\n                    this.useDefaultHeadX = true;\n                }\n            }\n            lastLine = line;\n            const notehead = new NoteHead({\n                duration: this.duration,\n                noteType: this.noteType,\n                displaced,\n                stemDirection,\n                customGlyphCode: noteProps.code,\n                line: noteProps.line,\n            });\n            notehead.fontInfo = this.fontInfo;\n            this.addChild(notehead);\n            this._noteHeads[this.sortedKeyProps[i].index] = notehead;\n        }\n        return this._noteHeads;\n    }\n    // Automatically sets the stem direction based on the keys in the note\n    autoStem() {\n        this.setStemDirection(this.calculateOptimalStemDirection());\n    }\n    calculateOptimalStemDirection() {\n        // Figure out optimal stem direction based on given notes\n        // minLine & maxLine rely on sortedKeyProps\n        this.minLine = this.sortedKeyProps[0].keyProps.line;\n        this.maxLine = this.sortedKeyProps[this.keyProps.length - 1].keyProps.line;\n        const MIDDLE_LINE = 3;\n        const decider = (this.minLine + this.maxLine) / 2;\n        const stemDirection = decider < MIDDLE_LINE ? Stem.UP : Stem.DOWN;\n        return stemDirection;\n    }\n    // Calculates and stores the properties for each key in the note\n    calculateKeyProps() {\n        var _a;\n        let lastLine;\n        for (let i = 0; i < this.keys.length; ++i) {\n            const key = this.keys[i];\n            const options = { octaveShift: (_a = this.octaveShift) !== null && _a !== void 0 ? _a : 0, duration: this.duration };\n            const props = Tables.keyProperties(key, this.clef, this.noteType, options);\n            if (!props) {\n                throw new RuntimeError('BadArguments', `Invalid key for note properties: ${key}`);\n            }\n            // Override line placement for default rests\n            if (props.key === 'R') {\n                if (this.duration === '1' || this.duration === 'w') {\n                    props.line = 4;\n                }\n                else {\n                    props.line = 3;\n                }\n            }\n            // Calculate displacement of this note\n            const line = props.line;\n            if (lastLine === undefined) {\n                lastLine = line;\n            }\n            else {\n                // < 1 means == 0.5 (second) or 0.0 (unison)\n                if (Math.abs(lastLine - line) < 1) {\n                    this.displaced = true;\n                    props.displaced = true;\n                    // Have to mark the previous note as\n                    // displaced as well, for modifier placement\n                    if (this.keyProps.length > 0) {\n                        this.keyProps[i - 1].displaced = true;\n                    }\n                }\n            }\n            lastLine = line;\n            this.keyProps.push(props);\n        }\n        // Sort the notes from lowest line to highest line in sortedKeyProps\n        // Warn no longer required as keyProps remains unsorted\n        this.keyProps.forEach((keyProps, index) => {\n            this.sortedKeyProps.push({ keyProps, index });\n        });\n        this.sortedKeyProps.sort((a, b) => a.keyProps.line - b.keyProps.line);\n    }\n    // Get the `BoundingBox` for the entire note\n    getBoundingBox() {\n        const boundingBox = new BoundingBox(this.getAbsoluteX(), this.ys[0], 0, 0);\n        this._noteHeads.forEach((notehead) => {\n            boundingBox.mergeWith(notehead.getBoundingBox());\n        });\n        const { yTop, yBottom } = this.getNoteHeadBounds();\n        if (!this.isRest() && this.hasStem()) {\n            const noteStemHeight = this.stem.getHeight();\n            const stemY = this.getStemDirection() === Stem.DOWN\n                ? yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent\n                : yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;\n            boundingBox.mergeWith(new BoundingBox(this.getAbsoluteX(), stemY, 0, 0));\n        }\n        if (this.hasFlag()) {\n            const bbFlag = this.flag.getBoundingBox();\n            boundingBox.mergeWith(bbFlag);\n        }\n        for (let i = 0; i < this.modifiers.length; i++) {\n            boundingBox.mergeWith(this.modifiers[i].getBoundingBox());\n        }\n        return boundingBox;\n    }\n    // Gets the line number of the bottom note in the chord.\n    // If `isTopNote` is `true` then get the top note's line number instead\n    getLineNumber(isTopNote) {\n        if (!this.keyProps.length) {\n            throw new RuntimeError('NoKeyProps', \"Can't get bottom note line, because note is not initialized properly.\");\n        }\n        let resultLine = this.keyProps[0].line;\n        // No precondition assumed for sortedness of keyProps array\n        for (let i = 0; i < this.keyProps.length; i++) {\n            const thisLine = this.keyProps[i].line;\n            if (isTopNote) {\n                if (thisLine > resultLine)\n                    resultLine = thisLine;\n            }\n            else {\n                if (thisLine < resultLine)\n                    resultLine = thisLine;\n            }\n        }\n        return resultLine;\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        const val = this.glyphProps.codeHead;\n        return val >= '\\ue4e0' && val <= '\\ue4ff';\n    }\n    // Determine if the current note is a chord\n    isChord() {\n        return !this.isRest() && this.keys.length > 1;\n    }\n    // Determine if the `StaveNote` has a stem\n    hasStem() {\n        return this.glyphProps.stem;\n    }\n    hasFlag() {\n        return super.hasFlag() && !this.isRest();\n    }\n    getStemX() {\n        if (this.noteType === 'r') {\n            return this.getCenterGlyphX();\n        }\n        else {\n            // We adjust the origin of the stem because we want the stem left-aligned\n            // with the notehead if stemmed-down, and right-aligned if stemmed-up\n            return super.getStemX() + (this.stemDirection ? Stem.WIDTH / (2 * -this.stemDirection) : 0);\n        }\n    }\n    // Get the `y` coordinate for text placed on the top/bottom of a\n    // note at a desired `textLine`\n    getYForTopText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.min(this.checkStave().getYForTopText(textLine), extents.topY - this.renderOptions.annotationSpacing * (textLine + 1));\n    }\n    getYForBottomText(textLine) {\n        const extents = this.getStemExtents();\n        return Math.max(this.checkStave().getYForTopText(textLine), extents.baseY + this.renderOptions.annotationSpacing * textLine);\n    }\n    // Sets the current note to the provided `stave`. This applies\n    // `y` values to the `NoteHeads`.\n    setStave(stave) {\n        super.setStave(stave);\n        const ys = this._noteHeads.map((notehead) => {\n            notehead.setStave(stave);\n            return notehead.getY();\n        });\n        this.setYs(ys);\n        if (this.stem) {\n            const { yTop, yBottom } = this.getNoteHeadBounds();\n            this.stem.setYBounds(yTop, yBottom);\n        }\n        return this;\n    }\n    // Check if note is shifted to the right\n    isDisplaced() {\n        return this.displaced;\n    }\n    // Sets whether shift note to the right. `displaced` is a `boolean`\n    setNoteDisplaced(displaced) {\n        this.displaced = displaced;\n        return this;\n    }\n    // Get the starting `x` coordinate for a `StaveTie`\n    getTieRightX() {\n        let tieStartX = this.getAbsoluteX();\n        tieStartX += this.getGlyphWidth() + this.xShift + this.rightDisplacedHeadPx;\n        if (this.modifierContext)\n            tieStartX += this.modifierContext.getRightShift();\n        return tieStartX;\n    }\n    // Get the ending `x` coordinate for a `StaveTie`\n    getTieLeftX() {\n        let tieEndX = this.getAbsoluteX();\n        tieEndX += this.xShift - this.leftDisplacedHeadPx;\n        return tieEndX;\n    }\n    // Get the stave line on which to place a rest\n    getLineForRest() {\n        let restLine = this.keyProps[0].line;\n        if (this.keyProps.length > 1) {\n            const lastLine = this.keyProps[this.keyProps.length - 1].line;\n            const top = Math.max(restLine, lastLine);\n            const bot = Math.min(restLine, lastLine);\n            restLine = midLine(top, bot);\n        }\n        return restLine;\n    }\n    // Get the default `x` and `y` coordinates for the provided `position`\n    // and key `index`\n    getModifierStartXY(position, index, options = {}) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        const { ABOVE, BELOW, LEFT, RIGHT } = Modifier.Position;\n        let x = 0;\n        if (position === LEFT) {\n            // FIXME: Left modifier padding, move to font file\n            x = -1 * 2;\n        }\n        else if (position === RIGHT) {\n            // FIXME: Right modifier padding, move to font file\n            x = this.getGlyphWidth() + this.xShift + 2;\n            if (this.stemDirection === Stem.UP &&\n                this.hasFlag() &&\n                (options.forceFlagRight || isInnerNoteIndex(this, index))) {\n                x += this.flag.getWidth();\n            }\n        }\n        else if (position === BELOW || position === ABOVE) {\n            x = this.getGlyphWidth() / 2;\n        }\n        // addtional y shifts for rests\n        let restShift = 0;\n        switch (this._noteHeads[index].getText()) {\n            case Glyphs.restDoubleWhole:\n            case Glyphs.restWhole:\n                restShift += 0.5;\n                break;\n            case Glyphs.restHalf:\n            case Glyphs.restQuarter:\n            case Glyphs.rest8th:\n            case Glyphs.rest16th:\n                restShift -= 0.5;\n                break;\n            case Glyphs.rest32nd:\n            case Glyphs.rest64th:\n                restShift -= 1.5;\n                break;\n            case Glyphs.rest128th:\n                restShift -= 2.5;\n                break;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index] + restShift * this.checkStave().getSpacingBetweenLines(),\n        };\n    }\n    // Sets the style of the complete StaveNote, including all keys\n    // and the stem.\n    setStyle(style) {\n        return super.setGroupStyle(style);\n    }\n    setStemStyle(style) {\n        const stem = this.getStem();\n        if (stem)\n            stem.setStyle(style);\n        return this;\n    }\n    getStemStyle() {\n        var _a;\n        return (_a = this.stem) === null || _a === void 0 ? void 0 : _a.getStyle();\n    }\n    setLedgerLineStyle(style) {\n        this.ledgerLineStyle = style;\n    }\n    getLedgerLineStyle() {\n        return this.ledgerLineStyle;\n    }\n    setFlagStyle(style) {\n        this.flag.setStyle(style);\n    }\n    getFlagStyle() {\n        return this.flag.getStyle();\n    }\n    /** Get the glyph width. */\n    getGlyphWidth() {\n        return this.noteHeads[0].getWidth();\n    }\n    // Sets the notehead at `index` to the provided coloring `style`.\n    //\n    // `style` is an `object` with the following properties: `shadowColor`,\n    // `shadowBlur`, `fillStyle`, `strokeStyle`\n    setKeyStyle(index, style) {\n        this._noteHeads[index].setStyle(style);\n        return this;\n    }\n    setKeyLine(index, line) {\n        this.keyProps[index].line = line;\n        this.reset();\n        return this;\n    }\n    getKeyLine(index) {\n        return this.keyProps[index].line;\n    }\n    // Get the width of the note if it is displaced. Used for `Voice`\n    // formatting\n    getVoiceShiftWidth() {\n        // TODO: may need to accommodate for dot here.\n        return this.getGlyphWidth() * (this.displaced ? 2 : 1);\n    }\n    // Calculates and sets the extra pixels to the left or right\n    // if the note is displaced.\n    calcNoteDisplacements() {\n        this.setLeftDisplacedHeadPx(this.displaced && this.stemDirection === Stem.DOWN ? this.getGlyphWidth() : 0);\n        // For upstems with flags, the extra space is unnecessary, since it's taken\n        // up by the flag.\n        this.setRightDisplacedHeadPx(!this.hasFlag() && this.displaced && this.stemDirection === Stem.UP ? this.getGlyphWidth() : 0);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        let noteHeadPadding = 0;\n        if (this.modifierContext) {\n            this.modifierContext.preFormat();\n            // If there are no modifiers on this note, make sure there is adequate padding\n            // between the notes.\n            if (this.modifierContext.getWidth() === 0) {\n                noteHeadPadding = StaveNote.minNoteheadPadding;\n            }\n        }\n        let width = this.getGlyphWidth() + this.leftDisplacedHeadPx + this.rightDisplacedHeadPx + noteHeadPadding;\n        // For upward flagged notes, the width of the flag needs to be added\n        if (this.shouldDrawFlag() && this.stemDirection === Stem.UP) {\n            width += this.getGlyphWidth();\n            // TODO: Add flag width as a separate metric\n        }\n        this.setWidth(width);\n        this.preFormatted = true;\n    }\n    /**\n     * @typedef {Object} noteHeadBounds\n     * @property {number} yTop the highest notehead bound\n     * @property {number} yBottom the lowest notehead bound\n     * @property {number|Null} displacedX the starting x for displaced noteheads\n     * @property {number|Null} nonDisplacedX the starting x for non-displaced noteheads\n     * @property {number} highestLine the highest notehead line in traditional music line\n     *  numbering (bottom line = 1, top line = 5)\n     * @property {number} lowestLine the lowest notehead line\n     * @property {number|false} highestDisplacedLine the highest staff line number\n     *   for a displaced notehead\n     * @property {number|false} lowestDisplacedLine\n     * @property {number} highestNonDisplacedLine\n     * @property {number} lowestNonDisplacedLine\n     */\n    /**\n     * Get the staff line and y value for the highest & lowest noteheads\n     * @returns {noteHeadBounds}\n     */\n    getNoteHeadBounds() {\n        // Top and bottom Y values for stem.\n        let yTop = +Infinity;\n        let yBottom = -Infinity;\n        let nonDisplacedX;\n        let displacedX;\n        let highestLine = this.checkStave().getNumLines();\n        let lowestLine = 1;\n        let highestDisplacedLine;\n        let lowestDisplacedLine;\n        let highestNonDisplacedLine = highestLine;\n        let lowestNonDisplacedLine = lowestLine;\n        this._noteHeads.forEach((notehead) => {\n            const line = notehead.getLine();\n            const y = notehead.getY();\n            yTop = Math.min(y, yTop);\n            yBottom = Math.max(y, yBottom);\n            if (displacedX === undefined && notehead.isDisplaced()) {\n                displacedX = notehead.getAbsoluteX();\n            }\n            if (nonDisplacedX === undefined && !notehead.isDisplaced()) {\n                nonDisplacedX = notehead.getAbsoluteX();\n            }\n            highestLine = Math.max(line, highestLine);\n            lowestLine = Math.min(line, lowestLine);\n            if (notehead.isDisplaced()) {\n                highestDisplacedLine = highestDisplacedLine === undefined ? line : Math.max(line, highestDisplacedLine);\n                lowestDisplacedLine = lowestDisplacedLine === undefined ? line : Math.min(line, lowestDisplacedLine);\n            }\n            else {\n                highestNonDisplacedLine = Math.max(line, highestNonDisplacedLine);\n                lowestNonDisplacedLine = Math.min(line, lowestNonDisplacedLine);\n            }\n        }, this);\n        return {\n            yTop,\n            yBottom,\n            displacedX,\n            nonDisplacedX,\n            highestLine,\n            lowestLine,\n            highestDisplacedLine,\n            lowestDisplacedLine,\n            highestNonDisplacedLine,\n            lowestNonDisplacedLine,\n        };\n    }\n    // Get the starting `x` coordinate for the noteheads\n    getNoteHeadBeginX() {\n        return this.getAbsoluteX() + this.xShift;\n    }\n    // Get the ending `x` coordinate for the noteheads\n    getNoteHeadEndX() {\n        const xBegin = this.getNoteHeadBeginX();\n        return xBegin + this.getGlyphWidth();\n    }\n    get noteHeads() {\n        return this._noteHeads.slice();\n    }\n    // Draw the ledger lines between the stave and the highest/lowest keys\n    drawLedgerLines() {\n        const stave = this.checkStave();\n        const { renderOptions: { strokePx }, } = this;\n        const ctx = this.checkContext();\n        const width = this.getGlyphWidth() + strokePx * 2;\n        const doubleWidth = 2 * (this.getGlyphWidth() + strokePx) - Stem.WIDTH / 2;\n        if (this.isRest())\n            return;\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        const { highestLine, lowestLine, highestDisplacedLine, highestNonDisplacedLine, lowestDisplacedLine, lowestNonDisplacedLine, displacedX, nonDisplacedX, } = this.getNoteHeadBounds();\n        // Early out if there are no ledger lines to draw.\n        if (highestLine < 6 && lowestLine > 0)\n            return;\n        const minX = Math.min(displacedX !== null && displacedX !== void 0 ? displacedX : 0, nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0);\n        const drawLedgerLine = (y, normal, displaced) => {\n            let x;\n            if (displaced && normal)\n                x = minX - strokePx;\n            else if (normal)\n                x = (nonDisplacedX !== null && nonDisplacedX !== void 0 ? nonDisplacedX : 0) - strokePx;\n            else\n                x = (displacedX !== null && displacedX !== void 0 ? displacedX : 0) - strokePx;\n            const ledgerWidth = normal && displaced ? doubleWidth : width;\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + ledgerWidth, y);\n            ctx.stroke();\n        };\n        const style = Object.assign(Object.assign({}, stave.getDefaultLedgerLineStyle()), this.getLedgerLineStyle());\n        ctx.save();\n        this.applyStyle(ctx, style);\n        // Draw ledger lines below the staff:\n        for (let line = 6; line <= highestLine; ++line) {\n            const normal = nonDisplacedX !== undefined && line <= highestNonDisplacedLine;\n            const displaced = highestDisplacedLine !== undefined && line <= highestDisplacedLine;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        // Draw ledger lines above the staff:\n        for (let line = 0; line >= lowestLine; --line) {\n            const normal = nonDisplacedX !== undefined && line >= lowestNonDisplacedLine;\n            const displaced = lowestDisplacedLine !== undefined && line >= lowestDisplacedLine;\n            drawLedgerLine(stave.getYForNote(line), normal, displaced);\n        }\n        ctx.restore();\n    }\n    // Draw all key modifiers\n    drawModifiers(noteheadParam) {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            const index = modifier.checkIndex();\n            const notehead = this._noteHeads[index];\n            if (notehead === noteheadParam) {\n                modifier.setContext(ctx);\n                modifier.drawWithStyle();\n            }\n        }\n    }\n    shouldDrawFlag() {\n        const hasStem = this.stem !== undefined;\n        const hasFlag = this.glyphProps.codeFlagUp !== undefined;\n        const hasNoBeam = this.beam === undefined;\n        return hasStem && hasFlag && hasNoBeam && !this.isRest();\n    }\n    // Draw the flag for the note\n    drawFlag() {\n        const ctx = this.checkContext();\n        if (!ctx) {\n            throw new RuntimeError('NoCanvasContext', \"Can't draw without a canvas context.\");\n        }\n        if (this.shouldDrawFlag()) {\n            const { yTop, yBottom } = this.getNoteHeadBounds();\n            const noteStemHeight = this.stem.getHeight();\n            const flagX = this.getStemX() - Tables.STEM_WIDTH / 2;\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    yTop - noteStemHeight - this.flag.getTextMetrics().actualBoundingBoxDescent\n                : // Up stems are above the note head and have flags on the right.\n                    yBottom - noteStemHeight + this.flag.getTextMetrics().actualBoundingBoxAscent;\n            // Draw the Flag\n            this.flag.setContext(ctx).setX(flagX).setY(flagY).drawWithStyle();\n        }\n    }\n    // Draw the NoteHeads\n    drawNoteHeads() {\n        const ctx = this.checkContext();\n        this._noteHeads.forEach((notehead) => {\n            notehead.setContext(ctx).drawWithStyle();\n        });\n    }\n    drawStem(stemOptions) {\n        // GCR TODO: I can't find any context in which this is called with the stemStruct\n        // argument in the codebase or tests. Nor can I find a case where super.drawStem\n        // is called at all. Perhaps these should be removed?\n        const ctx = this.checkContext();\n        if (stemOptions) {\n            this.setStem(new Stem(stemOptions));\n        }\n        // If we will render a flag, we shorten the stem so that the tip\n        // does not poke through the flag.\n        if (this.shouldDrawFlag() && this.stem) {\n            this.stem.adjustHeightForFlag();\n        }\n        if (this.stem) {\n            this.stem.setContext(ctx).drawWithStyle();\n        }\n    }\n    /**\n     * Override stemmablenote stem extension to adjust for distance from middle line.\n     */\n    getStemExtension() {\n        const superStemExtension = super.getStemExtension();\n        if (!this.glyphProps.stem) {\n            return superStemExtension;\n        }\n        const stemDirection = this.getStemDirection();\n        if (stemDirection !== this.calculateOptimalStemDirection()) {\n            return superStemExtension; // no adjustment for manually set stem direction.\n        }\n        let midLineDistance;\n        const MIDDLE_LINE = 3;\n        if (stemDirection === Stem.UP) {\n            // Note that the use of maxLine here instead of minLine might\n            // seem counterintuitive, but in the case of (say) treble clef\n            // chord(F2, E4) stem up, we do not want to extend the stem because\n            // of F2, when a normal octave-length stem above E4 is fine.\n            //\n            // maxLine and minLine are set in calculateOptimalStemDirection() so\n            // will be known.\n            midLineDistance = MIDDLE_LINE - this.maxLine;\n        }\n        else {\n            midLineDistance = this.minLine - MIDDLE_LINE;\n        }\n        // how many lines more than an octave is the relevant notehead?\n        const linesOverOctaveFromMidLine = midLineDistance - 3.5;\n        if (linesOverOctaveFromMidLine <= 0) {\n            return superStemExtension;\n        }\n        const stave = this.getStave();\n        let spacingBetweenLines = 10;\n        if (stave !== undefined) {\n            spacingBetweenLines = stave.getSpacingBetweenLines();\n        }\n        return superStemExtension + linesOverOctaveFromMidLine * spacingBetweenLines;\n    }\n    // Draws all the `StaveNote` parts. This is the main drawing method.\n    draw() {\n        if (this.renderOptions.draw === false)\n            return;\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        const ctx = this.checkContext();\n        const xBegin = this.getNoteHeadBeginX();\n        const shouldRenderStem = this.hasStem() && !this.beam;\n        // Format note head x positions\n        this._noteHeads.forEach((notehead) => notehead.setX(xBegin));\n        if (this.stem) {\n            // Format stem x positions\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n        }\n        L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);\n        // Apply the overall style -- may be contradicted by local settings:\n        ctx.openGroup('stavenote', this.getAttribute('id'));\n        this.drawLedgerLines();\n        if (shouldRenderStem)\n            this.drawStem();\n        this.drawNoteHeads();\n        this.drawFlag();\n        const bb = this.getBoundingBox();\n        ctx.pointerRect(bb.getX(), bb.getY(), bb.getW(), bb.getH());\n        ctx.closeGroup();\n        this.setRendered();\n    }\n}\nStaveNote.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveTie extends Element {\n    static get CATEGORY() {\n        return Category.StaveTie;\n    }\n    /**\n     * @param notes is a struct that has:\n     *\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text = '') {\n        super();\n        this.setNotes(notes);\n        this.text = text;\n        this.renderOptions = {\n            cp1: 8, // Curve control point 1\n            cp2: 12, // Curve control point 2\n            shortTieCutoff: 10,\n            cp1Short: 2,\n            cp2Short: 8,\n            textShiftX: 0,\n            firstXShift: 0,\n            lastXShift: 0,\n            yShift: 7,\n            tieSpacing: 0,\n        };\n    }\n    /**\n     * Returns either the direction explicitly set with setDirection, or\n     * a logical direction based on lastNote or firstNote.\n     */\n    getDirection() {\n        if (this.direction !== undefined && this.direction !== null) {\n            return this.direction;\n        }\n        else if (this.notes.lastNote) {\n            return this.notes.lastNote.getStemDirection();\n        }\n        else if (this.notes.firstNote) {\n            return this.notes.firstNote.getStemDirection();\n        }\n        else {\n            return 0;\n        }\n    }\n    setDirection(direction) {\n        this.direction = direction;\n        return this;\n    }\n    /**\n     * Set the notes to attach this tie to.\n     *\n     * @param {!Object} notes The notes to tie up.\n     */\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Tie needs to have either firstNote or lastNote set.');\n        }\n        if (!notes.firstIndexes) {\n            notes.firstIndexes = [0];\n        }\n        if (!notes.lastIndexes) {\n            notes.lastIndexes = [0];\n        }\n        if (notes.firstIndexes.length !== notes.lastIndexes.length) {\n            throw new RuntimeError('BadArguments', 'Tied notes must have same number of indexes.');\n        }\n        this.notes = notes;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.notes.firstNote || !this.notes.lastNote;\n    }\n    /**\n     * @param params.firstX is specified in pixels.\n     * @param params.lastX is specified in pixels.\n     */\n    renderTie(params) {\n        if (params.firstYs.length === 0 || params.lastYs.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        let cp1 = this.renderOptions.cp1;\n        let cp2 = this.renderOptions.cp2;\n        if (Math.abs(params.lastX - params.firstX) < this.renderOptions.shortTieCutoff) {\n            // do not get super exaggerated curves for very short ties\n            cp1 = this.renderOptions.cp1Short;\n            cp2 = this.renderOptions.cp2Short;\n        }\n        const firstXShift = this.renderOptions.firstXShift;\n        const lastXShift = this.renderOptions.lastXShift;\n        const yShift = this.renderOptions.yShift * params.direction;\n        // setNotes(...) verified that firstIndexes and lastIndexes are not undefined.\n        // As a result, we use the ! non-null assertion operator here.\n        const firstIndexes = this.notes.firstIndexes;\n        const lastIndexes = this.notes.lastIndexes;\n        ctx.openGroup('stavetie', this.getAttribute('id'));\n        for (let i = 0; i < firstIndexes.length; ++i) {\n            const cpX = (params.lastX + lastXShift + (params.firstX + firstXShift)) / 2;\n            // firstY and lastY are specified in pixels.\n            const firstY = params.firstYs[firstIndexes[i]] + yShift;\n            const lastY = params.lastYs[lastIndexes[i]] + yShift;\n            if (isNaN(firstY) || isNaN(lastY)) {\n                throw new RuntimeError('BadArguments', 'Bad indexes for tie rendering.');\n            }\n            const topControlPointY = (firstY + lastY) / 2 + cp1 * params.direction;\n            const bottomControlPointY = (firstY + lastY) / 2 + cp2 * params.direction;\n            ctx.beginPath();\n            ctx.moveTo(params.firstX + firstXShift, firstY);\n            ctx.quadraticCurveTo(cpX, topControlPointY, params.lastX + lastXShift, lastY);\n            ctx.quadraticCurveTo(cpX, bottomControlPointY, params.firstX + firstXShift, firstY);\n            ctx.closePath();\n            ctx.fill();\n        }\n        ctx.closeGroup();\n    }\n    /**\n     * @param firstX specified in pixels\n     * @param lastX specified in pixels\n     */\n    renderTieText(firstX, lastX) {\n        var _a, _b, _c;\n        const ctx = this.checkContext();\n        let centerX = (firstX + lastX) / 2;\n        centerX -= ctx.measureText(this.text).width / 2;\n        const stave = (_b = (_a = this.notes.firstNote) === null || _a === void 0 ? void 0 : _a.checkStave()) !== null && _b !== void 0 ? _b : (_c = this.notes.lastNote) === null || _c === void 0 ? void 0 : _c.checkStave();\n        if (stave) {\n            ctx.setFont(this.fontInfo);\n            ctx.fillText(this.text, centerX + this.renderOptions.textShiftX, stave.getYForTopText() - 1);\n        }\n    }\n    /**\n     * Returns the TieNotes structure of the first and last note this tie connects.\n     */\n    getNotes() {\n        return this.notes;\n    }\n    /**\n     * Returns the X position in pixels that the tie will be drawn starting from;\n     * ideally from the firstNote, alternatively from the lastNote, or 0 if all else fails.\n     */\n    getFirstX() {\n        if (this.notes.firstNote) {\n            return this.notes.firstNote.getTieRightX() + this.renderOptions.tieSpacing;\n        }\n        else if (this.notes.lastNote) {\n            return this.notes.lastNote.checkStave().getTieStartX();\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * Returns the X position in pixels that the tie will be drawn ending at;\n     * ideally from the firstNote, alternatively from the lastNote, or 0 if all else fails.\n     */\n    getLastX() {\n        if (this.notes.lastNote) {\n            return this.notes.lastNote.getTieLeftX() + this.renderOptions.tieSpacing;\n        }\n        else if (this.notes.firstNote) {\n            return this.notes.firstNote.checkStave().getTieEndX();\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * Get the Y positions of the places where a tie needs to be drawn starting from.\n     */\n    getFirstYs() {\n        if (this.notes.firstNote) {\n            return this.notes.firstNote.getYs();\n        }\n        else if (this.notes.lastNote) {\n            return this.notes.lastNote.getYs();\n        }\n        else {\n            return [0];\n        }\n    }\n    /**\n     * Get the Y positions of the places where a tie needs to be drawn ending at.\n     */\n    getLastYs() {\n        if (this.notes.lastNote) {\n            return this.notes.lastNote.getYs();\n        }\n        else if (this.notes.firstNote) {\n            return this.notes.firstNote.getYs();\n        }\n        else {\n            return [0];\n        }\n    }\n    /**\n     * If a tie has firstNote and not lastNote, or vice-versa, then their\n     * firstIndexes and lastIndexes need to be equal to each other.\n     *\n     * Does nothing if both notes.firstNote and notes.lastNote are defined (or\n     * if neither are)\n     *\n     * (Note that after doing so they share a common Array object, so any change\n     * to one will affect the other; this behavior may change in a future release)\n     */\n    synchronizeIndexes() {\n        if (this.notes.firstNote && this.notes.lastNote) {\n            return;\n        }\n        else if (!this.notes.firstNote && !this.notes.lastNote) {\n            return;\n        }\n        else if (this.notes.firstNote) {\n            this.notes.lastIndexes = this.notes.firstIndexes;\n        }\n        else {\n            // this.notes.lastNote defined, but not firstNote\n            this.notes.firstIndexes = this.notes.lastIndexes;\n        }\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        this.synchronizeIndexes();\n        const firstX = this.getFirstX();\n        const lastX = this.getLastX();\n        this.renderTie({\n            firstX,\n            lastX,\n            firstYs: this.getFirstYs(),\n            lastYs: this.getLastYs(),\n            direction: this.getDirection(), // note: not this.direction\n        });\n        this.renderTieText(firstX, lastX);\n        return true;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// ## Description\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { StaveTie } from './stavetie';\nimport { Category } from './typeguard';\nexport class TabTie extends StaveTie {\n    static get CATEGORY() {\n        return Category.TabTie;\n    }\n    static createHammeron(notes) {\n        return new TabTie(notes, 'H');\n    }\n    static createPulloff(notes) {\n        return new TabTie(notes, 'P');\n    }\n    /**\n     * @param notes is a struct that has:\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     *\n     * @param text\n     */\n    constructor(notes, text) {\n        super(notes, text);\n        this.renderOptions.cp1 = 9;\n        this.renderOptions.cp2 = 11;\n        this.renderOptions.yShift = 3;\n        this.direction = -1; // Tab tie's are always face up.\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined, RuntimeError, sumArray } from './util';\nexport var VoiceMode;\n(function (VoiceMode) {\n    VoiceMode[VoiceMode[\"STRICT\"] = 1] = \"STRICT\";\n    VoiceMode[VoiceMode[\"SOFT\"] = 2] = \"SOFT\";\n    VoiceMode[VoiceMode[\"FULL\"] = 3] = \"FULL\";\n})(VoiceMode || (VoiceMode = {}));\n/**\n * `Voice` is mainly a container object to group `Tickables` for formatting.\n */\nexport class Voice extends Element {\n    static get CATEGORY() {\n        return Category.Voice;\n    }\n    /**\n     * Modes allow the addition of ticks in three different ways:\n     * - STRICT: This is the default. Ticks must fill the voice.\n     * - SOFT: Ticks can be added without restrictions.\n     * - FULL: Ticks do not need to fill the voice, but can't exceed the maximum tick length.\n     */\n    static get Mode() {\n        return VoiceMode;\n    }\n    constructor(time) {\n        super();\n        this.resolutionMultiplier = 1;\n        this.mode = VoiceMode.STRICT;\n        this.preFormatted = false;\n        this.ticksUsed = new Fraction(0, 1);\n        this.largestTickWidth = 0;\n        this.tickables = [];\n        this.options = {\n            softmaxFactor: Tables.SOFTMAX_FACTOR,\n        };\n        // Convert the `time` string into a VoiceTime object if necessary.\n        let voiceTime;\n        if (typeof time === 'string') {\n            // Time signature shortcut: \"4/4\", \"3/8\", etc.\n            const match = time.match(/(\\d+)\\/(\\d+)/);\n            if (match) {\n                voiceTime = {\n                    numBeats: parseInt(match[1]),\n                    beatValue: parseInt(match[2]),\n                };\n            }\n        }\n        else {\n            voiceTime = time;\n        }\n        // Default time signature is 4/4.\n        this.time = Object.assign({ numBeats: 4, beatValue: 4, resolution: Tables.RESOLUTION }, voiceTime);\n        // Recalculate total ticks.\n        this.totalTicks = new Fraction(this.time.numBeats * (this.time.resolution / this.time.beatValue), 1);\n        // until tickables are added, the smallestTickCount is the same as the stated totalTicks duration.\n        this.smallestTickCount = this.totalTicks.clone();\n    }\n    /** Get the total ticks in the voice. */\n    getTotalTicks() {\n        return this.totalTicks;\n    }\n    /** Get the total ticks used in the voice by all the tickables. */\n    getTicksUsed() {\n        return this.ticksUsed;\n    }\n    /** Get the largest width of all the tickables. */\n    getLargestTickWidth() {\n        return this.largestTickWidth;\n    }\n    /** Get the tick count for the shortest tickable */\n    getSmallestTickCount() {\n        return this.smallestTickCount;\n    }\n    /** Get the tickables in the voice. */\n    getTickables() {\n        return this.tickables;\n    }\n    /** Get the voice mode (Voice.Mode.SOFT, STRICT, or FULL) */\n    getMode() {\n        return this.mode;\n    }\n    /**\n     * Set the voice mode.\n     * @param mode value from `VoiceMode` or Voice.Mode\n     */\n    setMode(mode) {\n        this.mode = mode;\n        return this;\n    }\n    /** Get the resolution multiplier for the voice. */\n    getResolutionMultiplier() {\n        return this.resolutionMultiplier;\n    }\n    /** Get the actual tick resolution for the voice. */\n    getActualResolution() {\n        return this.resolutionMultiplier * this.time.resolution;\n    }\n    /** Set the voice's stave. */\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    /** Get the bounding box for the voice. */\n    getBoundingBox() {\n        const boundingBox = this.tickables[0].getBoundingBox();\n        for (let i = 1; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            if (!tickable.getStave() && this.stave)\n                tickable.setStave(this.stave);\n            const bb = tickable.getBoundingBox();\n            boundingBox.mergeWith(bb);\n        }\n        return boundingBox;\n    }\n    /** Set the voice mode to strict or soft. */\n    setStrict(strict) {\n        this.mode = strict ? VoiceMode.STRICT : VoiceMode.SOFT;\n        return this;\n    }\n    /** Determine if the voice is complete according to the voice mode. */\n    isComplete() {\n        if (this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) {\n            return this.ticksUsed.equals(this.totalTicks);\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * We use softmax to layout the tickables proportional to the exponent of\n     * their duration. The softmax factor is used to determine the 'linearness' of\n     * the layout.\n     *\n     * The softmax of all the tickables in this voice should sum to 1.\n     */\n    setSoftmaxFactor(factor) {\n        this.options.softmaxFactor = factor;\n        this.expTicksUsed = 0; // reset\n        return this;\n    }\n    /**\n     * Calculate the sum of the exponents of all the ticks in this voice to use\n     * as the denominator of softmax.  (It is not the sum of the softmax(t) over all tickables)\n     *\n     * Note that the \"exp\" of \"expTicksUsed\" stands for \"expontential\" ticks used,\n     * not \"expected\" ticks used.\n     */\n    reCalculateExpTicksUsed() {\n        const totalTicks = this.ticksUsed.value();\n        const exp = (tickable) => Math.pow(this.options.softmaxFactor, tickable.getTicks().value() / totalTicks);\n        this.expTicksUsed = sumArray(this.tickables.map(exp));\n        return this.expTicksUsed;\n    }\n    /** Get the softmax-scaled value of a tick duration. 'tickValue' is a number. */\n    softmax(tickValue) {\n        if (!this.expTicksUsed) {\n            this.expTicksUsed = this.reCalculateExpTicksUsed();\n        }\n        const totalTicks = this.ticksUsed.value();\n        const exp = (v) => Math.pow(this.options.softmaxFactor, v / totalTicks);\n        const sm = exp(tickValue) / this.expTicksUsed;\n        return sm;\n    }\n    /** Add a tickable to the voice. */\n    addTickable(tickable) {\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            // Update the total ticks for this line.\n            this.ticksUsed.add(ticks);\n            this.expTicksUsed = 0; // reset\n            if ((this.mode === VoiceMode.STRICT || this.mode === VoiceMode.FULL) &&\n                this.ticksUsed.greaterThan(this.totalTicks)) {\n                this.ticksUsed.subtract(ticks);\n                throw new RuntimeError('BadArgument', 'Too many ticks.');\n            }\n            // Track the smallest tickable for formatting.\n            if (ticks.lessThan(this.smallestTickCount)) {\n                this.smallestTickCount = ticks.clone();\n            }\n            this.resolutionMultiplier = this.ticksUsed.denominator;\n            // Expand total ticks using denominator from ticks used.\n            this.totalTicks.add(0, this.ticksUsed.denominator);\n        }\n        // Add the tickable to the line.\n        this.tickables.push(tickable);\n        tickable.setVoice(this);\n        return this;\n    }\n    /** Add an array of tickables to the voice. */\n    addTickables(tickables) {\n        for (let i = 0; i < tickables.length; ++i) {\n            this.addTickable(tickables[i]);\n        }\n        return this;\n    }\n    /** Preformat the voice by applying the voice's stave to each note. */\n    preFormat() {\n        if (this.preFormatted)\n            return this;\n        const stave = this.checkStave();\n        this.tickables.forEach((tickable) => {\n            if (!tickable.getStave()) {\n                tickable.setStave(stave);\n            }\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    /**\n     * Render the voice onto the canvas `context` and an optional `stave`.\n     * If `stave` is omitted, it is expected that the notes have staves\n     * already set.\n     *\n     * This method also calculates the voice's boundingBox while drawing\n     * the notes. Note the similarities with this.getBoundingBox().\n     */\n    draw(context = this.checkContext(), stave) {\n        stave = stave !== null && stave !== void 0 ? stave : this.stave;\n        this.setRendered();\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            // Set the stave if provided.\n            if (stave) {\n                tickable.setStave(stave);\n            }\n            defined(tickable.getStave(), 'MissingStave', 'The voice cannot draw tickables without staves.');\n            tickable.setContext(context);\n            tickable.drawWithStyle();\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This file implements `GraceNoteGroup` which is used to format and\n// render grace notes.\nimport { Beam } from './beam';\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { Tables } from './tables';\nimport { TabTie } from './tabtie';\nimport { Category, isStaveNote } from './typeguard';\nimport { log } from './util';\nimport { Voice } from './voice';\n// To enable logging for this class. Set `GraceNoteGroup.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (GraceNoteGroup.DEBUG)\n        log('VexFlow.GraceNoteGroup', args);\n}\n/** GraceNoteGroup is used to format and render grace notes. */\nexport class GraceNoteGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.GraceNoteGroup;\n    }\n    /** Arranges groups inside a `ModifierContext`. */\n    static format(gracenoteGroups, state) {\n        const groupSpacingStave = 4;\n        const groupSpacingTab = 0;\n        if (!gracenoteGroups || gracenoteGroups.length === 0)\n            return false;\n        const groupList = [];\n        let prevNote = null;\n        let shift = 0;\n        for (let i = 0; i < gracenoteGroups.length; ++i) {\n            const gracenoteGroup = gracenoteGroups[i];\n            const note = gracenoteGroup.getNote();\n            const isStavenote = isStaveNote(note);\n            const spacing = isStavenote ? groupSpacingStave : groupSpacingTab;\n            if (isStavenote && note !== prevNote) {\n                // Iterate through all notes to get the displaced pixels\n                for (let n = 0; n < note.keys.length; ++n) {\n                    shift = Math.max(note.getLeftDisplacedHeadPx(), shift);\n                }\n                prevNote = note;\n            }\n            groupList.push({ shift: shift, gracenoteGroup, spacing });\n        }\n        // If first note left shift in case it is displaced\n        let groupShift = groupList[0].shift;\n        let formatWidth;\n        let right = false;\n        let left = false;\n        for (let i = 0; i < groupList.length; ++i) {\n            const gracenoteGroup = groupList[i].gracenoteGroup;\n            if (gracenoteGroup.position === Modifier.Position.RIGHT)\n                right = true;\n            else\n                left = true;\n            gracenoteGroup.preFormat();\n            formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;\n            groupShift = Math.max(formatWidth, groupShift);\n        }\n        for (let i = 0; i < groupList.length; ++i) {\n            const gracenoteGroup = groupList[i].gracenoteGroup;\n            formatWidth = gracenoteGroup.getWidth() + groupList[i].spacing;\n            gracenoteGroup.setSpacingFromNextModifier(groupShift - Math.min(formatWidth, groupShift) + StaveNote.minNoteheadPadding);\n        }\n        if (right)\n            state.rightShift += groupShift;\n        if (left)\n            state.leftShift += groupShift;\n        return true;\n    }\n    //** `GraceNoteGroup` inherits from `Modifier` and is placed inside a `ModifierContext`. */\n    constructor(graceNotes, showSlur) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.graceNotes = graceNotes;\n        this.width = 0;\n        this.showSlur = showSlur;\n        this.slur = undefined;\n        this.voice = new Voice({\n            numBeats: 4,\n            beatValue: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.renderOptions = {\n            slurYShift: 0,\n        };\n        this.beams = [];\n        this.voice.addTickables(this.graceNotes);\n        return this;\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (!this.formatter) {\n            this.formatter = new Formatter();\n        }\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0, {});\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    beamNotes(graceNotes) {\n        graceNotes = graceNotes || this.graceNotes;\n        if (graceNotes.length > 1) {\n            const beam = new Beam(graceNotes);\n            beam.renderOptions.beamWidth = 3;\n            beam.renderOptions.partialBeamLength = 4;\n            this.beams.push(beam);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width + StaveNote.minNoteheadPadding;\n    }\n    getGraceNotes() {\n        return this.graceNotes;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        L('Drawing grace note group for:', note);\n        this.alignSubNotesWithNote(this.getGraceNotes(), note, this.position); // Modifier function\n        // Draw grace notes.\n        this.graceNotes.forEach((graceNote) => graceNote.setContext(ctx).drawWithStyle());\n        // Draw beams.\n        this.beams.forEach((beam) => beam.setContext(ctx).drawWithStyle());\n        if (this.showSlur) {\n            // Create and draw slur.\n            const isStavenote = isStaveNote(note);\n            const TieClass = isStavenote ? StaveTie : TabTie;\n            this.slur = new TieClass({\n                lastNote: this.graceNotes[0],\n                firstNote: note,\n                firstIndexes: [0],\n                lastIndexes: [0],\n            });\n            this.slur.renderOptions.cp2 = 12;\n            this.slur.renderOptions.yShift = (isStavenote ? 7 : 5) + this.renderOptions.slurYShift;\n            this.slur.setContext(ctx).drawWithStyle();\n        }\n    }\n}\nGraceNoteGroup.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2016\n//\n// ## Description\n//\n// This file implements `NoteSubGroup` which is used to format and\n// render notes as a `Modifier`\n// ex) ClefNote, TimeSigNote and BarNote.\nimport { Formatter } from './formatter';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { Voice } from './voice';\nexport class NoteSubGroup extends Modifier {\n    static get CATEGORY() {\n        return Category.NoteSubGroup;\n    }\n    // Arrange groups inside a `ModifierContext`\n    static format(groups, state) {\n        if (!groups || groups.length === 0)\n            return false;\n        let width = 0;\n        for (let i = 0; i < groups.length; ++i) {\n            const group = groups[i];\n            group.preFormat();\n            width += group.getWidth();\n        }\n        state.leftShift += width;\n        return true;\n    }\n    constructor(subNotes) {\n        super();\n        this.preFormatted = false;\n        this.position = Modifier.Position.LEFT;\n        this.subNotes = subNotes;\n        this.subNotes.forEach((subNote) => {\n            subNote.setIgnoreTicks(false);\n        });\n        this.width = 0;\n        this.formatter = new Formatter();\n        this.voice = new Voice({\n            numBeats: 4,\n            beatValue: 4,\n            resolution: Tables.RESOLUTION,\n        }).setStrict(false);\n        this.voice.addTickables(this.subNotes);\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        this.formatter.joinVoices([this.voice]).format([this.voice], 0);\n        this.setWidth(this.formatter.getMinTotalWidth());\n        this.preFormatted = true;\n    }\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    getWidth() {\n        return this.width;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        this.alignSubNotesWithNote(this.subNotes, note); // Modifier function\n        this.subNotes.forEach((subNote) => subNote.setContext(ctx).drawWithStyle());\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n// MIT License\nimport { getBottomY, getInitialOffset, getTopY } from './articulation';\nimport { Element } from './element';\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Ornament.DEBUG)\n        log('VexFlow.Ornament', args);\n}\n/**\n * Ornament implements ornaments as modifiers that can be\n * attached to notes. The complete list of ornaments is available in\n * `tables.ts` under `VexFlow.ornamentCodes`.\n *\n * See `tests/ornament_tests.ts` for usage examples.\n */\nexport class Ornament extends Modifier {\n    /** Ornaments category string. */\n    static get CATEGORY() {\n        return Category.Ornament;\n    }\n    static get minPadding() {\n        return Metrics.get('NoteHead.minPadding');\n    }\n    /** Arrange ornaments inside `ModifierContext` */\n    static format(ornaments, state) {\n        var _a, _b;\n        if (!ornaments || ornaments.length === 0)\n            return false;\n        let width = 0; // width is used by ornaments, which are always centered on the note head\n        let rightShift = state.rightShift; // jazz ornaments calculate r/l shift separately\n        let leftShift = state.leftShift;\n        for (let i = 0; i < ornaments.length; ++i) {\n            const ornament = ornaments[i];\n            const increment = 2;\n            if (ornament.position === ModifierPosition.RIGHT) {\n                ornament.xShift += rightShift + 2;\n                rightShift += ornament.width + Ornament.minPadding;\n            }\n            else if (ornament.position === ModifierPosition.LEFT) {\n                ornament.xShift -= leftShift + ornament.width + 2;\n                leftShift += ornament.width + Ornament.minPadding;\n            }\n            else if (ornament.position === ModifierPosition.ABOVE) {\n                width = Math.max(ornament.getWidth(), width);\n                const note = ornament.getNote();\n                let curTop = note.getLineNumber(true) + state.topTextLine;\n                const stem = note.getStem();\n                if (stem && note.getStemDirection() === Stem.UP) {\n                    curTop += Math.abs(stem.getHeight()) / Tables.STAVE_LINE_DISTANCE;\n                }\n                const numLines = (_b = (_a = note.getStave()) === null || _a === void 0 ? void 0 : _a.getNumLines()) !== null && _b !== void 0 ? _b : 0;\n                // make sure that the ornaments stay above the staff\n                if (curTop < numLines)\n                    state.topTextLine += numLines - curTop;\n                ornament.setTextLine(state.topTextLine);\n                state.topTextLine += increment;\n            }\n            else {\n                width = Math.max(ornament.getWidth(), width);\n                ornament.setTextLine(state.textLine);\n                state.textLine += increment;\n            }\n        }\n        // Note: 'legit' ornaments don't consider other modifiers when calculating their\n        // X position, but jazz ornaments sometimes need to.\n        state.leftShift = leftShift + width / 2;\n        state.rightShift = rightShift + width / 2;\n        return true;\n    }\n    /**\n     * ornamentNoteTransition means the jazz ornament represents an effect from one note to another,\n     * these are generally on the top of the staff.\n     */\n    static get ornamentNoteTransition() {\n        return ['flip', 'jazzTurn', 'smear'];\n    }\n    /**\n     * ornamentAttack indicates something that happens in the attach, placed before the note and\n     * any accidentals\n     */\n    static get ornamentAttack() {\n        return ['scoop'];\n    }\n    /**\n     * The ornament is aligned based on the note head, but without regard to whether the\n     * stem goes up or down.\n     */\n    static get ornamentAlignWithNoteHead() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'scoop'];\n    }\n    /**\n     * An ornament that happens on the release of the note, generally placed after the\n     * note and overlapping the next beat/measure..\n     */\n    static get ornamentRelease() {\n        return ['doit', 'fall', 'fallLong', 'doitLong', 'jazzTurn', 'smear', 'flip'];\n    }\n    static get ornamentLeft() {\n        return ['scoop'];\n    }\n    static get ornamentRight() {\n        return ['doit', 'fall', 'fallLong', 'doitLong'];\n    }\n    static get ornamentYShift() {\n        return ['fallLong'];\n    }\n    /** ornamentArticulation goes above/below the note based on space availablity */\n    static get ornamentArticulation() {\n        return ['bend', 'plungerClosed', 'plungerOpen'];\n    }\n    /**\n     * Create a new ornament of type `type`, which is an entry in\n     * `VexFlow.ornamentCodes` in `tables.ts`.\n     */\n    constructor(type) {\n        super();\n        // Default position ABOVE\n        this.position = ModifierPosition.ABOVE;\n        if (Ornament.ornamentRight.indexOf(type) >= 0) {\n            this.position = ModifierPosition.RIGHT;\n        }\n        if (Ornament.ornamentLeft.indexOf(type) >= 0) {\n            this.position = ModifierPosition.LEFT;\n        }\n        this.type = type;\n        this.delayed = false;\n        this.renderOptions = {\n            accidentalLowerPadding: 3,\n            accidentalUpperPadding: 3,\n        };\n        // some jazz ornaments are above or below depending on stem direction.\n        this.adjustForStemDirection = false;\n        this.ornamentAlignWithNoteHead = Ornament.ornamentAlignWithNoteHead.indexOf(this.type) >= 0;\n        // Is this a jazz ornament that goes between this note and the next note.\n        if (Ornament.ornamentNoteTransition.indexOf(this.type) >= 0) {\n            this.delayed = true;\n        }\n        this.text = Tables.ornamentCodes(this.type);\n    }\n    /** Set note attached to ornament. */\n    setNote(note) {\n        super.setNote(note);\n        // articulations above/below the line can be stacked.\n        if (Ornament.ornamentArticulation.indexOf(this.type) >= 0) {\n            // Unfortunately we don't know the stem direction.  So we base it\n            // on the line number, but also allow it to be overridden.\n            if (note.getLineNumber() >= 3) {\n                this.position = Modifier.Position.ABOVE;\n            }\n            else {\n                this.position = Modifier.Position.BELOW;\n            }\n        }\n        return this;\n    }\n    /** Set whether the ornament is to be delayed. */\n    setDelayed(delayed) {\n        this.delayed = delayed;\n        return this;\n    }\n    /** Set the upper accidental for the ornament. */\n    setUpperAccidental(accid) {\n        this.accidentalUpper = new Element();\n        this.accidentalUpper.setText(Tables.accidentalCodes(accid));\n        return this;\n    }\n    /** Set the lower accidental for the ornament. */\n    setLowerAccidental(accid) {\n        this.accidentalLower = new Element();\n        this.accidentalLower.setText(Tables.accidentalCodes(accid));\n        return this;\n    }\n    /** Render ornament in position next to note. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stave = note.checkStave();\n        ctx.openGroup('ornament', this.getAttribute('id'));\n        // Get initial coordinates for the modifier position\n        const start = note.getModifierStartXY(this.position, this.index);\n        let glyphX = start.x;\n        const staffSpace = stave.getSpacingBetweenLines();\n        const initialOffset = getInitialOffset(note, this.position);\n        // If the ornament is aligned with the note head, don't consider the stave y\n        // but use the 'natural' modifier y\n        let glyphY = this.ornamentAlignWithNoteHead ? start.y : 0;\n        if (this.position === ModifierPosition.ABOVE) {\n            glyphY = getTopY(note, this.textLine) - (this.textLine + initialOffset) * staffSpace;\n        }\n        if (this.position === ModifierPosition.BELOW) {\n            glyphY = getBottomY(note, this.textLine) + (this.textLine + initialOffset + 1.5) * staffSpace;\n        }\n        // Ajdust x position if ornament is delayed\n        if (this.delayed) {\n            let delayXShift = 0;\n            const startX = note.getTickContext().getX();\n            if (this.delayXShift !== undefined) {\n                delayXShift = this.delayXShift;\n            }\n            else {\n                const tickables = note.getVoice().getTickables();\n                const index = tickables.indexOf(note);\n                const nextContext = index + 1 < tickables.length ? tickables[index + 1].checkTickContext() : undefined;\n                if (nextContext) {\n                    delayXShift += (nextContext.getX() - startX) * 0.5;\n                }\n                else {\n                    delayXShift += (stave.getX() + stave.getWidth() - glyphX) * 0.5;\n                }\n                this.delayXShift = delayXShift;\n            }\n            glyphX += delayXShift;\n        }\n        L('Rendering ornament: ', this.text.charCodeAt(0), glyphX, glyphY);\n        if (this.accidentalLower) {\n            this.accidentalLower.renderText(ctx, glyphX + this.xShift - this.accidentalLower.getWidth() * 0.5, glyphY + this.yShift - this.accidentalLower.getTextMetrics().actualBoundingBoxDescent);\n            glyphY -= this.accidentalLower.getHeight() + this.renderOptions.accidentalLowerPadding;\n        }\n        // ornament requires yShift\n        if (Ornament.ornamentYShift.indexOf(this.type) >= 0) {\n            this.yShift += this.getHeight();\n        }\n        this.x =\n            glyphX -\n                (this.position === ModifierPosition.ABOVE || this.position === ModifierPosition.BELOW ? this.width * 0.5 : 0);\n        this.y = glyphY;\n        this.renderText(ctx, 0, 0);\n        if (this.accidentalUpper) {\n            glyphY -= this.getHeight() + this.renderOptions.accidentalUpperPadding;\n            this.accidentalUpper.renderText(ctx, glyphX + this.xShift - this.accidentalUpper.getWidth() * 0.5, glyphY + this.yShift - this.accidentalUpper.getTextMetrics().actualBoundingBoxDescent);\n        }\n        ctx.closeGroup();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.Ornament.DEBUG` to `true`. */\nOrnament.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Rodrigo Vilar\n// MIT License\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Category } from './typeguard';\n/** Parenthesis implements parenthesis modifiers for notes. */\nexport class Parenthesis extends Modifier {\n    static get CATEGORY() {\n        return Category.Parenthesis;\n    }\n    /** Add parentheses to the notes. */\n    static buildAndAttach(notes) {\n        for (const note of notes) {\n            for (let i = 0; i < note.keys.length; i++) {\n                note.addModifier(new Parenthesis(ModifierPosition.LEFT), i);\n                note.addModifier(new Parenthesis(ModifierPosition.RIGHT), i);\n            }\n        }\n    }\n    /** Arrange parentheses inside a ModifierContext. */\n    static format(parentheses, state) {\n        if (!parentheses || parentheses.length === 0)\n            return false;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        for (let i = 0; i < parentheses.length; ++i) {\n            const parenthesis = parentheses[i];\n            const note = parenthesis.getNote();\n            const pos = parenthesis.getPosition();\n            const index = parenthesis.checkIndex();\n            let shift = 0;\n            if (pos === ModifierPosition.RIGHT) {\n                shift = note.getRightParenthesisPx(index);\n                xWidthR = xWidthR > shift + parenthesis.width ? xWidthR : shift + parenthesis.width;\n            }\n            if (pos === ModifierPosition.LEFT) {\n                shift = note.getLeftParenthesisPx(index) + parenthesis.width;\n                xWidthL = xWidthL > shift + parenthesis.width ? xWidthL : shift + parenthesis.width;\n            }\n            parenthesis.setXShift(shift);\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    /**\n     * Constructor\n     *\n     * @param position Modifier.Position.LEFT (default) or Modifier.Position.RIGHT\n     */\n    constructor(position) {\n        super();\n        this.position = position !== null && position !== void 0 ? position : Modifier.Position.LEFT;\n        if (this.position === Modifier.Position.RIGHT) {\n            this.text = '\\uE0F6'; /*noteheadParenthesisRight*/\n        }\n        else if (this.position === Modifier.Position.LEFT) {\n            this.text = '\\uE0F5'; /*noteheadParenthesisLeft*/\n        }\n    }\n    /** Set the associated note. */\n    setNote(note) {\n        this.note = note;\n        this.setFont(note.getFont());\n        return this;\n    }\n    /** Render the parenthesis. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index, { forceFlagRight: true });\n        this.renderText(ctx, start.x, start.y);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Ron B. Yeh\n// MIT License\n//\n// Utilities for working with Web APIs.\n// See: https://developer.mozilla.org/en-US/docs/Web/API\nimport { globalObject } from './util';\n// eslint-disable-next-line\nexport function isHTMLCanvas(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLCanvasElement class,\n    (typeof global.HTMLCanvasElement === 'function' && element instanceof global.HTMLCanvasElement) ||\n        // OR it's pretending to be a <canvas> element. Good enough!\n        // Do not rely on .tagName, because node-canvas doesn't provide a tagName.\n        (typeof element.getContext === 'function' && typeof element.toDataURL === 'function'));\n}\n// eslint-disable-next-line\nexport function isHTMLDiv(element) {\n    if (!element)\n        return false;\n    const global = globalObject();\n    return (\n    // It's either an instance of the HTMLDivElement class.\n    (typeof global.HTMLDivElement === 'function' && element instanceof global.HTMLDivElement) ||\n        // OR it's pretending to be a <div>. See: svgcontext.ts.\n        (typeof element.appendChild === 'function' && typeof element.style === 'object'));\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Font } from './font';\nimport { RenderContext } from './rendercontext';\nimport { globalObject, warn } from './util';\nimport { isHTMLCanvas } from './web';\n/**\n * A rendering context for the Canvas backend. This class serves as a proxy for the\n * underlying CanvasRenderingContext2D object, part of the browser's API.\n */\nexport class CanvasContext extends RenderContext {\n    static get WIDTH() {\n        return 600;\n    }\n    static get HEIGHT() {\n        return 400;\n    }\n    static get CANVAS_BROWSER_SIZE_LIMIT() {\n        return 32767; // Chrome/Firefox. Could be determined more precisely by npm module canvas-size.\n    }\n    /**\n     * Ensure that width and height do not exceed the browser limit.\n     * @returns array of [width, height] clamped to the browser limit.\n     */\n    static sanitizeCanvasDims(width, height) {\n        const limit = this.CANVAS_BROWSER_SIZE_LIMIT;\n        if (Math.max(width, height) > limit) {\n            warn('Canvas dimensions exceed browser limit. Cropping to ' + limit);\n            if (width > limit) {\n                width = limit;\n            }\n            if (height > limit) {\n                height = limit;\n            }\n        }\n        return [width, height];\n    }\n    constructor(context) {\n        super();\n        /** Height of one line of text (in pixels). */\n        this.textHeight = 0;\n        this.context2D = context;\n        this.curTransfrom = context.getTransform();\n        if (!context.canvas) {\n            this.canvas = {\n                width: CanvasContext.WIDTH,\n                height: CanvasContext.HEIGHT,\n            };\n        }\n        else {\n            this.canvas = context.canvas;\n        }\n    }\n    /**\n     * Set all pixels to transparent black rgba(0,0,0,0).\n     */\n    clear() {\n        this.context2D.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    // eslint-disable-next-line\n    openGroup(cls, id) {\n        // Containers not implemented.\n    }\n    closeGroup() {\n        // Containers not implemented.\n    }\n    openRotation(angleDegrees, x, y) {\n        this.curTransfrom = this.context2D.getTransform();\n        this.context2D.translate(x, y);\n        this.context2D.rotate((angleDegrees * Math.PI) / 180);\n        this.context2D.translate(-x, -y);\n    }\n    closeRotation() {\n        this.context2D.setTransform(this.curTransfrom);\n    }\n    // eslint-disable-next-line\n    add(child) {\n        // Containers not implemented.\n    }\n    setFillStyle(style) {\n        this.context2D.fillStyle = style;\n        return this;\n    }\n    /** CanvasContext ignores `setBackgroundFillStyle()`. */\n    // eslint-disable-next-line\n    setBackgroundFillStyle(style) {\n        // DO NOTHING\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.context2D.strokeStyle = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.context2D.shadowColor = color;\n        return this;\n    }\n    setShadowBlur(blur) {\n        // CanvasRenderingContext2D does not scale the shadow blur by the current\n        // transform, so we have to do it manually. We assume uniform scaling\n        // (though allow for rotation) because the blur can only be scaled\n        // uniformly anyway.\n        const t = this.context2D.getTransform();\n        const scale = Math.sqrt(t.a * t.a + t.b * t.b + t.c * t.c + t.d * t.d);\n        this.context2D.shadowBlur = scale * blur;\n        return this;\n    }\n    setLineWidth(width) {\n        this.context2D.lineWidth = width;\n        return this;\n    }\n    setLineCap(capType) {\n        this.context2D.lineCap = capType;\n        return this;\n    }\n    setLineDash(dash) {\n        this.context2D.setLineDash(dash);\n        return this;\n    }\n    scale(x, y) {\n        this.context2D.scale(x, y);\n        return this;\n    }\n    resize(width, height, devicePixelRatio) {\n        var _a;\n        const canvas = this.context2D.canvas;\n        const dpr = (_a = devicePixelRatio !== null && devicePixelRatio !== void 0 ? devicePixelRatio : globalObject().devicePixelRatio) !== null && _a !== void 0 ? _a : 1;\n        // Scale the canvas size by the device pixel ratio clamping to the maximum supported size.\n        [width, height] = CanvasContext.sanitizeCanvasDims(width * dpr, height * dpr);\n        // Divide back down by the pixel ratio and convert to integers.\n        width = (width / dpr) | 0;\n        height = (height / dpr) | 0;\n        canvas.width = width * dpr;\n        canvas.height = height * dpr;\n        // The canvas could be an instance of either HTMLCanvasElement or an OffscreenCanvas.\n        // Only HTMLCanvasElement has a style attribute.\n        if (isHTMLCanvas(canvas)) {\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n        }\n        return this.scale(dpr, dpr);\n    }\n    rect(x, y, width, height) {\n        this.context2D.rect(x, y, width, height);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        this.context2D.fillRect(x, y, width, height);\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    pointerRect(x, y, width, height) {\n        return this;\n    }\n    /**\n     * Set the pixels in a rectangular area to transparent black rgba(0,0,0,0).\n     */\n    clearRect(x, y, width, height) {\n        this.context2D.clearRect(x, y, width, height);\n        return this;\n    }\n    beginPath() {\n        this.context2D.beginPath();\n        return this;\n    }\n    moveTo(x, y) {\n        this.context2D.moveTo(x, y);\n        return this;\n    }\n    lineTo(x, y) {\n        this.context2D.lineTo(x, y);\n        return this;\n    }\n    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.context2D.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n        return this;\n    }\n    quadraticCurveTo(cpx, cpy, x, y) {\n        this.context2D.quadraticCurveTo(cpx, cpy, x, y);\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        this.context2D.arc(x, y, radius, startAngle, endAngle, counterclockwise);\n        return this;\n    }\n    fill() {\n        this.context2D.fill();\n        return this;\n    }\n    stroke() {\n        this.context2D.stroke();\n        return this;\n    }\n    closePath() {\n        this.context2D.closePath();\n        return this;\n    }\n    measureText(text) {\n        const metrics = this.context2D.measureText(text);\n        let y = 0;\n        let height = 0;\n        if (metrics.fontBoundingBoxAscent) {\n            y = -metrics.fontBoundingBoxAscent;\n            height = metrics.fontBoundingBoxDescent + metrics.fontBoundingBoxAscent;\n        }\n        else {\n            y = -metrics.actualBoundingBoxAscent;\n            height = metrics.actualBoundingBoxDescent + metrics.actualBoundingBoxAscent;\n        }\n        // Return x, y, width & height in the same manner as svg getBBox\n        return {\n            x: 0,\n            y: y,\n            width: metrics.width,\n            height: height,\n        };\n    }\n    fillText(text, x, y) {\n        this.context2D.fillText(text, x, y);\n        return this;\n    }\n    save() {\n        this.context2D.save();\n        return this;\n    }\n    restore() {\n        this.context2D.restore();\n        return this;\n    }\n    set fillStyle(style) {\n        this.context2D.fillStyle = style;\n    }\n    get fillStyle() {\n        return this.context2D.fillStyle;\n    }\n    set strokeStyle(style) {\n        this.context2D.strokeStyle = style;\n    }\n    get strokeStyle() {\n        return this.context2D.strokeStyle;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900).\n     * @param style is a string (e.g., 'italic', 'normal').\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.context2D.font = Font.toCSSString(fontInfo);\n        this.textHeight = Font.convertSizeToPixelValue(fontInfo.size);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.context2D.font;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Gregory Ristow (2015)\nimport { Element } from './element';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Metrics } from './metrics';\nimport { RenderContext } from './rendercontext';\nimport { Tables } from './tables';\nimport { normalizeAngle, prefix, RuntimeError } from './util';\n/** For a particular element type (e.g., rect), we will not apply certain presentation attributes. */\nconst ATTRIBUTES_TO_IGNORE = {\n    path: {\n        x: true,\n        y: true,\n        width: true,\n        height: true,\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    rect: {\n        'font-family': true,\n        'font-weight': true,\n        'font-style': true,\n        'font-size': true,\n    },\n    text: {\n        width: true,\n        height: true,\n    },\n};\n/** Create the SVG in the SVG namespace. */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst TWO_PI = 2 * Math.PI;\n/**\n * SVG rendering context with an API similar to CanvasRenderingContext2D.\n */\nexport class SVGContext extends RenderContext {\n    constructor(element) {\n        super();\n        this.width = 0;\n        this.height = 0;\n        this.precision = 1;\n        this.backgroundFillStyle = 'white';\n        /** Formatted as CSS font shorthand (e.g., 'italic bold 12pt Arial') */\n        this.fontCSSString = '';\n        this.element = element;\n        this.precision = Math.pow(10, Tables.RENDER_PRECISION_PLACES);\n        // Create an SVG element and add it to the container element.\n        const svg = this.create('svg');\n        svg.setAttribute('pointer-events', 'none');\n        this.element.appendChild(svg);\n        this.svg = svg;\n        this.parent = this.svg;\n        this.groups = [this.svg];\n        this.path = '';\n        this.pen = { x: NaN, y: NaN };\n        const defaultFontAttributes = {\n            'font-family': Metrics.get('fontFamily'),\n            'font-size': '10pt',\n            'font-weight': FontWeight.NORMAL,\n            'font-style': FontStyle.NORMAL,\n        };\n        this.state = Object.assign({ scaleX: 1, scaleY: 1 }, defaultFontAttributes);\n        this.attributes = Object.assign({ 'stroke-width': 1.0, 'stroke-dasharray': 'none', fill: 'black', stroke: 'black', shadowBlur: 0, shadowColor: 'black' }, defaultFontAttributes);\n        this.groupAttributes = [];\n        this.applyAttributes(svg, this.attributes);\n        this.groupAttributes.push(Object.assign({}, this.attributes));\n        this.stateStack = [];\n    }\n    round(n) {\n        return Math.round(n * this.precision) / this.precision;\n    }\n    create(svgElementType) {\n        return document.createElementNS(SVG_NS, svgElementType);\n    }\n    // Allow grouping elements in containers for interactivity.\n    openGroup(cls, id) {\n        const group = this.create('g');\n        this.groups.push(group);\n        this.parent.appendChild(group);\n        this.parent = group;\n        if (cls)\n            group.setAttribute('class', prefix(cls));\n        if (id)\n            group.setAttribute('id', prefix(id));\n        this.applyAttributes(group, this.attributes);\n        this.groupAttributes.push(Object.assign(Object.assign({}, this.groupAttributes[this.groupAttributes.length - 1]), this.attributes));\n        return group;\n    }\n    closeGroup() {\n        this.groups.pop();\n        this.groupAttributes.pop();\n        this.parent = this.groups[this.groups.length - 1];\n    }\n    openRotation(angleDegrees, x, y) {\n        this.openGroup().setAttribute('transform', `translate(${x},${y}) rotate(${angleDegrees}) translate(-${x},-${y})`);\n    }\n    closeRotation() {\n        this.closeGroup();\n    }\n    add(elem) {\n        this.parent.appendChild(elem);\n    }\n    setFillStyle(style) {\n        this.attributes.fill = style;\n        return this;\n    }\n    /**\n     * Used to set the fill color for `clearRect()`. This allows us to simulate\n     * cutting a \"hole\" into the SVG drawing.\n     */\n    setBackgroundFillStyle(style) {\n        this.backgroundFillStyle = style;\n        return this;\n    }\n    setStrokeStyle(style) {\n        this.attributes.stroke = style;\n        return this;\n    }\n    setShadowColor(color) {\n        this.attributes.shadowColor = color;\n        return this;\n    }\n    /**\n     * @param blur A non-negative float specifying the level of shadow blur, where 0\n     *             represents no blur and larger numbers represent increasingly more blur.\n     * @returns this\n     */\n    setShadowBlur(blur) {\n        this.attributes.shadowBlur = blur;\n        return this;\n    }\n    /**\n     * @param width\n     * @returns this\n     */\n    setLineWidth(width) {\n        this.attributes['stroke-width'] = width;\n        return this;\n    }\n    /**\n     * @param lineDash an array of integers in the form of [dash, space, dash, space, etc...]\n     * @returns this\n     *\n     * See: [SVG `stroke-dasharray` attribute](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray)\n     */\n    setLineDash(lineDash) {\n        if (Object.prototype.toString.call(lineDash) === '[object Array]') {\n            this.attributes['stroke-dasharray'] = lineDash.join(',');\n            return this;\n        }\n        else {\n            throw new RuntimeError('ArgumentError', 'lineDash must be an array of integers.');\n        }\n    }\n    /**\n     * @param capType\n     * @returns this\n     */\n    setLineCap(capType) {\n        this.attributes['stroke-linecap'] = capType;\n        return this;\n    }\n    // ### Sizing & Scaling Methods:\n    // TODO (GCR): See note at scale() -- separate our internal\n    // conception of pixel-based width/height from the style.width\n    // and style.height properties eventually to allow users to\n    // apply responsive sizing attributes to the SVG.\n    resize(width, height) {\n        this.width = width;\n        this.height = height;\n        this.element.style.width = width.toString();\n        this.svg.style.width = width.toString();\n        this.svg.style.height = height.toString();\n        const attributes = {\n            width,\n            height,\n        };\n        this.applyAttributes(this.svg, attributes);\n        this.scale(this.state.scaleX, this.state.scaleY);\n        return this;\n    }\n    scale(x, y) {\n        // uses viewBox to scale\n        // TODO (GCR): we may at some point want to distinguish the\n        // style.width / style.height properties that are applied to\n        // the SVG object from our internal conception of the SVG\n        // width/height.  This would allow us to create automatically\n        // scaling SVGs that filled their containers, for instance.\n        //\n        // As this isn't implemented in Canvas contexts,\n        // I've left as is for now, but in using the viewBox to\n        // handle internal scaling, am trying to make it possible\n        // for us to eventually move in that direction.\n        this.state.scaleX = this.state.scaleX ? this.state.scaleX * x : x;\n        this.state.scaleY = this.state.scaleY ? this.state.scaleY * y : y;\n        const visibleWidth = this.width / this.state.scaleX;\n        const visibleHeight = this.height / this.state.scaleY;\n        this.setViewBox(0, 0, visibleWidth, visibleHeight);\n        return this;\n    }\n    /**\n     * 1 arg: string in the \"x y w h\" format\n     * 4 args: x:number, y:number, w:number, h:number\n     */\n    setViewBox(viewBoxOrMinX, minY, width, height) {\n        if (typeof viewBoxOrMinX === 'string') {\n            this.svg.setAttribute('viewBox', viewBoxOrMinX);\n        }\n        else {\n            const viewBoxString = viewBoxOrMinX + ' ' + minY + ' ' + width + ' ' + height;\n            this.svg.setAttribute('viewBox', viewBoxString);\n        }\n    }\n    // ### Drawing helper methods:\n    applyAttributes(element, attributes) {\n        const attrNamesToIgnore = ATTRIBUTES_TO_IGNORE[element.nodeName];\n        for (const attrName in attributes) {\n            if (attrNamesToIgnore && attrNamesToIgnore[attrName]) {\n                continue;\n            }\n            if (attributes[attrName] &&\n                (this.groupAttributes.length === 0 ||\n                    attributes[attrName] != this.groupAttributes[this.groupAttributes.length - 1][attrName]))\n                element.setAttributeNS(null, attrName, attributes[attrName]);\n        }\n        return element;\n    }\n    // ### Shape & Path Methods:\n    clear() {\n        // Clear the SVG by removing all inner children.\n        // (This approach is usually slightly more efficient\n        // than removing the old SVG & adding a new one to\n        // the container element, since it does not cause the\n        // container to resize twice.  Also, the resize\n        // triggered by removing the entire SVG can trigger\n        // a touchcancel event when the element resizes away\n        // from a touch point.)\n        while (this.svg.lastChild) {\n            this.svg.removeChild(this.svg.lastChild);\n        }\n    }\n    // ## Rectangles:\n    rect(x, y, width, height, attributes) {\n        // Avoid invalid negative height attributes by flipping the rectangle on its head:\n        if (height < 0) {\n            y += height;\n            height *= -1;\n        }\n        const rectangle = this.create('rect');\n        attributes = attributes !== null && attributes !== void 0 ? attributes : { fill: 'none', 'stroke-width': this.attributes['stroke-width'], stroke: 'black' };\n        x = this.round(x);\n        y = this.round(y);\n        width = this.round(width);\n        height = this.round(height);\n        this.applyAttributes(rectangle, Object.assign({ x, y, width, height }, attributes));\n        this.add(rectangle);\n        return this;\n    }\n    fillRect(x, y, width, height) {\n        const attributes = { fill: this.attributes.fill, stroke: 'none' };\n        this.rect(x, y, width, height, attributes);\n        return this;\n    }\n    pointerRect(x, y, width, height) {\n        const attributes = { opacity: '0', 'pointer-events': 'auto' };\n        this.rect(x, y, width, height, attributes);\n        return this;\n    }\n    clearRect(x, y, width, height) {\n        // Currently this fills a rect with the backgroundFillStyle, rather\n        // than \"cut a hole\" into the existing shapes.\n        //\n        // Since tabNote seems to be the only module that makes use of this\n        // it may be worth creating a separate tabStave that would\n        // draw lines around locations of tablature fingering.\n        this.rect(x, y, width, height, { fill: this.backgroundFillStyle, stroke: 'none' });\n        return this;\n    }\n    // ## Paths:\n    beginPath() {\n        this.path = '';\n        this.pen.x = NaN;\n        this.pen.y = NaN;\n        return this;\n    }\n    moveTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'M' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    lineTo(x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        this.path += 'L' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    bezierCurveTo(x1, y1, x2, y2, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        x2 = this.round(x2);\n        y2 = this.round(y2);\n        this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    quadraticCurveTo(x1, y1, x, y) {\n        x = this.round(x);\n        y = this.round(y);\n        x1 = this.round(x1);\n        y1 = this.round(y1);\n        this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;\n        this.pen.x = x;\n        this.pen.y = y;\n        return this;\n    }\n    arc(x, y, radius, startAngle, endAngle, counterclockwise) {\n        let x0 = x + radius * Math.cos(startAngle);\n        let y0 = y + radius * Math.sin(startAngle);\n        x0 = this.round(x0);\n        y0 = this.round(y0);\n        // svg behavior different from canvas.  Don't normalize angles if\n        // we are drawing a circle because they both normalize to 0\n        const tmpStartTest = normalizeAngle(startAngle);\n        const tmpEndTest = normalizeAngle(endAngle);\n        if ((!counterclockwise && endAngle - startAngle >= TWO_PI) ||\n            (counterclockwise && startAngle - endAngle >= TWO_PI) ||\n            tmpStartTest === tmpEndTest) {\n            let x1 = x + radius * Math.cos(startAngle + Math.PI);\n            let y1 = y + radius * Math.sin(startAngle + Math.PI);\n            // There's no way to specify a completely circular arc in SVG so we have to\n            // use two semi-circular arcs.\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 0 0 ${x1} ${y1} `;\n            this.path += `A${radius} ${radius} 0 0 0 ${x0} ${y0}`;\n            this.pen.x = x0;\n            this.pen.y = y0;\n        }\n        else {\n            let x1 = x + radius * Math.cos(endAngle);\n            let y1 = y + radius * Math.sin(endAngle);\n            startAngle = tmpStartTest;\n            endAngle = tmpEndTest;\n            let large;\n            if (Math.abs(endAngle - startAngle) < Math.PI) {\n                large = counterclockwise;\n            }\n            else {\n                large = !counterclockwise;\n            }\n            if (startAngle > endAngle) {\n                large = !large;\n            }\n            const sweep = !counterclockwise;\n            x1 = this.round(x1);\n            y1 = this.round(y1);\n            radius = this.round(radius);\n            this.path += `M${x0} ${y0} A${radius} ${radius} 0 ${+large} ${+sweep} ${x1} ${y1}`;\n            this.pen.x = x1;\n            this.pen.y = y1;\n        }\n        return this;\n    }\n    closePath() {\n        this.path += 'Z';\n        return this;\n    }\n    getShadowStyle() {\n        // A CSS drop-shadow filter blur looks different than a canvas shadowBlur\n        // of the same radius, so we scale the drop-shadow radius here to make it\n        // look close to the canvas shadow.\n        return `filter: drop-shadow(0 0 ${this.attributes.shadowBlur / 1.5}px ${this.attributes.shadowColor})`;\n    }\n    fill(attributes) {\n        const path = this.create('path');\n        if (typeof attributes === 'undefined') {\n            attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none' });\n        }\n        attributes.d = this.path;\n        if (this.attributes.shadowBlur > 0) {\n            attributes.style = this.getShadowStyle();\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    stroke() {\n        const path = this.create('path');\n        const attributes = Object.assign(Object.assign({}, this.attributes), { fill: 'none', d: this.path });\n        if (this.attributes.shadowBlur > 0) {\n            attributes.style = this.getShadowStyle();\n        }\n        this.applyAttributes(path, attributes);\n        this.add(path);\n        return this;\n    }\n    // ## Text Methods:\n    measureText(text) {\n        SVGContext.measureTextElement.setText(text);\n        SVGContext.measureTextElement.setFont(this.attributes['font-family'], this.attributes['font-size'], this.attributes['font-weight'], this.attributes['font-style']);\n        const bb = SVGContext.measureTextElement.getBoundingBox();\n        return { x: bb.x, y: bb.y, width: bb.w, height: bb.h };\n    }\n    fillText(text, x, y) {\n        if (!text || text.length <= 0) {\n            return this;\n        }\n        x = this.round(x);\n        y = this.round(y);\n        const attributes = Object.assign(Object.assign({}, this.attributes), { stroke: 'none', x,\n            y });\n        const txt = this.create('text');\n        txt.textContent = text;\n        this.applyAttributes(txt, attributes);\n        this.add(txt);\n        return this;\n    }\n    save() {\n        this.stateStack.push({\n            state: structuredClone(this.state),\n            attributes: structuredClone(this.attributes),\n        });\n        return this;\n    }\n    restore() {\n        const savedState = this.stateStack.pop();\n        if (savedState) {\n            const state = savedState;\n            this.state = structuredClone(state.state);\n            this.attributes = structuredClone(state.attributes);\n        }\n        return this;\n    }\n    set fillStyle(style) {\n        this.setFillStyle(style);\n    }\n    get fillStyle() {\n        return this.attributes.fill;\n    }\n    set strokeStyle(style) {\n        this.setStrokeStyle(style);\n    }\n    get strokeStyle() {\n        return this.attributes.stroke;\n    }\n    /**\n     * @param f is 1) a `FontInfo` object or\n     *             2) a string formatted as CSS font shorthand (e.g., 'bold 10pt Arial') or\n     *             3) a string representing the font family (one of `size`, `weight`, or `style` must also be provided).\n     * @param size a string specifying the font size and unit (e.g., '16pt'), or a number (the unit is assumed to be 'pt').\n     * @param weight is a string (e.g., 'bold', 'normal') or a number (100, 200, ... 900). It is inserted\n     *               into the font-weight attribute (e.g., font-weight=\"bold\")\n     * @param style is a string (e.g., 'italic', 'normal') that is inserted into the\n     *              font-style attribute (e.g., font-style=\"italic\")\n     */\n    setFont(f, size, weight, style) {\n        const fontInfo = Font.validate(f, size, weight, style);\n        this.fontCSSString = Font.toCSSString(fontInfo);\n        const fontAttributes = {\n            'font-family': fontInfo.family,\n            'font-size': fontInfo.size,\n            'font-weight': fontInfo.weight,\n            'font-style': fontInfo.style,\n        };\n        this.attributes = Object.assign(Object.assign({}, this.attributes), fontAttributes);\n        this.state = Object.assign(Object.assign({}, this.state), fontAttributes);\n        return this;\n    }\n    /** Return a string of the form `'italic bold 15pt Arial'` */\n    getFont() {\n        return this.fontCSSString;\n    }\n}\nSVGContext.measureTextElement = new Element();\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { CanvasContext } from './canvascontext';\nimport { SVGContext } from './svgcontext';\nimport { isRenderContext } from './typeguard';\nimport { RuntimeError } from './util';\nimport { isHTMLCanvas, isHTMLDiv } from './web';\nexport var RendererBackends;\n(function (RendererBackends) {\n    RendererBackends[RendererBackends[\"CANVAS\"] = 1] = \"CANVAS\";\n    RendererBackends[RendererBackends[\"SVG\"] = 2] = \"SVG\";\n})(RendererBackends || (RendererBackends = {}));\n// End of line types\nexport var RendererLineEndType;\n(function (RendererLineEndType) {\n    RendererLineEndType[RendererLineEndType[\"NONE\"] = 1] = \"NONE\";\n    RendererLineEndType[RendererLineEndType[\"UP\"] = 2] = \"UP\";\n    RendererLineEndType[RendererLineEndType[\"DOWN\"] = 3] = \"DOWN\";\n})(RendererLineEndType || (RendererLineEndType = {}));\n/**\n * Support Canvas & SVG rendering contexts.\n */\nexport class Renderer {\n    static buildContext(elementId, backend, width, height, background = '#FFF') {\n        const renderer = new Renderer(elementId, backend);\n        if (width && height) {\n            renderer.resize(width, height);\n        }\n        const ctx = renderer.getContext();\n        ctx.setBackgroundFillStyle(background);\n        Renderer.lastContext = ctx;\n        return ctx;\n    }\n    static getCanvasContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);\n    }\n    static getSVGContext(elementId, width, height, background) {\n        return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);\n    }\n    // Draw a dashed line (horizontal, vertical or diagonal\n    // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.\n    // setting the second number to 0 draws a solid line.\n    static drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {\n        context.beginPath();\n        const dx = toX - fromX;\n        const dy = toY - fromY;\n        const angle = Math.atan2(dy, dx);\n        let x = fromX;\n        let y = fromY;\n        context.moveTo(fromX, fromY);\n        let idx = 0;\n        let draw = true;\n        while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {\n            const dashLength = dashPattern[idx++ % dashPattern.length];\n            const nx = x + Math.cos(angle) * dashLength;\n            x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);\n            const ny = y + Math.sin(angle) * dashLength;\n            y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);\n            if (draw) {\n                context.lineTo(x, y);\n            }\n            else {\n                context.moveTo(x, y);\n            }\n            draw = !draw;\n        }\n        context.closePath();\n        context.stroke();\n    }\n    constructor(arg0, arg1) {\n        if (isRenderContext(arg0)) {\n            // The user has provided what looks like a RenderContext, let's just use it.\n            this.ctx = arg0;\n        }\n        else {\n            if (arg1 === undefined) {\n                // The backend must be specified if the render context isn't directly provided.\n                throw new RuntimeError('InvalidArgument', 'Missing backend argument');\n            }\n            const backend = arg1;\n            let element;\n            if (typeof arg0 === 'string') {\n                const maybeElement = document.getElementById(arg0);\n                if (!maybeElement) {\n                    throw new RuntimeError('BadElementId', `Can't find element with ID \"${maybeElement}\"`);\n                }\n                element = maybeElement;\n            }\n            else {\n                element = arg0;\n            }\n            // Verify backend and create context\n            if (backend === Renderer.Backends.CANVAS) {\n                if (!isHTMLCanvas(element)) {\n                    throw new RuntimeError('BadElement', 'CANVAS context requires an HTMLCanvasElement.');\n                }\n                const context = element.getContext('2d', { willReadFrequently: true });\n                if (!context) {\n                    throw new RuntimeError('BadElement', \"Can't get canvas context\");\n                }\n                this.ctx = new CanvasContext(context);\n            }\n            else if (backend === Renderer.Backends.SVG) {\n                if (!isHTMLDiv(element)) {\n                    throw new RuntimeError('BadElement', 'SVG context requires an HTMLDivElement.');\n                }\n                this.ctx = new SVGContext(element);\n            }\n            else {\n                throw new RuntimeError('InvalidBackend', `No support for backend: ${backend}`);\n            }\n        }\n    }\n    resize(width, height) {\n        this.ctx.resize(width, height);\n        return this;\n    }\n    getContext() {\n        return this.ctx;\n    }\n}\nRenderer.Backends = RendererBackends;\nRenderer.LineEndType = RendererLineEndType;\n// Used by vexflow_test_helpers.ts\n// Should this be private?\n// Can we do this in a cleaner way?\nRenderer.lastContext = undefined;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport var TextJustification;\n(function (TextJustification) {\n    TextJustification[TextJustification[\"LEFT\"] = 1] = \"LEFT\";\n    TextJustification[TextJustification[\"CENTER\"] = 2] = \"CENTER\";\n    TextJustification[TextJustification[\"RIGHT\"] = 3] = \"RIGHT\";\n})(TextJustification || (TextJustification = {}));\n/**\n * `TextNote` is a notation element that is positioned in time. Generally\n * meant for objects that sit above/below the staff and inline with each other.\n * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n * Examples of this would be such as dynamics, lyrics, chord changes, etc.\n */\nexport class TextNote extends Note {\n    static get CATEGORY() {\n        return Category.TextNote;\n    }\n    /** Glyph data. */\n    static get GLYPHS() {\n        return {\n            segno: Glyphs.segno,\n            tr: Glyphs.ornamentTrill,\n            mordent: Glyphs.ornamentMordent,\n            mordentUpper: Glyphs.ornamentShortTrill,\n            mordentLower: Glyphs.ornamentMordent,\n            f: Glyphs.dynamicForte,\n            p: Glyphs.dynamicPiano,\n            m: Glyphs.dynamicMezzo,\n            s: Glyphs.dynamicSforzando,\n            z: Glyphs.dynamicZ,\n            coda: Glyphs.coda,\n            pedalOpen: Glyphs.keyboardPedalPed,\n            pedalClose: Glyphs.keyboardPedalUp,\n            caesuraStraight: Glyphs.caesura,\n            caesuraCurved: Glyphs.caesuraCurved,\n            breath: Glyphs.breathMarkComma,\n            tick: Glyphs.breathMarkTick,\n            turn: Glyphs.ornamentTurn,\n            turnInverted: Glyphs.ornamentTurnSlash,\n        };\n    }\n    constructor(noteStruct) {\n        var _a, _b;\n        super(noteStruct);\n        this.text = (_a = noteStruct.text) !== null && _a !== void 0 ? _a : '';\n        if (noteStruct.glyph) {\n            this.text += TextNote.GLYPHS[noteStruct.glyph] || noteStruct.glyph;\n        }\n        if (noteStruct.font) {\n            this.setFont(noteStruct.font);\n        }\n        else if (noteStruct.glyph === undefined) {\n            this.setFont(Metrics.getFontInfo('TextNote.text.fontSize'));\n        }\n        // Scale the font size by 1/1.3.\n        const smallerFontSize = Font.convertSizeToPointValue(this.fontInfo.size) * 0.769231;\n        if (noteStruct.superscript) {\n            this.superscript = new Element('TexNote.subSuper');\n            this.superscript.setText(noteStruct.superscript);\n            this.superscript.setFontSize(smallerFontSize);\n        }\n        if (noteStruct.subscript) {\n            this.subscript = new Element('TexNote.subSuper');\n            this.subscript.setText(noteStruct.subscript);\n            this.subscript.setFontSize(smallerFontSize);\n        }\n        this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;\n        this.smooth = noteStruct.smooth || false;\n        this.ignoreTicks = noteStruct.ignoreTicks || false;\n        this.justification = TextJustification.LEFT;\n    }\n    /** Set the horizontal justification of the TextNote. */\n    setJustification(just) {\n        this.justification = just;\n        return this;\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Return the Stave line on which the TextNote is placed. */\n    getLine() {\n        return this.line;\n    }\n    /** Pre-render formatting. */\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        const tickContext = this.checkTickContext(`Can't preformat without a TickContext.`);\n        if (this.justification === TextJustification.CENTER) {\n            this.leftDisplacedHeadPx = this.width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            this.leftDisplacedHeadPx = this.width;\n        }\n        // We reposition to the center of the note head\n        this.rightDisplacedHeadPx = tickContext.getMetrics().glyphPx / 2;\n        this.preFormatted = true;\n    }\n    /**\n     * Renders the TextNote.\n     * `TextNote` has to be assigned to a `Stave` before rendering by means of `setStave`.\n     */\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        const tickContext = this.checkTickContext(`Can't draw without a TickContext.`);\n        this.setRendered();\n        // Reposition to center of note head\n        let x = this.getAbsoluteX() + tickContext.getMetrics().glyphPx / 2;\n        // Align based on tick-context width.\n        const width = this.getWidth();\n        if (this.justification === TextJustification.CENTER) {\n            x -= width / 2;\n        }\n        else if (this.justification === TextJustification.RIGHT) {\n            x -= width;\n        }\n        const y = stave.getYForLine(this.line + -3);\n        this.renderText(ctx, x, y);\n        const height = this.getHeight();\n        if (this.superscript) {\n            this.superscript.renderText(ctx, x + this.width + 2, y - height / 2.2);\n        }\n        if (this.subscript) {\n            this.subscript.renderText(ctx, x + this.width + 2, y + height / 2.2 - 1);\n        }\n    }\n}\nTextNote.Justification = TextJustification;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport var VoltaType;\n(function (VoltaType) {\n    VoltaType[VoltaType[\"NONE\"] = 1] = \"NONE\";\n    VoltaType[VoltaType[\"BEGIN\"] = 2] = \"BEGIN\";\n    VoltaType[VoltaType[\"MID\"] = 3] = \"MID\";\n    VoltaType[VoltaType[\"END\"] = 4] = \"END\";\n    VoltaType[VoltaType[\"BEGIN_END\"] = 5] = \"BEGIN_END\";\n})(VoltaType || (VoltaType = {}));\nexport class Volta extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Volta;\n    }\n    static get type() {\n        return VoltaType;\n    }\n    constructor(type, label, x, yShift) {\n        super();\n        this.type = type;\n        this.x = x;\n        this.yShift = yShift;\n        this.text = label;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const x = stave.getModifierXShift(this.getPosition());\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let width = stave.getWidth() - x; // don't include x (offset) for width\n        const topY = stave.getYForTopText(stave.getNumLines()) + this.yShift;\n        const vertHeight = 1.5 * stave.getSpacingBetweenLines();\n        switch (this.type) {\n            case VoltaType.BEGIN:\n                ctx.fillRect(this.x + x, topY, 1, vertHeight);\n                break;\n            case VoltaType.END:\n                width -= 5;\n                ctx.fillRect(this.x + x + width, topY, 1, vertHeight);\n                break;\n            case VoltaType.BEGIN_END:\n                width -= 3;\n                ctx.fillRect(this.x + x, topY, 1, vertHeight);\n                ctx.fillRect(this.x + x + width, topY, 1, vertHeight);\n                break;\n            default:\n                break;\n        }\n        // If the beginning of a volta, draw measure number\n        if (this.type === VoltaType.BEGIN || this.type === VoltaType.BEGIN_END) {\n            this.renderText(ctx, x + 5, topY - this.yShift + 15);\n        }\n        ctx.fillRect(this.x + x, topY, width, 1);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns\n//\n// This file implements the `StringNumber` class which renders string\n// number annotations beside notes.\nimport { Metrics } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { Renderer } from './renderer';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category, isStaveNote, isStemmableNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StringNumber extends Modifier {\n    static get CATEGORY() {\n        return Category.StringNumber;\n    }\n    // ## Static Methods\n    // Arrange string numbers inside a `ModifierContext`\n    static format(nums, state) {\n        /**\n         * The modifier context's leftShift state.\n         */\n        const leftShift = state.leftShift;\n        /**\n         * The modifier context's rightShift state.\n         */\n        const rightShift = state.rightShift;\n        const numSpacing = 1;\n        if (!nums || nums.length === 0)\n            return false;\n        const numsList = [];\n        let prevNote = null;\n        let extraXSpaceForDisplacedNotehead = 0;\n        let shiftRight = 0;\n        const modLines = 0;\n        for (let i = 0; i < nums.length; ++i) {\n            const num = nums[i];\n            const note = num.getNote();\n            const pos = num.getPosition();\n            if (!isStaveNote(note)) {\n                throw new RuntimeError('NoStaveNote');\n            }\n            const index = num.checkIndex();\n            const props = note.getKeyProps()[index];\n            const mc = note.getModifierContext();\n            const verticalSpaceNeeded = (num.radius * 2) / Tables.STAVE_LINE_DISTANCE + 0.5;\n            if (mc) {\n                if (pos === ModifierPosition.ABOVE) {\n                    num.textLine = mc.getState().topTextLine;\n                    state.topTextLine += verticalSpaceNeeded;\n                }\n                else if (pos === ModifierPosition.BELOW) {\n                    num.textLine = mc.getState().textLine;\n                    state.textLine += verticalSpaceNeeded;\n                }\n            }\n            if (note !== prevNote) {\n                for (let n = 0; n < note.keys.length; ++n) {\n                    if (pos === Modifier.Position.LEFT) {\n                        extraXSpaceForDisplacedNotehead = Math.max(note.getLeftDisplacedHeadPx(), extraXSpaceForDisplacedNotehead);\n                    }\n                    if (rightShift === 0) {\n                        shiftRight = Math.max(note.getRightDisplacedHeadPx(), shiftRight);\n                    }\n                }\n                prevNote = note;\n            }\n            const glyphLine = modLines === 0 ? props.line : modLines;\n            numsList.push({\n                pos,\n                note,\n                num,\n                line: glyphLine,\n                shiftL: extraXSpaceForDisplacedNotehead,\n                shiftR: shiftRight,\n            });\n        }\n        // Sort string numbers by line number.\n        numsList.sort((a, b) => b.line - a.line);\n        let numShiftR = 0;\n        let xWidthL = 0;\n        let xWidthR = 0;\n        let lastLine = null;\n        let lastNote = null;\n        for (let i = 0; i < numsList.length; ++i) {\n            const note = numsList[i].note;\n            const pos = numsList[i].pos;\n            const num = numsList[i].num;\n            const line = numsList[i].line;\n            const shiftR = numsList[i].shiftR;\n            // Reset the position of the string number every line.\n            if (line !== lastLine || note !== lastNote) {\n                numShiftR = rightShift + shiftR;\n            }\n            const numWidth = num.getWidth() + numSpacing;\n            let numXShift = 0;\n            if (pos === Modifier.Position.LEFT) {\n                num.setXShift(leftShift + extraXSpaceForDisplacedNotehead);\n                numXShift = numWidth; // spacing\n                xWidthL = Math.max(numXShift, xWidthL);\n            }\n            else if (pos === Modifier.Position.RIGHT) {\n                num.setXShift(numShiftR);\n                numXShift += numWidth; // spacing\n                xWidthR = numXShift > xWidthR ? numXShift : xWidthR;\n            }\n            lastLine = line;\n            lastNote = note;\n        }\n        state.leftShift += xWidthL;\n        state.rightShift += xWidthR;\n        return true;\n    }\n    constructor(number) {\n        super();\n        this.stringNumber = number;\n        this.position = Modifier.Position.ABOVE; // Default position above stem or note head\n        this.xShift = 0;\n        this.yShift = 0;\n        this.textLine = 0;\n        this.stemOffset = 0;\n        this.xOffset = 0; // Horizontal offset from default\n        this.yOffset = 0; // Vertical offset from default\n        this.dashed = true; // true - draw dashed extension  false - no extension\n        this.leg = Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line\n        this.radius = 8;\n        this.drawCircle = true;\n        this.setWidth(this.radius * 2 + 4);\n    }\n    setLineEndType(leg) {\n        if (leg >= Renderer.LineEndType.NONE && leg <= Renderer.LineEndType.DOWN) {\n            this.leg = leg;\n        }\n        return this;\n    }\n    setStringNumber(number) {\n        this.stringNumber = number;\n        return this;\n    }\n    setOffsetX(x) {\n        this.xOffset = x;\n        return this;\n    }\n    setOffsetY(y) {\n        this.yOffset = y;\n        return this;\n    }\n    setLastNote(note) {\n        this.lastNote = note;\n        return this;\n    }\n    setDashed(dashed) {\n        this.dashed = dashed;\n        return this;\n    }\n    setDrawCircle(drawCircle) {\n        this.drawCircle = drawCircle;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        const stemDirection = note.hasStem() ? note.getStemDirection() : Stem.UP;\n        let dotX = start.x + this.xShift + this.xOffset;\n        let stemExt = {};\n        if (note.hasStem()) {\n            stemExt = note.checkStem().getExtents();\n        }\n        let dotY = start.y + this.yShift + this.yOffset;\n        switch (this.position) {\n            case Modifier.Position.ABOVE:\n                {\n                    const ys = note.getYs();\n                    dotY = ys.reduce((a, b) => (a < b ? a : b));\n                    if (note.hasStem() && stemDirection === Stem.UP) {\n                        dotY = stemExt.topY + Metrics.get('StringNumber.stemPadding');\n                    }\n                    dotY -=\n                        this.radius + Metrics.get('StringNumber.verticalPadding') + this.textLine * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.BELOW:\n                {\n                    const ys = note.getYs();\n                    dotY = ys.reduce((a, b) => (a > b ? a : b));\n                    if (note.hasStem() && stemDirection === Stem.DOWN) {\n                        dotY = stemExt.topY - Metrics.get('StringNumber.stemPadding');\n                    }\n                    dotY +=\n                        this.radius + Metrics.get('StringNumber.verticalPadding') + this.textLine * Tables.STAVE_LINE_DISTANCE;\n                }\n                break;\n            case Modifier.Position.LEFT:\n                dotX -= this.radius / 2 + Metrics.get('StringNumber.leftPadding');\n                break;\n            case Modifier.Position.RIGHT:\n                dotX += this.radius / 2 + Metrics.get('StringNumber.rightPadding');\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid`);\n        }\n        if (this.drawCircle) {\n            ctx.beginPath();\n            ctx.arc(dotX, dotY, this.radius, 0, Math.PI * 2, false);\n            ctx.setLineWidth(1.5);\n            ctx.stroke();\n        }\n        ctx.setFont(this.fontInfo);\n        const x = dotX - ctx.measureText(this.stringNumber).width / 2;\n        ctx.fillText('' + this.stringNumber, x, dotY + 4.5);\n        const lastNote = this.lastNote;\n        if (isStemmableNote(lastNote)) {\n            // Only StemmableNote objects have getStemX().\n            const end = lastNote.getStemX() - note.getX() + 5;\n            ctx.setStrokeStyle('#000000');\n            ctx.setLineCap('round');\n            ctx.setLineWidth(0.6);\n            if (this.dashed) {\n                Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 3]);\n            }\n            else {\n                Renderer.drawDashedLine(ctx, dotX + 10, dotY, dotX + end, dotY, [3, 0]);\n            }\n            let len;\n            let pattern;\n            switch (this.leg) {\n                case Renderer.LineEndType.UP:\n                    len = -10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);\n                    break;\n                case Renderer.LineEndType.DOWN:\n                    len = 10;\n                    pattern = this.dashed ? [3, 3] : [3, 0];\n                    Renderer.drawDashedLine(ctx, dotX + end, dotY, dotX + end, dotY + len, pattern);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Larry Kuhns\n//\n// This file implements the `Stroke` class which renders chord strokes\n// that can be arpeggiated, brushed, rasgueado, etc.\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Category, isNote, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nexport class Stroke extends Modifier {\n    static get CATEGORY() {\n        return Category.Stroke;\n    }\n    // Arrange strokes inside `ModifierContext`\n    static format(strokes, state) {\n        const leftShift = state.leftShift;\n        const strokeSpacing = 5;\n        if (!strokes || strokes.length === 0)\n            return false;\n        const strokeList = strokes.map((stroke) => {\n            const note = stroke.getNote();\n            const index = stroke.checkIndex();\n            if (isStaveNote(note)) {\n                // Only StaveNote objects have getKeyProps().\n                const { line } = note.getKeyProps()[index];\n                const shift = note.getLeftDisplacedHeadPx();\n                return { line, shift, stroke };\n            }\n            else if (isTabNote(note)) {\n                // Only TabNote objects have getPositions().\n                const { str: string } = note.getPositions()[index];\n                return { line: string, shift: 0, stroke };\n            }\n            else {\n                throw new RuntimeError('Internal', 'Unexpected instance.');\n            }\n        });\n        const strokeShift = leftShift;\n        // There can only be one stroke .. if more than one, they overlay each other\n        const xShift = strokeList.reduce((xShift, { stroke, shift }) => {\n            stroke.setXShift(strokeShift + shift);\n            return Math.max(stroke.getWidth() + strokeSpacing, xShift);\n        }, 0);\n        state.leftShift += xShift;\n        return true;\n    }\n    constructor(type, options) {\n        super();\n        this.options = Object.assign({ allVoices: true }, options);\n        // multi voice - span stroke across all voices if true\n        this.allVoices = this.options.allVoices;\n        // multi voice - end note of stroke, set in draw()\n        this.type = type;\n        this.position = Modifier.Position.LEFT;\n        this.renderOptions = {\n            fontScale: Metrics.get('Stroke.fontSize'),\n        };\n        this.setXShift(0);\n        this.setWidth(10);\n    }\n    getPosition() {\n        return this.position;\n    }\n    addEndNote(note) {\n        this.noteEnd = note;\n        return this;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(this.position, this.index);\n        let yPositions = note.getYs();\n        let topY = start.y;\n        let botY = start.y;\n        const x = start.x - 5;\n        const lineSpace = note.checkStave().getSpacingBetweenLines();\n        const notes = this.checkModifierContext().getMembers(note.getCategory());\n        for (let i = 0; i < notes.length; i++) {\n            const note = notes[i];\n            if (isNote(note)) {\n                // Only Note objects have getYs().\n                // note is an instance of either StaveNote or TabNote.\n                yPositions = note.getYs();\n                for (let n = 0; n < yPositions.length; n++) {\n                    if (this.note === notes[i] || this.allVoices) {\n                        topY = Math.min(topY, yPositions[n]);\n                        botY = Math.max(botY, yPositions[n]);\n                    }\n                }\n            }\n        }\n        let arrow = '';\n        let arrowY = 0;\n        let textY = 0;\n        switch (this.type) {\n            case Stroke.Type.BRUSH_DOWN:\n            case Stroke.Type.ROLL_DOWN:\n            case Stroke.Type.RASGUEADO_DOWN:\n                arrow = Glyphs.arrowheadBlackUp;\n                arrowY = topY;\n                topY -= lineSpace / 2;\n                botY += lineSpace / 2;\n                break;\n            case Stroke.Type.BRUSH_UP:\n            case Stroke.Type.ROLL_UP:\n            case Stroke.Type.RASGUEADO_UP:\n                arrow = Glyphs.arrowheadBlackDown;\n                arrowY = botY + lineSpace;\n                topY -= lineSpace / 2;\n                break;\n            case Stroke.Type.ARPEGGIO_DIRECTIONLESS:\n                topY -= lineSpace / 2;\n                botY += lineSpace / 2;\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The stroke type ${this.type} does not exist`);\n        }\n        // Draw the stroke\n        if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {\n            ctx.fillRect(x + this.xShift, topY, 1, botY - topY);\n        }\n        else {\n            // Select the wiggle glyph depending on the arrow direction\n            const lineGlyph = arrow === Glyphs.arrowheadBlackDown ? Glyphs.wiggleArpeggiatoDown : Glyphs.wiggleArpeggiatoUp;\n            let txt = '';\n            const el = new Element();\n            // add glyphs until the required length is achieved\n            while (el.getWidth() < botY - topY) {\n                txt += lineGlyph;\n                el.setText(txt);\n            }\n            if (this.type === Stroke.Type.RASGUEADO_DOWN ||\n                this.type === Stroke.Type.ROLL_DOWN ||\n                this.type === Stroke.Type.ARPEGGIO_DIRECTIONLESS) {\n                ctx.openRotation(90, x + this.xShift, topY);\n                el.renderText(ctx, x + this.xShift, topY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);\n                ctx.closeRotation();\n                textY = topY + el.getWidth() + 5;\n            }\n            else {\n                ctx.openRotation(-90, x + this.xShift, botY);\n                el.renderText(ctx, x + this.xShift, botY - el.getTextMetrics().actualBoundingBoxDescent + el.getHeight() / 2);\n                ctx.closeRotation();\n                textY = botY - el.getWidth() - 5;\n            }\n        }\n        // Draw the arrow head\n        if (arrowY !== 0) {\n            const el = new Element();\n            el.setText(arrow);\n            el.renderText(ctx, \n            // Center the arrow head substracting its width / 2\n            x + this.xShift - el.getWidth() / 2, arrowY);\n        }\n        // Draw the rasgueado \"R\"\n        if (this.type === Stroke.Type.RASGUEADO_DOWN || this.type === Stroke.Type.RASGUEADO_UP) {\n            const el = new Element('Stroke.text');\n            el.setText('R');\n            el.renderText(ctx, x + this.xShift - el.getWidth() / 2, textY + (this.type === Stroke.Type.RASGUEADO_DOWN ? el.getHeight() : 0));\n        }\n    }\n}\nStroke.Type = {\n    BRUSH_DOWN: 1,\n    BRUSH_UP: 2,\n    ROLL_DOWN: 3, // Arpeggiated chord\n    ROLL_UP: 4, // Arpeggiated chord\n    RASGUEADO_DOWN: 5,\n    RASGUEADO_UP: 6,\n    ARPEGGIO_DIRECTIONLESS: 7, // Arpeggiated chord without upwards or downwards arrow\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Bend } from './bend';\nimport { Modifier } from './modifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/** `Vibrato` implements diverse vibratos. */\nexport class Vibrato extends Modifier {\n    static get CATEGORY() {\n        return Category.Vibrato;\n    }\n    /** Arrange vibratos inside a `ModifierContext`. */\n    static format(vibratos, state, context) {\n        if (!vibratos || vibratos.length === 0)\n            return false;\n        // Vibratos are always on top.\n        let textLine = state.topTextLine;\n        let width = 0;\n        let shift = state.rightShift - 7;\n        // If there's a bend, drop the text line\n        const bends = context.getMembers(Bend.CATEGORY);\n        if (bends && bends.length > 0) {\n            const bendHeight = bends.map((bb) => bb.getTextHeight()).reduce((a, b) => (a > b ? a : b)) / Tables.STAVE_LINE_DISTANCE;\n            textLine = textLine - (bendHeight + 1);\n        }\n        else {\n            state.topTextLine += 1;\n        }\n        // Format Vibratos\n        for (let i = 0; i < vibratos.length; ++i) {\n            const vibrato = vibratos[i];\n            vibrato.setXShift(shift);\n            vibrato.setTextLine(textLine);\n            width += vibrato.getWidth();\n            shift += width;\n        }\n        state.rightShift += width;\n        return true;\n    }\n    constructor() {\n        super();\n        this.position = Modifier.Position.RIGHT;\n        this.renderOptions = {\n            code: 0xeab0,\n            width: 20,\n        };\n        this.setVibratoWidth(this.renderOptions.width);\n    }\n    /** Set vibrato width in pixels. */\n    setVibratoWidth(width) {\n        this.renderOptions.width = width;\n        this.text = String.fromCodePoint(this.renderOptions.code);\n        const myWidth = this.getWidth();\n        if (!myWidth) {\n            throw new RuntimeError('Cannot set vibrato width if width is 0');\n        }\n        const items = Math.round(this.renderOptions.width / myWidth);\n        for (let i = 1; i < items; i++) {\n            this.text += String.fromCodePoint(this.renderOptions.code);\n        }\n        return this;\n    }\n    /** Set vibrato code. */\n    setVibratoCode(code) {\n        this.renderOptions.code = code;\n        return this.setVibratoWidth(this.renderOptions.width);\n    }\n    /** Draw the vibrato on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const start = note.getModifierStartXY(Modifier.Position.RIGHT, this.index);\n        const vx = start.x;\n        const vy = note.getYForTopText(this.textLine) + 5;\n        this.renderText(ctx, vx, vy);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This class implements various types of members to notes (e.g. bends,\n// fingering positions etc.).  The ModifierContext works with tickables\n// that are at the same tick to ensure that they and their modifiers\n// all have proper alignment.  (Note that the ModifierContext also\n// runs the spacing of the tickable).\n//\n// see https://github.com/0xfe/vexflow/wiki/How-Formatting-Works\nimport { Accidental } from './accidental';\nimport { Annotation } from './annotation';\nimport { Articulation } from './articulation';\nimport { Bend } from './bend';\nimport { ChordSymbol } from './chordsymbol';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { StaveNote } from './stavenote';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\nimport { Vibrato } from './vibrato';\n// To enable logging for this class. Set `VexFlow.ModifierContext.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (ModifierContext.DEBUG)\n        log('VexFlow.ModifierContext', args);\n}\nexport class ModifierContext {\n    constructor() {\n        // Formatting data.\n        this.state = {\n            leftShift: 0,\n            rightShift: 0,\n            textLine: 0,\n            topTextLine: 0,\n        };\n        // Current members -- a mapping of Category (string) to a list of Tickables, Modifiers,\n        // StaveNotes, TabNotes, etc.\n        this.members = {};\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.formatted = false;\n        this.width = 0;\n        this.spacing = 0;\n    }\n    addModifier(member) {\n        L('addModifier is deprecated, use addMember instead.');\n        return this.addMember(member);\n    }\n    /**\n     * this.members maps CATEGORY strings to arrays of Tickable | Modifier | StaveNote | TabNote.\n     * Here we add a new member to this.members, and create a new array if needed.\n     * @param member\n     * @returns this\n     */\n    addMember(member) {\n        const category = member.getCategory();\n        if (!this.members[category]) {\n            this.members[category] = [];\n        }\n        this.members[category].push(member);\n        member.setModifierContext(this);\n        this.preFormatted = false;\n        return this;\n    }\n    /**\n     * @deprecated\n     */\n    getModifiers(category) {\n        L('getModifiers is deprecated, use getMembers instead.');\n        return this.getMembers(category);\n    }\n    getMembers(category) {\n        var _a;\n        return (_a = this.members[category]) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Get the width of the entire\n     */\n    getWidth() {\n        return this.width;\n    }\n    getLeftShift() {\n        return this.state.leftShift;\n    }\n    getRightShift() {\n        return this.state.rightShift;\n    }\n    getState() {\n        return this.state;\n    }\n    getMetrics() {\n        if (!this.formatted) {\n            throw new RuntimeError('UnformattedMember', 'Unformatted member has no metrics.');\n        }\n        return {\n            width: this.state.leftShift + this.state.rightShift + this.spacing,\n            spacing: this.spacing,\n        };\n    }\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        L('Preformatting ModifierContext');\n        const state = this.state;\n        const members = this.members;\n        // The ordering below determines when different members are formatted and rendered.\n        StaveNote.format(members[Category.StaveNote], state);\n        Parenthesis.format(members[Category.Parenthesis], state);\n        Dot.format(members[Category.Dot], state);\n        FretHandFinger.format(members[Category.FretHandFinger], state);\n        Accidental.format(members[Category.Accidental], state);\n        Stroke.format(members[Category.Stroke], state);\n        GraceNoteGroup.format(members[Category.GraceNoteGroup], state);\n        NoteSubGroup.format(members[Category.NoteSubGroup], state);\n        StringNumber.format(members[Category.StringNumber], state);\n        Articulation.format(members[Category.Articulation], state);\n        Ornament.format(members[Category.Ornament], state);\n        Annotation.format(members[Category.Annotation], state);\n        ChordSymbol.format(members[Category.ChordSymbol], state);\n        Bend.format(members[Category.Bend], state);\n        Vibrato.format(members[Category.Vibrato], state, this);\n        // Update width of this member context\n        this.width = state.leftShift + state.rightShift;\n        this.preFormatted = true;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        L('Postformatting ModifierContext');\n        // If post-formatting is required for an element, add more lines below.\n        StaveNote.postFormat(this.getMembers(Category.StaveNote));\n    }\n}\nModifierContext.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// Co-author: Benjamin W. Bohl\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Clef.DEBUG)\n        log('VexFlow.Clef', args);\n}\n/**\n * Clef implements various types of clefs that can be rendered on a stave.\n *\n * See `tests/clef_tests.ts` for usage examples.\n */\nexport class Clef extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Clef;\n    }\n    /**\n     * Every clef name is associated with a glyph code from the font file\n     * and a default stave line number.\n     */\n    static get types() {\n        const { gClef, fClef, cClef, unpitchedPercussionClef1, sixStringTabClef } = Glyphs;\n        return {\n            treble: {\n                code: gClef,\n                line: 3,\n            },\n            bass: {\n                code: fClef,\n                line: 1,\n            },\n            alto: {\n                code: cClef,\n                line: 2,\n            },\n            tenor: {\n                code: cClef,\n                line: 1,\n            },\n            percussion: {\n                code: unpitchedPercussionClef1,\n                line: 2,\n            },\n            soprano: {\n                code: cClef,\n                line: 4,\n            },\n            'mezzo-soprano': {\n                code: cClef,\n                line: 3,\n            },\n            'baritone-c': {\n                code: cClef,\n                line: 0,\n            },\n            'baritone-f': {\n                code: fClef,\n                line: 2,\n            },\n            subbass: {\n                code: fClef,\n                line: 0,\n            },\n            french: {\n                code: gClef,\n                line: 4,\n            },\n            tab: {\n                code: sixStringTabClef,\n                line: 2.5,\n            },\n        };\n    }\n    /** Create a new clef. */\n    constructor(type, size, annotation) {\n        super();\n        /**\n         * The attribute `clef` must be a key from\n         * `Clef.types`\n         */\n        this.code = Clef.types['treble'].code;\n        this.line = Clef.types['treble'].line;\n        this.size = 'default';\n        this.type = 'treble';\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setType(type, size, annotation);\n        L('Creating clef:', type);\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size = 'default', annotation) {\n        this.type = type;\n        this.code = Clef.types[type].code;\n        this.line = Clef.types[type].line;\n        this.size = size !== null && size !== void 0 ? size : 'default';\n        // If an annotation, such as 8va, is specified, add it to the Clef object.\n        if (annotation === '8va') {\n            if (this.code === Glyphs.gClef) {\n                this.code = Glyphs.gClef8va;\n            }\n            if (this.code === Glyphs.fClef) {\n                this.code = Glyphs.fClef8va;\n            }\n        }\n        if (annotation === '8vb') {\n            if (this.code === Glyphs.gClef) {\n                this.code = Glyphs.gClef8vb;\n            }\n            if (this.code === Glyphs.fClef) {\n                this.code = Glyphs.fClef8vb;\n            }\n        }\n        this.text = this.code;\n        this.fontInfo.size = Math.floor(Clef.getPoint(this.size));\n        return this;\n    }\n    /** Get point for clefs. */\n    static getPoint(size) {\n        // for sizes other than 'default', clef is 2/3 of the default value\n        return size === 'default' ? Metrics.get('fontSize') : (Metrics.get('fontSize') * 2) / 3;\n    }\n    /** Set associated stave. */\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    /** Render clef. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.openGroup('clef', this.getAttribute('id'));\n        this.y = stave.getYForLine(this.line);\n        this.renderText(ctx, 0, 0);\n        ctx.closeGroup();\n    }\n}\n/** To enable logging for this class, set `VexFlow.Clef.DEBUG` to `true`. */\nClef.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n//\n// ## Description\n//\n// This file implements key signatures. A key signature sits on a stave\n// and indicates the notes with implicit accidentals.\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Stave } from './stave';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { defined } from './util';\nexport class KeySignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.KeySignature;\n    }\n    // Create a new Key Signature based on a `keySpec`\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super();\n        this.accList = [];\n        this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.children = [];\n        this.paddingForced = false;\n    }\n    // Add an accidental glyph to the `KeySignature` instance which represents\n    // the provided `acc`. If `nextAcc` is also provided, the appropriate\n    // spacing will be included in the glyph's position\n    convertToGlyph(acc, nextAcc, stave) {\n        const code = Tables.accidentalCodes(acc.type);\n        const glyph = new Element(Category.KeySignature);\n        glyph.setText(code);\n        // Determine spacing between current accidental and the next accidental\n        let extraWidth = 1;\n        // Place the glyph on the stave\n        glyph.setYShift(stave.getYForLine(acc.line));\n        if (this.children.length > 0) {\n            const prevGlyph = this.children[this.children.length - 1];\n            const isNatural = (el) => el.getText() === Glyphs.accidentalNatural;\n            const yShiftDiff = (el1, el2) => Math.abs(el2.getYShift() - el1.getYShift());\n            if ((isNatural(prevGlyph) || isNatural(glyph)) && yShiftDiff(prevGlyph, glyph) < 10) {\n                extraWidth = 2;\n            }\n            glyph.setXShift(prevGlyph.getXShift() + prevGlyph.getWidth() + extraWidth);\n        }\n        this.children.push(glyph);\n        // Expand size of key signature\n        this.width += glyph.getWidth() + extraWidth;\n    }\n    // Cancel out a key signature provided in the `spec` parameter. This will\n    // place appropriate natural accidentals before the key signature.\n    cancelKey(spec) {\n        this.formatted = false;\n        this.cancelKeySpec = spec;\n        return this;\n    }\n    // Convert the `cancelKeySpec` into a list of naturals to be displayed\n    convertToCancelAccList(spec) {\n        // Get the accidental list for the cancelled key signature\n        const cancelAccList = Tables.keySignature(spec);\n        // If the cancelled key has a different accidental type, ie: # vs b\n        const differentTypes = this.accList.length > 0 && cancelAccList.length > 0 && cancelAccList[0].type !== this.accList[0].type;\n        // Determine how many naturals needed to add\n        const naturals = differentTypes ? cancelAccList.length : cancelAccList.length - this.accList.length;\n        // Return if no naturals needed\n        if (naturals < 1)\n            return undefined;\n        // Get the line position for each natural\n        const cancelled = [];\n        for (let i = 0; i < naturals; i++) {\n            let index = i;\n            if (!differentTypes) {\n                index = cancelAccList.length - naturals + i;\n            }\n            const acc = cancelAccList[index];\n            cancelled.push({ type: 'n', line: acc.line });\n        }\n        // Combine naturals with main accidental list for the key signature\n        this.accList = cancelled.concat(this.accList);\n        return {\n            accList: cancelled,\n            type: cancelAccList[0].type,\n        };\n    }\n    // Add this key signature to the start of a stave.\n    addToStave(stave) {\n        this.paddingForced = true;\n        stave.addModifier(this);\n        return this;\n    }\n    // Add this key signature to a stave.\n    setStave(stave) {\n        this.formatted = false;\n        return super.setStave(stave);\n    }\n    // Get the `BoundingBox`\n    getBoundingBox() {\n        if (!this.formatted)\n            this.format();\n        return super.getBoundingBox();\n    }\n    // Calculate the width and height for the entire signature\n    calculateDimensions() {\n        let boundingBox;\n        if (this.children.length > 0) {\n            boundingBox = this.children[0].getBoundingBox();\n        }\n        else {\n            boundingBox = new BoundingBox(this.x + this.xShift, this.y + this.yShift, 0, 0);\n        }\n        this.children.forEach((glyph) => {\n            boundingBox.mergeWith(glyph.getBoundingBox());\n        });\n        this.width = boundingBox.getW();\n        this.height = boundingBox.getH();\n        this.y = boundingBox.getY();\n    }\n    // Apply the accidental staff line placement based on the `clef` and\n    // the  accidental `type` for the key signature ('# or 'b').\n    convertAccLines(clef, type, accList = this.accList) {\n        let offset = 0.0; // if clef === \"treble\"\n        let customLines; // when clef doesn't follow treble key sig shape\n        switch (clef) {\n            // Treble & Subbass both have offsets of 0, so are not included.\n            case 'soprano':\n                if (type === '#')\n                    customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];\n                else\n                    offset = -1;\n                break;\n            case 'mezzo-soprano':\n                if (type === 'b')\n                    customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];\n                else\n                    offset = 1.5;\n                break;\n            case 'alto':\n                offset = 0.5;\n                break;\n            case 'tenor':\n                if (type === '#')\n                    customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];\n                else\n                    offset = -0.5;\n                break;\n            case 'baritone-f':\n            case 'baritone-c':\n                if (type === 'b')\n                    customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];\n                else\n                    offset = 2;\n                break;\n            case 'bass':\n            case 'french':\n                offset = 1;\n                break;\n            default:\n                break;\n        }\n        // If there's a special case, assign those lines/spaces:\n        let i;\n        if (typeof customLines !== 'undefined') {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line = customLines[i];\n            }\n        }\n        else if (offset !== 0) {\n            for (i = 0; i < accList.length; ++i) {\n                accList[i].line += offset;\n            }\n        }\n    }\n    // Get the padding required for this modifier\n    getPadding(index) {\n        if (!this.formatted)\n            this.format();\n        return this.children.length === 0 || (!this.paddingForced && index < 2) ? 0 : this.padding;\n    }\n    // Get the width of the modifier\n    getWidth() {\n        if (!this.formatted)\n            this.format();\n        return this.width;\n    }\n    // Set the key signature to a specific key, ie: 'C' or 'Gm'\n    setKeySig(keySpec, cancelKeySpec, alterKeySpec) {\n        this.formatted = false;\n        this.keySpec = keySpec;\n        this.cancelKeySpec = cancelKeySpec;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    // Alter the accidentals of a key spec one by one.\n    // Each alteration is a new accidental that replaces the\n    // original accidental (or the canceled one).\n    alterKey(alterKeySpec) {\n        this.formatted = false;\n        this.alterKeySpec = alterKeySpec;\n        return this;\n    }\n    // Convert the `alterKeySpec` into a list of accidentals to be displayed\n    convertToAlterAccList(alterKeySpec) {\n        const max = Math.min(alterKeySpec.length, this.accList.length);\n        for (let i = 0; i < max; ++i) {\n            if (alterKeySpec[i]) {\n                this.accList[i].type = alterKeySpec[i];\n            }\n        }\n    }\n    /**\n     * Format and position the modifier.\n     * If no stave is set, a dummy stave is created.\n     */\n    format() {\n        let stave = this.getStave();\n        if (!stave) {\n            stave = new Stave(0, 0, 100);\n            this.setStave(stave);\n        }\n        this.width = 0;\n        this.children = [];\n        this.accList = Tables.keySignature(defined(this.keySpec));\n        const accList = this.accList;\n        const firstAccidentalType = accList.length > 0 ? accList[0].type : undefined;\n        let cancelAccList;\n        if (this.cancelKeySpec) {\n            cancelAccList = this.convertToCancelAccList(this.cancelKeySpec);\n        }\n        if (this.alterKeySpec) {\n            this.convertToAlterAccList(this.alterKeySpec);\n        }\n        if (this.accList.length > 0) {\n            const clef = (this.position === StaveModifierPosition.END ? stave.getEndClef() : stave.getClef()) || stave.getClef();\n            if (cancelAccList) {\n                this.convertAccLines(clef, cancelAccList.type, cancelAccList.accList);\n            }\n            this.convertAccLines(clef, firstAccidentalType, accList);\n            for (let i = 0; i < this.accList.length; ++i) {\n                this.convertToGlyph(this.accList[i], this.accList[i + 1], stave);\n            }\n        }\n        this.calculateDimensions();\n        this.formatted = true;\n    }\n    // Render the key signature\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        if (!this.formatted)\n            this.format();\n        this.setRendered();\n        ctx.openGroup('keysignature', this.getAttribute('id'));\n        for (let i = 0; i < this.children.length; i++) {\n            const glyph = this.children[i];\n            glyph.renderText(ctx, this.x, 0);\n        }\n        ctx.closeGroup();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class Repetition extends StaveModifier {\n    static get CATEGORY() {\n        return Category.Repetition;\n    }\n    constructor(type, x, yShift) {\n        super();\n        this.symbolType = type;\n        this.x = x;\n        this.xShift = 0;\n        this.yShift = yShift;\n    }\n    setShiftX(x) {\n        this.xShift = x;\n        return this;\n    }\n    setShiftY(y) {\n        this.yShift = y;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const x = stave.getModifierXShift(this.getPosition());\n        this.setRendered();\n        switch (this.symbolType) {\n            case Repetition.type.CODA_RIGHT:\n                this.drawCodaFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.CODA_LEFT:\n                this.drawSymbolText(stave, x, 'Coda', true);\n                break;\n            case Repetition.type.SEGNO_LEFT:\n                this.drawSegnoFixed(stave, x);\n                break;\n            case Repetition.type.SEGNO_RIGHT:\n                this.drawSegnoFixed(stave, x + stave.getWidth());\n                break;\n            case Repetition.type.DC:\n                this.drawSymbolText(stave, x, 'D.C.', false);\n                break;\n            case Repetition.type.DC_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.C. al', true);\n                break;\n            case Repetition.type.DC_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.C. al Fine', false);\n                break;\n            case Repetition.type.DS:\n                this.drawSymbolText(stave, x, 'D.S.', false);\n                break;\n            case Repetition.type.DS_AL_CODA:\n                this.drawSymbolText(stave, x, 'D.S. al', true);\n                break;\n            case Repetition.type.DS_AL_FINE:\n                this.drawSymbolText(stave, x, 'D.S. al Fine', false);\n                break;\n            case Repetition.type.FINE:\n                this.drawSymbolText(stave, x, 'Fine', false);\n                break;\n            case Repetition.type.TO_CODA:\n                this.drawSymbolText(stave, x, 'To', true);\n                break;\n            default:\n                break;\n        }\n    }\n    drawCodaFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines());\n        this.text = Glyphs.coda;\n        this.renderText(stave.checkContext(), x, y + Metrics.get('Repetition.coda.offsetY'));\n        return this;\n    }\n    drawSegnoFixed(stave, x) {\n        const y = stave.getYForTopText(stave.getNumLines());\n        this.text = Glyphs.segno;\n        this.renderText(stave.checkContext(), x, y + Metrics.get('Repetition.segno.offsetY'));\n        return this;\n    }\n    drawSymbolText(stave, x, text, drawCoda) {\n        const ctx = stave.checkContext();\n        let textX = 0;\n        this.text = text;\n        if (drawCoda) {\n            this.text += ' \\ue048' /*coda*/;\n        }\n        this.setFont(Metrics.getFontInfo('Repetition.text'));\n        switch (this.symbolType) {\n            // To the left\n            case Repetition.type.CODA_LEFT:\n                // Offset Coda text to right of stave beginning\n                textX = stave.getVerticalBarWidth();\n                break;\n            // To the right\n            case Repetition.type.DC:\n            case Repetition.type.DC_AL_FINE:\n            case Repetition.type.DS:\n            case Repetition.type.DS_AL_FINE:\n            case Repetition.type.FINE:\n            default:\n                textX =\n                    x - (stave.getNoteStartX() - this.x) + stave.getWidth() - this.width - Metrics.get('Repetition.text.offsetX');\n        }\n        const y = stave.getYForTopText(stave.getNumLines()) + Metrics.get('Repetition.text.offsetY');\n        this.renderText(ctx, textX, y);\n        return this;\n    }\n}\nRepetition.type = {\n    NONE: 1, // no coda or segno\n    CODA_LEFT: 2, // coda at beginning of stave\n    CODA_RIGHT: 3, // coda at end of stave\n    SEGNO_LEFT: 4, // segno at beginning of stave\n    SEGNO_RIGHT: 5, // segno at end of stave\n    DC: 6, // D.C. at end of stave\n    DC_AL_CODA: 7, // D.C. al coda at end of stave\n    DC_AL_FINE: 8, // D.C. al Fine end of stave\n    DS: 9, // D.S. at end of stave\n    DS_AL_CODA: 10, // D.S. al coda at end of stave\n    DS_AL_FINE: 11, // D.S. al Fine at end of stave\n    FINE: 12, // Fine at end of stave\n    TO_CODA: 13, // To Coda at end of stave\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Larry Kuhns 2011\nimport { Metrics } from './metrics';\nimport { StaveModifier } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class StaveSection extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveSection;\n    }\n    constructor(section, x = 0, yShift = 0, drawRect = true) {\n        super();\n        this.setText(section);\n        this.x = x;\n        this.yShift = yShift;\n        this.drawRect = drawRect;\n        this.padding = Metrics.get('StaveSection.padding');\n    }\n    setDrawRect(drawRect) {\n        this.drawRect = drawRect;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        this.x = stave.getX() + stave.getModifierXShift(this.getPosition());\n        const headroom = -1 * this.textMetrics.actualBoundingBoxDescent;\n        const width = this.width + 2 * this.padding; // add left & right padding\n        const height = this.height + 2 * this.padding; // add top & bottom padding\n        //  Seems to be a good default y\n        const y = stave.getYForTopText(1.5) + this.yShift;\n        const x = this.x + this.xShift;\n        if (this.drawRect) {\n            ctx.beginPath();\n            ctx.rect(x, y - height + headroom, width, height);\n            ctx.stroke();\n        }\n        this.renderText(ctx, this.xShift + this.padding, y - this.padding);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Radosaw Eichler 2012\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Category } from './typeguard';\nexport class StaveTempo extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveTempo;\n    }\n    constructor(tempo, x, shiftY) {\n        super();\n        this.durationToCode = {\n            '1/4': Glyphs.metNoteDoubleWholeSquare,\n            long: Glyphs.metNoteDoubleWholeSquare,\n            '1/2': Glyphs.metNoteDoubleWhole,\n            breve: Glyphs.metNoteDoubleWhole,\n            1: Glyphs.metNoteWhole,\n            whole: Glyphs.metNoteWhole,\n            w: Glyphs.metNoteWhole,\n            2: Glyphs.metNoteHalfUp,\n            half: Glyphs.metNoteHalfUp,\n            h: Glyphs.metNoteHalfUp,\n            4: Glyphs.metNoteQuarterUp,\n            quarter: Glyphs.metNoteQuarterUp,\n            q: Glyphs.metNoteQuarterUp,\n            8: Glyphs.metNote8thUp,\n            eighth: Glyphs.metNote8thUp,\n            16: Glyphs.metNote16thUp,\n            '16th': Glyphs.metNote16thUp,\n            32: Glyphs.metNote32ndUp,\n            '32nd': Glyphs.metNote32ndUp,\n            64: Glyphs.metNote64thUp,\n            '64th': Glyphs.metNote64thUp,\n            128: Glyphs.metNote128thUp,\n            '128th': Glyphs.metNote128thUp,\n            256: Glyphs.metNote256thUp,\n            '256th': Glyphs.metNote256thUp,\n            512: Glyphs.metNote512thUp,\n            '512th': Glyphs.metNote512thUp,\n            1024: Glyphs.metNote1024thUp,\n            '1024th': Glyphs.metNote1024thUp,\n        };\n        this.tempo = tempo;\n        this.position = StaveModifierPosition.ABOVE;\n        this.x = x;\n        this.setXShift(10);\n        this.setYShift(shiftY);\n    }\n    setTempo(tempo) {\n        this.tempo = tempo;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const shiftX = stave.getModifierXShift(this.getPosition());\n        const ctx = stave.checkContext();\n        this.setRendered();\n        const { name, duration, dots, bpm, duration2, dots2, parenthesis } = this.tempo;\n        let x = this.x + shiftX;\n        const y = stave.getYForTopText(1);\n        const el = new Element('StaveTempo.glyph');\n        const elText = new Element('StaveTempo');\n        if (name) {\n            this.text = name;\n            this.fontInfo = Metrics.getFontInfo('StaveTempo.name');\n            this.renderText(ctx, shiftX, y);\n            x += this.getWidth() + 3;\n        }\n        if ((name && duration) || parenthesis) {\n            elText.setText('(');\n            elText.renderText(ctx, x + this.xShift, y + this.yShift);\n            x += elText.getWidth() + 3;\n        }\n        if (duration) {\n            el.setText(this.durationToCode[duration]);\n            el.renderText(ctx, x + this.xShift, y + this.yShift);\n            x += el.getWidth() + 3;\n            if (dots) {\n                // Draw dot\n                el.setText(Glyphs.metAugmentationDot);\n                for (let i = 0; i < dots; i++) {\n                    el.renderText(ctx, x + this.xShift, y + 2 + this.yShift);\n                    x += el.getWidth() + 3;\n                }\n            }\n            elText.setText('=');\n            elText.renderText(ctx, x + this.xShift, y + this.yShift);\n            x += elText.getWidth() + 3;\n            if (duration2) {\n                el.setText(this.durationToCode[duration2]);\n                el.renderText(ctx, x + this.xShift, y + this.yShift);\n                x += el.getWidth() + 3;\n                if (dots2) {\n                    // Draw dot\n                    el.setText(Glyphs.metAugmentationDot);\n                    for (let i = 0; i < dots2; i++) {\n                        el.renderText(ctx, x + this.xShift, y + 2 + this.yShift);\n                        x += el.getWidth() + 3;\n                    }\n                }\n            }\n            else if (bpm) {\n                elText.setText('' + bpm);\n                elText.renderText(ctx, x + this.xShift, y + this.yShift);\n                x += elText.getWidth() + 3;\n            }\n            if (name || parenthesis) {\n                elText.setText(')');\n                elText.renderText(ctx, x + this.xShift, y + this.yShift);\n            }\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { TextJustification, TextNote } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveText extends StaveModifier {\n    static get CATEGORY() {\n        return Category.StaveText;\n    }\n    constructor(text, position, options = {}) {\n        var _a, _b, _c;\n        super();\n        this.setText(text);\n        this.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);\n        this.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);\n        this.position = position;\n        this.justification = (_c = options.justification) !== null && _c !== void 0 ? _c : TextNote.Justification.CENTER;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        let x;\n        let y;\n        switch (this.position) {\n            case StaveModifierPosition.LEFT:\n            case StaveModifierPosition.RIGHT:\n                y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2;\n                if (this.position === StaveModifierPosition.LEFT) {\n                    x = stave.getX() - this.width - 24;\n                }\n                else {\n                    x = stave.getX() + stave.getWidth() + 24;\n                }\n                break;\n            case StaveModifierPosition.ABOVE:\n            case StaveModifierPosition.BELOW:\n                x = stave.getX();\n                if (this.justification === TextJustification.CENTER) {\n                    x += stave.getWidth() / 2 - this.width / 2;\n                }\n                else if (this.justification === TextJustification.RIGHT) {\n                    x += stave.getWidth() - this.width;\n                }\n                if (this.position === StaveModifierPosition.ABOVE) {\n                    y = stave.getYForTopText(2);\n                }\n                else {\n                    y = stave.getYForBottomText(2);\n                }\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', 'Value Must be in Modifier.Position.');\n        }\n        this.renderText(ctx, x, y + 4);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// Implements time signatures glyphs for staffs\n// See tables.js for the internal time signatures\n// representation\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nconst assertIsValidTimeSig = (timeSpec) => {\n    const numbers = timeSpec.split('/');\n    numbers.forEach((number) => {\n        // Characters consisting in number 0..9, '+', '-', '(' or ')'\n        if (/^[0-9+\\-()]+$/.test(number) === false) {\n            throw new RuntimeError('BadTimeSignature', `Invalid time spec: ${timeSpec}. Must contain valid signatures.`);\n        }\n    });\n};\n/**\n * A TimeSignature is a StaveModifier that can make its appropriate Glyphs directly from\n * a provided \"timeSpec\" such as \"4/4\", \"C|\" (cut time), or even something more advanced\n * such as \"3/4(6/8)\" or \"2/4+5/8\".\n */\nexport class TimeSignature extends StaveModifier {\n    static get CATEGORY() {\n        return Category.TimeSignature;\n    }\n    constructor(timeSpec = '4/4', customPadding = 15, validateArgs = true) {\n        super();\n        this.timeSpec = '4/4';\n        this.line = 0;\n        this.isNumeric = true;\n        this.topStartX = 0;\n        this.botStartX = 0;\n        this.lineShift = 0;\n        this.topText = new Element();\n        this.botText = new Element();\n        this.validateArgs = validateArgs;\n        const padding = customPadding;\n        this.topLine = 1;\n        this.bottomLine = 3;\n        this.setPosition(StaveModifierPosition.BEGIN);\n        this.setTimeSig(timeSpec);\n        this.setPadding(padding);\n    }\n    static getTimeSigCode(key, smallSig = false) {\n        let code = Glyphs.null;\n        switch (key) {\n            case 'C':\n                code = Glyphs.timeSigCommon;\n                break;\n            case 'C|':\n                code = Glyphs.timeSigCutCommon;\n                break;\n            case '+':\n                code = smallSig ? Glyphs.timeSigPlusSmall : Glyphs.timeSigPlus;\n                break;\n            case '-':\n                code = Glyphs.timeSigMinus;\n                break;\n            case '(':\n                code = smallSig ? Glyphs.timeSigParensLeftSmall : Glyphs.timeSigParensLeft;\n                break;\n            case ')':\n                code = smallSig ? Glyphs.timeSigParensRightSmall : Glyphs.timeSigParensRight;\n                break;\n            default:\n                code = String.fromCodePoint(0xe080 + Number(key[0])) /* timeSigN = Glyphs.timeSig0 + N */;\n                break;\n        }\n        return code;\n    }\n    /**\n     * Returns a new TimeSignatureGlyph (a Glyph subclass that knows how to draw both\n     * top and bottom digits along with plus signs etc.)\n     */\n    makeTimeSignatureGlyph(topDigits, botDigits) {\n        // note that 'code' is ignored by TimeSignatureGlyph when rendering.\n        let txt = '';\n        let topWidth = 0;\n        let height = 0;\n        for (let i = 0; i < topDigits.length; ++i) {\n            const code = TimeSignature.getTimeSigCode(topDigits[i], botDigits.length > 0);\n            txt += code;\n        }\n        this.topText.setText(txt);\n        topWidth = this.topText.getWidth();\n        height = this.topText.getHeight();\n        let botWidth = 0;\n        txt = '';\n        for (let i = 0; i < botDigits.length; ++i) {\n            const code = TimeSignature.getTimeSigCode(botDigits[i], true);\n            txt += code;\n        }\n        this.botText.setText(txt);\n        botWidth = this.botText.getWidth();\n        height = Math.max(height, this.botText.getHeight());\n        // If the height of the digits is more than three staff spaces (30), shift half a line line\n        // in order to center the digits on lines 1.5 and 4.5 rather than 2 and 4.\n        this.lineShift = height > 30 ? 0.5 : 0;\n        this.width = Math.max(topWidth, botWidth);\n        this.topStartX = (this.width - topWidth) / 2.0;\n        this.botStartX = (this.width - botWidth) / 2.0;\n    }\n    /**\n     * Set a new time signature specification without changing customPadding, etc.\n     *\n     * The getter for this is `getTimeSpec` not `getTimeSig`.\n     */\n    setTimeSig(timeSpec) {\n        var _a, _b;\n        this.timeSpec = timeSpec;\n        if (timeSpec === 'C' || timeSpec === 'C|') {\n            const code = TimeSignature.getTimeSigCode(timeSpec);\n            this.line = 2;\n            this.text = code;\n            this.isNumeric = false;\n        }\n        else {\n            if (this.validateArgs) {\n                assertIsValidTimeSig(timeSpec);\n            }\n            const parts = timeSpec.split('/');\n            this.line = 0;\n            this.isNumeric = true;\n            this.makeTimeSignatureGlyph((_a = parts[0]) !== null && _a !== void 0 ? _a : '', (_b = parts[1]) !== null && _b !== void 0 ? _b : '');\n        }\n        return this;\n    }\n    /**\n     * Return the timeSpec (such as '4/4' or 'C|' or even '2/4+3/8') of the TimeSignature\n     */\n    getTimeSpec() {\n        return this.timeSpec;\n    }\n    /**\n     * Return the staff line that the TimeSignature sits on.  Generally 0 for numerator/\n     * denominator time signatures such as 3/4 and 2 for cut/common.\n     */\n    getLine() {\n        return this.line;\n    }\n    /**\n     * Set the line number that the TimeSignature sits on.  Half-values are acceptable\n     * for spaces, etc. Can be altered, for instance, for signatures that sit above the\n     * staff in large orchestral scores.\n     */\n    setLine(line) {\n        this.line = line;\n    }\n    /**\n     * Return a boolean on whether this TimeSignature is drawn with one or more numbers\n     * (such as 4/4) or not (as in cut time).\n     */\n    getIsNumeric() {\n        return this.isNumeric;\n    }\n    /**\n     * Set whether this TimeSignature is drawn with one or more numbers.\n     */\n    setIsNumeric(isNumeric) {\n        this.isNumeric = isNumeric;\n    }\n    /**\n     * Draw the time signature on a Stave using its RenderContext.  Both setStave\n     * and setContext must already be run.\n     */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.openGroup('timesignature', this.getAttribute('id'));\n        this.drawAt(ctx, stave, this.x);\n        ctx.closeGroup();\n    }\n    drawAt(ctx, stave, x) {\n        this.setRendered();\n        if (this.isNumeric) {\n            let startX = x + this.topStartX;\n            let y = 0;\n            if (this.botText.getText().length > 0)\n                y = stave.getYForLine(this.topLine - this.lineShift);\n            else\n                y = (stave.getYForLine(this.topLine) + stave.getYForLine(this.bottomLine)) / 2;\n            this.topText.renderText(ctx, startX, y);\n            startX = x + this.botStartX;\n            y = stave.getYForLine(this.bottomLine + this.lineShift);\n            this.botText.renderText(ctx, startX, y);\n        }\n        else {\n            this.renderText(ctx, x - this.x, stave.getYForLine(this.line));\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Clef } from './clef';\nimport { Element } from './element';\nimport { KeySignature } from './keysignature';\nimport { Metrics } from './metrics';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Repetition } from './staverepetition';\nimport { StaveSection } from './stavesection';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { Volta } from './stavevolta';\nimport { Tables } from './tables';\nimport { TimeSignature } from './timesignature';\nimport { Category, isBarline } from './typeguard';\nimport { RuntimeError } from './util';\n// Used by Stave.format() to sort the modifiers at the beginning and end of a stave.\n// The keys (computed property names) match the CATEGORY property in the\n// Barline, Clef, KeySignature, TimeSignature classes.\nconst SORT_ORDER_BEG_MODIFIERS = {\n    [Barline.CATEGORY]: 0,\n    [Clef.CATEGORY]: 1,\n    [KeySignature.CATEGORY]: 2,\n    [TimeSignature.CATEGORY]: 3,\n};\nconst SORT_ORDER_END_MODIFIERS = {\n    [TimeSignature.CATEGORY]: 0,\n    [KeySignature.CATEGORY]: 1,\n    [Barline.CATEGORY]: 2,\n    [Clef.CATEGORY]: 3,\n};\nexport class Stave extends Element {\n    static get CATEGORY() {\n        return Category.Stave;\n    }\n    // This is the sum of the padding that normally goes on left + right of a stave during\n    // drawing. Used to size staves correctly with content width.\n    static get defaultPadding() {\n        return Metrics.get('Stave.padding') + Metrics.get('Stave.endPaddingMax');\n    }\n    // Right padding, used by system if startX is already determined.\n    static get rightPadding() {\n        return Metrics.get('Stave.endPaddingMax');\n    }\n    constructor(x, y, width, options) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.formatted = false;\n        this.startX = x + 5;\n        this.endX = x + width;\n        this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)\n        this.measure = 0;\n        this.clef = 'treble';\n        this.endClef = undefined;\n        this.options = Object.assign({ verticalBarWidth: 10, numLines: 5, leftBar: true, rightBar: true, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, spaceAboveStaffLn: 4, spaceBelowStaffLn: 4, topTextPosition: 1, bottomTextPosition: 4, lineConfig: [] }, options);\n        this.bounds = { x: this.x, y: this.y, w: this.width, h: 0 };\n        this.defaultLedgerLineStyle = { strokeStyle: '#444', lineWidth: 2 };\n        this.resetLines();\n        // beg bar\n        this.addModifier(new Barline(this.options.leftBar ? BarlineType.SINGLE : BarlineType.NONE));\n        // end bar\n        this.addEndModifier(new Barline(this.options.rightBar ? BarlineType.SINGLE : BarlineType.NONE));\n    }\n    /** Set default style for ledger lines. */\n    setDefaultLedgerLineStyle(style) {\n        this.defaultLedgerLineStyle = style;\n    }\n    /** Get default style for ledger lines. */\n    getDefaultLedgerLineStyle() {\n        return Object.assign(Object.assign({}, this.getStyle()), this.defaultLedgerLineStyle);\n    }\n    space(spacing) {\n        return this.options.spacingBetweenLinesPx * spacing;\n    }\n    resetLines() {\n        this.options.lineConfig = [];\n        for (let i = 0; i < this.options.numLines; i++) {\n            this.options.lineConfig.push({ visible: true });\n        }\n        this.height = (this.options.numLines + this.options.spaceAboveStaffLn) * this.options.spacingBetweenLinesPx;\n        this.options.bottomTextPosition = this.options.numLines;\n    }\n    setNoteStartX(x) {\n        if (!this.formatted)\n            this.format();\n        this.startX = x;\n        return this;\n    }\n    getNoteStartX() {\n        if (!this.formatted)\n            this.format();\n        return this.startX;\n    }\n    getNoteEndX() {\n        if (!this.formatted)\n            this.format();\n        return this.endX;\n    }\n    getTieStartX() {\n        return this.startX;\n    }\n    getTieEndX() {\n        return this.endX;\n    }\n    getNumLines() {\n        return this.options.numLines;\n    }\n    setNumLines(n) {\n        this.options.numLines = n;\n        this.resetLines();\n        return this;\n    }\n    getTopLineTopY() {\n        return this.getYForLine(0);\n    }\n    getBottomLineBottomY() {\n        var _a;\n        return this.getYForLine(this.getNumLines() - 1) + ((_a = this.getStyle().lineWidth) !== null && _a !== void 0 ? _a : 1);\n    }\n    setX(x) {\n        const shift = x - this.x;\n        this.formatted = false;\n        this.x = x;\n        this.startX += shift;\n        this.endX += shift;\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const mod = this.modifiers[i];\n            mod.setX(mod.getX() + shift);\n        }\n        return this;\n    }\n    setWidth(width) {\n        this.formatted = false;\n        this.width = width;\n        this.endX = this.x + width;\n        // reset the x position of the end barline (TODO(0xfe): This makes no sense)\n        // this.modifiers[1].setX(this.endX);\n        return this;\n    }\n    /**\n     * Set the measure number of this Stave.\n     */\n    setMeasure(measure) {\n        this.measure = measure;\n        return this;\n    }\n    /**\n     * Return the measure number of this Stave.\n     */\n    getMeasure() {\n        return this.measure;\n    }\n    /**\n     * Gets the pixels to shift from the beginning of the stave\n     * following the modifier at the provided index\n     * @param  {Number} index The index from which to determine the shift\n     * @return {Number}       The amount of pixels shifted\n     */\n    getModifierXShift(index = 0) {\n        if (typeof index !== 'number') {\n            throw new RuntimeError('InvalidIndex', 'Must be of number type');\n        }\n        if (!this.formatted)\n            this.format();\n        if (this.getModifiers(StaveModifierPosition.BEGIN).length === 1) {\n            return 0;\n        }\n        // for right position modifiers zero shift seems correct, see 'Volta + Modifier Measure Test'\n        if (this.modifiers[index].getPosition() === StaveModifierPosition.RIGHT) {\n            return 0;\n        }\n        let startX = this.startX - this.x;\n        const begBarline = this.modifiers[0];\n        if (begBarline.getType() === BarlineType.REPEAT_BEGIN && startX > begBarline.getWidth()) {\n            startX -= begBarline.getWidth();\n        }\n        return startX;\n    }\n    /** Coda & Segno Symbol functions */\n    setRepetitionType(type, yShift = 0) {\n        this.modifiers.push(new Repetition(type, this.x, yShift));\n        return this;\n    }\n    // Volta functions\n    setVoltaType(type, label, y) {\n        this.modifiers.push(new Volta(type, label, this.x, y));\n        return this;\n    }\n    // Section functions\n    setSection(section, y, xOffset = 0, fontSize, drawRect = true) {\n        const staveSection = new StaveSection(section).setYShift(y).setXShift(xOffset).setDrawRect(drawRect);\n        if (fontSize) {\n            staveSection.setFontSize(fontSize);\n        }\n        this.addModifier(staveSection);\n        return this;\n    }\n    // Tempo functions\n    setTempo(tempo, y) {\n        this.modifiers.push(new StaveTempo(tempo, this.x, y));\n        return this;\n    }\n    // Text functions\n    setStaveText(text, position, options = {}) {\n        this.modifiers.push(new StaveText(text, position, options));\n        return this;\n    }\n    getSpacingBetweenLines() {\n        return this.options.spacingBetweenLinesPx;\n    }\n    getBoundingBox() {\n        return new BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);\n    }\n    getBottomY() {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const scoreBottom = this.getYForLine(options.numLines) + options.spaceBelowStaffLn * spacing;\n        return scoreBottom;\n    }\n    getBottomLineY() {\n        return this.getYForLine(this.options.numLines);\n    }\n    // This returns\n    /** @returns the y for the *center* of a staff line */\n    getYForLine(line) {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        const y = this.y + line * spacing + headroom * spacing;\n        return y;\n    }\n    getLineForY(y) {\n        // Does the reverse of getYForLine - somewhat dumb and just calls\n        // getYForLine until the right value is reaches\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        return (y - this.y) / spacing - headroom;\n    }\n    getYForTopText(line = 0) {\n        return this.getYForLine(-line - this.options.topTextPosition);\n    }\n    getYForBottomText(line = 0) {\n        return this.getYForLine(this.options.bottomTextPosition + line);\n    }\n    getYForNote(line) {\n        const options = this.options;\n        const spacing = options.spacingBetweenLinesPx;\n        const headroom = options.spaceAboveStaffLn;\n        return this.y + headroom * spacing + 5 * spacing - line * spacing;\n    }\n    getYForGlyphs() {\n        return this.getYForLine(3);\n    }\n    // This method adds a stave modifier to the stave. Note that the first two\n    // modifiers (BarLines) are automatically added upon construction.\n    addModifier(modifier, position) {\n        if (position !== undefined) {\n            modifier.setPosition(position);\n        }\n        modifier.setStave(this);\n        this.formatted = false;\n        this.modifiers.push(modifier);\n        return this;\n    }\n    addEndModifier(modifier) {\n        this.addModifier(modifier, StaveModifierPosition.END);\n        return this;\n    }\n    // Bar Line functions\n    setBegBarType(type) {\n        // Only valid bar types at beginning of stave is none, single or begin repeat\n        const { SINGLE, REPEAT_BEGIN, NONE } = BarlineType;\n        if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {\n            this.modifiers[0].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setEndBarType(type) {\n        // Repeat end not valid at end of stave\n        if (type !== BarlineType.REPEAT_BEGIN) {\n            this.modifiers[1].setType(type);\n            this.formatted = false;\n        }\n        return this;\n    }\n    setClef(clefSpec, size, annotation, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        if (position === StaveModifierPosition.END) {\n            this.endClef = clefSpec;\n        }\n        else {\n            this.clef = clefSpec;\n        }\n        const clefs = this.getModifiers(position, Clef.CATEGORY);\n        if (clefs.length === 0) {\n            this.addClef(clefSpec, size, annotation, position);\n        }\n        else {\n            clefs[0].setType(clefSpec, size, annotation);\n        }\n        return this;\n    }\n    getClef() {\n        return this.clef;\n    }\n    setEndClef(clefSpec, size, annotation) {\n        this.setClef(clefSpec, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    getEndClef() {\n        return this.endClef;\n    }\n    setKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const keySignatures = this.getModifiers(position, KeySignature.CATEGORY);\n        if (keySignatures.length === 0) {\n            this.addKeySignature(keySpec, cancelKeySpec, position);\n        }\n        else {\n            keySignatures[0].setKeySig(keySpec, cancelKeySpec);\n        }\n        return this;\n    }\n    setEndKeySignature(keySpec, cancelKeySpec) {\n        this.setKeySignature(keySpec, cancelKeySpec, StaveModifierPosition.END);\n        return this;\n    }\n    setTimeSignature(timeSpec, customPadding, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        const timeSignatures = this.getModifiers(position, TimeSignature.CATEGORY);\n        if (timeSignatures.length === 0) {\n            this.addTimeSignature(timeSpec, customPadding, position);\n        }\n        else {\n            timeSignatures[0].setTimeSig(timeSpec);\n        }\n        return this;\n    }\n    setEndTimeSignature(timeSpec, customPadding) {\n        this.setTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a key signature to the stave.\n     *\n     * Example:\n     * `stave.addKeySignature('Db');`\n     * @param keySpec new key specification `[A-G][b|#]?`\n     * @param cancelKeySpec\n     * @param position\n     * @returns\n     */\n    addKeySignature(keySpec, cancelKeySpec, position) {\n        if (position === undefined) {\n            position = StaveModifierPosition.BEGIN;\n        }\n        this.addModifier(new KeySignature(keySpec, cancelKeySpec).setPosition(position), position);\n        return this;\n    }\n    /**\n     * Add a clef to the stave.\n     *\n     * Example:\n     *\n     * stave.addClef('treble')\n     * @param clef clef (treble|bass|...) see {@link Clef.types}\n     * @param size\n     * @param annotation\n     * @param position\n     * @returns\n     */\n    addClef(clef, size, annotation, position) {\n        if (position === undefined || position === StaveModifierPosition.BEGIN) {\n            this.clef = clef;\n        }\n        else if (position === StaveModifierPosition.END) {\n            this.endClef = clef;\n        }\n        this.addModifier(new Clef(clef, size, annotation), position);\n        return this;\n    }\n    addEndClef(clef, size, annotation) {\n        this.addClef(clef, size, annotation, StaveModifierPosition.END);\n        return this;\n    }\n    /**\n     * Add a time signature to the stave\n     *\n     * Example:\n     *\n     * `stave.addTimeSignature('4/4');`\n     * @param timeSpec time signature specification `(C\\||C|\\d\\/\\d)`\n     * @param customPadding\n     * @param position\n     * @returns\n     */\n    addTimeSignature(timeSpec, customPadding, position) {\n        this.addModifier(new TimeSignature(timeSpec, customPadding), position);\n        return this;\n    }\n    addEndTimeSignature(timeSpec, customPadding) {\n        this.addTimeSignature(timeSpec, customPadding, StaveModifierPosition.END);\n        return this;\n    }\n    // Deprecated\n    addTrebleGlyph() {\n        this.addClef('treble');\n        return this;\n    }\n    /**\n     * @param position\n     * @param category\n     * @returns array of StaveModifiers that match the provided position and category.\n     */\n    getModifiers(position, category) {\n        const noPosition = position === undefined;\n        const noCategory = category === undefined;\n        if (noPosition && noCategory) {\n            return this.modifiers; // Should this be [...this.modifiers]?\n        }\n        else if (noPosition) {\n            // A category was provided.\n            return this.modifiers.filter((m) => category === m.getCategory());\n        }\n        else if (noCategory) {\n            // A position was provided.\n            return this.modifiers.filter((m) => position === m.getPosition());\n        }\n        else {\n            // Both position and category were provided!\n            return this.modifiers.filter((m) => position === m.getPosition() && category === m.getCategory());\n        }\n    }\n    /**\n     * Use the modifier's `getCategory()` as a key for the `order` array.\n     * The retrieved value is used to sort modifiers from left to right (0 to to 3).\n     */\n    sortByCategory(items, order) {\n        for (let i = items.length - 1; i >= 0; i--) {\n            for (let j = 0; j < i; j++) {\n                if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {\n                    const temp = items[j];\n                    items[j] = items[j + 1];\n                    items[j + 1] = temp;\n                }\n            }\n        }\n    }\n    format() {\n        var _a, _b, _c, _d;\n        const begBarline = this.modifiers[0];\n        const endBarline = this.modifiers[1];\n        const begModifiers = this.getModifiers(StaveModifierPosition.BEGIN);\n        const endModifiers = this.getModifiers(StaveModifierPosition.END);\n        this.sortByCategory(begModifiers, SORT_ORDER_BEG_MODIFIERS);\n        this.sortByCategory(endModifiers, SORT_ORDER_END_MODIFIERS);\n        if (begModifiers.length > 1 && begBarline.getType() === BarlineType.REPEAT_BEGIN) {\n            begModifiers.push(begModifiers.splice(0, 1)[0]);\n            begModifiers.splice(0, 0, new Barline(BarlineType.SINGLE));\n        }\n        if (endModifiers.indexOf(endBarline) > 0) {\n            endModifiers.splice(0, 0, new Barline(BarlineType.NONE));\n        }\n        let width;\n        let padding;\n        let modifier;\n        let offset = 0;\n        let x = this.x;\n        for (let i = 0; i < begModifiers.length; i++) {\n            modifier = begModifiers[i];\n            padding = modifier.getPadding(i + offset);\n            width = modifier.getWidth();\n            x += padding;\n            modifier.setX(x);\n            x += width;\n            if (padding + width === 0)\n                offset--;\n        }\n        this.startX = x;\n        x = this.x + this.width;\n        const widths = {\n            left: 0,\n            right: 0,\n            paddingRight: 0,\n            paddingLeft: 0,\n        };\n        let lastBarlineIdx = 0;\n        for (let i = 0; i < endModifiers.length; i++) {\n            modifier = endModifiers[i];\n            lastBarlineIdx = isBarline(modifier) ? i : lastBarlineIdx;\n            widths.right = 0;\n            widths.left = 0;\n            widths.paddingRight = 0;\n            widths.paddingLeft = 0;\n            const layoutMetrics = modifier.getLayoutMetrics();\n            if (layoutMetrics) {\n                if (i !== 0) {\n                    widths.right = (_a = layoutMetrics.xMax) !== null && _a !== void 0 ? _a : 0;\n                    widths.paddingRight = (_b = layoutMetrics.paddingRight) !== null && _b !== void 0 ? _b : 0;\n                }\n                widths.left = -((_c = layoutMetrics.xMin) !== null && _c !== void 0 ? _c : 0);\n                widths.paddingLeft = (_d = layoutMetrics.paddingLeft) !== null && _d !== void 0 ? _d : 0;\n                if (i === endModifiers.length - 1) {\n                    widths.paddingLeft = 0;\n                }\n            }\n            else {\n                widths.paddingRight = modifier.getPadding(i - lastBarlineIdx);\n                if (i !== 0) {\n                    widths.right = modifier.getWidth();\n                }\n                if (i === 0) {\n                    widths.left = modifier.getWidth();\n                }\n            }\n            x -= widths.paddingRight;\n            x -= widths.right;\n            modifier.setX(x);\n            x -= widths.left;\n            x -= widths.paddingLeft;\n        }\n        this.endX = endModifiers.length === 1 ? this.x + this.width : x;\n        this.formatted = true;\n    }\n    /**\n     * All drawing functions below need the context to be set.\n     */\n    draw() {\n        var _a;\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.openGroup('stave', this.getAttribute('id'));\n        if (!this.formatted)\n            this.format();\n        const numLines = this.options.numLines;\n        const width = this.width;\n        const x = this.x;\n        let y;\n        const lineWidth = (_a = this.getStyle().lineWidth) !== null && _a !== void 0 ? _a : 1;\n        const lineWidthCorrection = lineWidth % 2 === 0 ? 0 : 0.5;\n        // Render lines\n        for (let line = 0; line < numLines; line++) {\n            y = this.getYForLine(line);\n            if (this.options.lineConfig[line].visible) {\n                ctx.beginPath();\n                ctx.moveTo(x, y + lineWidthCorrection);\n                ctx.lineTo(x + width, y + lineWidthCorrection);\n                ctx.stroke();\n            }\n        }\n        ctx.closeGroup();\n        // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            modifier.setContext(ctx);\n            modifier.setStave(this);\n            modifier.drawWithStyle();\n        }\n        // Render measure numbers\n        if (this.measure > 0) {\n            ctx.setFont(this.fontInfo);\n            const textWidth = ctx.measureText('' + this.measure).width;\n            y = this.getYForTopText(0) + 3;\n            ctx.fillText('' + this.measure, this.x - textWidth / 2, y);\n        }\n    }\n    getVerticalBarWidth() {\n        return this.options.verticalBarWidth;\n    }\n    /**\n     * Get the current configuration for the Stave.\n     * @return {Array} An array of configuration objects.\n     */\n    getConfigForLines() {\n        return this.options.lineConfig;\n    }\n    /**\n     * Configure properties of the lines in the Stave\n     * @param lineNumber The index of the line to configure.\n     * @param lineConfig An configuration object for the specified line.\n     * @throws RuntimeError \"StaveConfigError\" When the specified line number is out of\n     *   range of the number of lines specified in the constructor.\n     */\n    setConfigForLine(lineNumber, lineConfig) {\n        if (lineNumber >= this.options.numLines || lineNumber < 0) {\n            throw new RuntimeError('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');\n        }\n        if (lineConfig.visible === undefined) {\n            throw new RuntimeError('StaveConfigError', \"The line configuration object is missing the 'visible' property.\");\n        }\n        if (typeof lineConfig.visible !== 'boolean') {\n            throw new RuntimeError('StaveConfigError', \"The line configuration objects 'visible' property must be true or false.\");\n        }\n        this.options.lineConfig[lineNumber] = lineConfig;\n        return this;\n    }\n    /**\n     * Set the staff line configuration array for all of the lines at once.\n     * @param linesConfiguration An array of line configuration objects.  These objects\n     *   are of the same format as the single one passed in to setLineConfiguration().\n     *   The caller can set null for any line config entry if it is desired that the default be used\n     * @throws RuntimeError \"StaveConfigError\" When the lines_configuration array does not have\n     *   exactly the same number of elements as the numLines configuration object set in\n     *   the constructor.\n     */\n    setConfigForLines(linesConfiguration) {\n        if (linesConfiguration.length !== this.options.numLines) {\n            throw new RuntimeError('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');\n        }\n        // Make sure the defaults are present in case an incomplete set of\n        //  configuration options were supplied.\n        for (const lineConfig in linesConfiguration) {\n            // Allow '{}' to be used if the caller just wants the default for a particular node.\n            if (linesConfiguration[lineConfig].visible === undefined) {\n                linesConfiguration[lineConfig] = this.options.lineConfig[lineConfig];\n            }\n            this.options.lineConfig[lineConfig] = Object.assign(Object.assign({}, this.options.lineConfig[lineConfig]), linesConfiguration[lineConfig]);\n        }\n        this.options.lineConfig = linesConfiguration;\n        return this;\n    }\n    static formatBegModifiers(staves) {\n        const adjustCategoryStartX = (category) => {\n            let minStartX = 0;\n            // Calculate min start X for the category\n            staves.forEach((stave) => {\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                // Consider only the first instance\n                if (modifiers.length > 0 && modifiers[0].getX() > minStartX)\n                    minStartX = modifiers[0].getX();\n            });\n            let adjustX = 0;\n            staves.forEach((stave) => {\n                adjustX = 0;\n                const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, category);\n                // Calculate adjustement required for the stave\n                modifiers.forEach((modifier) => {\n                    if (minStartX - modifier.getX() > adjustX)\n                        adjustX = minStartX - modifier.getX();\n                });\n                const allModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n                let bAdjust = false;\n                // Apply adjustment to all the modifiers in and beyond the category\n                allModifiers.forEach((modifier) => {\n                    if (modifier.getCategory() === category)\n                        bAdjust = true;\n                    if (bAdjust && adjustX > 0)\n                        modifier.setX(modifier.getX() + adjustX);\n                });\n                // Apply adjustment also to note start.\n                stave.setNoteStartX(stave.getNoteStartX() + adjustX);\n            });\n        };\n        // Make sure that staves are formatted\n        staves.forEach((stave) => {\n            if (!stave.formatted)\n                stave.format();\n        });\n        // Align Clefs\n        adjustCategoryStartX(Category.Clef);\n        // Align key signatures\n        adjustCategoryStartX(Category.KeySignature);\n        // Align time signatures\n        adjustCategoryStartX(Category.TimeSignature);\n        let maxX = 0;\n        // align note start\n        staves.forEach((stave) => {\n            if (stave.getNoteStartX() > maxX)\n                maxX = stave.getNoteStartX();\n        });\n        staves.forEach((stave) => {\n            stave.setNoteStartX(maxX);\n        });\n        maxX = 0;\n        // align REPEAT_BEGIN\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() === BarlineType.REPEAT_BEGIN)\n                    if (modifier.getX() > maxX)\n                        maxX = modifier.getX();\n            });\n        });\n        staves.forEach((stave) => {\n            const modifiers = stave.getModifiers(StaveModifierPosition.BEGIN, Category.Barline);\n            modifiers.forEach((modifier) => {\n                if (modifier.getType() === BarlineType.REPEAT_BEGIN)\n                    modifier.setX(maxX);\n            });\n        });\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n    }\n    let xShift = 3;\n    let variableWidth = 3.5; // Width for avoiding anti-aliasing width issues\n    const thickLineOffset = 2; // For aesthetics\n    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        xShift = -5; // Flips the side of the thin line\n        variableWidth = 3;\n    }\n    // Thin line\n    ctx.fillRect(topX + xShift, topY, 1, botY - topY);\n    // Thick line\n    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\n/** StaveConnector implements the connector lines between staves of a system. */\nexport class StaveConnector extends Element {\n    static get CATEGORY() {\n        return Category.StaveConnector;\n    }\n    constructor(topStave, bottomStave) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        this.topStave = topStave;\n        this.bottomStave = bottomStave;\n        this.type = StaveConnector.type.DOUBLE;\n        // 1. Offset Bold Double Left to align with offset Repeat Begin bars\n        // 2. Offset BRACE type not to overlap with another StaveConnector\n        this.xShift = 0;\n        this.texts = [];\n    }\n    /**\n     * Set type.\n     * @param type see {@link StaveConnector.type} & {@link StaveConnector.typeString}\n     */\n    setType(type) {\n        const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n        // Be certain that the type is a valid type:\n        if (Object.values(StaveConnector.type).includes(newType)) {\n            this.type = newType;\n        }\n        return this;\n    }\n    /**\n     * Get type.\n     * @returns number {@link StaveConnector.type}\n     */\n    getType() {\n        return this.type;\n    }\n    /** Set optional associated Text. */\n    setText(text, options = {}) {\n        var _a, _b;\n        const textElement = new Element('StaveConnector.text');\n        textElement.setText(text);\n        textElement.setXShift((_a = options.shiftX) !== null && _a !== void 0 ? _a : 0);\n        textElement.setYShift((_b = options.shiftY) !== null && _b !== void 0 ? _b : 0);\n        this.texts.push(textElement);\n        return this;\n    }\n    /** Render connector and associated text. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let topY = this.topStave.getYForLine(0);\n        let botY = this.bottomStave.getYForLine(this.bottomStave.getNumLines() - 1) + this.thickness;\n        let width = 3;\n        let topX = this.topStave.getX();\n        const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||\n            this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n            this.type === StaveConnector.type.THIN_DOUBLE;\n        if (isRightSidedConnector) {\n            topX = this.topStave.getX() + this.topStave.getWidth();\n        }\n        let attachmentHeight = botY - topY;\n        const element = new Element();\n        switch (this.type) {\n            case StaveConnector.type.SINGLE:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_LEFT:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_RIGHT:\n                width = 1;\n                break;\n            case StaveConnector.type.DOUBLE:\n                topX -= 5;\n                topY -= this.thickness;\n                attachmentHeight += 0.5;\n                break;\n            case StaveConnector.type.BRACE: {\n                width = 12;\n                // May need additional code to draw brace\n                const x1 = this.topStave.getX() - 2 + this.xShift;\n                const y1 = topY;\n                const x3 = x1;\n                const y3 = botY;\n                const x2 = x1 - width;\n                const y2 = y1 + attachmentHeight / 2.0;\n                const cpx1 = x2 - 0.9 * width;\n                const cpy1 = y1 + 0.2 * attachmentHeight;\n                const cpx2 = x1 + 1.1 * width;\n                const cpy2 = y2 - 0.135 * attachmentHeight;\n                const cpx3 = cpx2;\n                const cpy3 = y2 + 0.135 * attachmentHeight;\n                const cpx4 = cpx1;\n                const cpy4 = y3 - 0.2 * attachmentHeight;\n                const cpx5 = x2 - width;\n                const cpy5 = cpy4;\n                const cpx6 = x1 + 0.4 * width;\n                const cpy6 = y2 + 0.135 * attachmentHeight;\n                const cpx7 = cpx6;\n                const cpy7 = y2 - 0.135 * attachmentHeight;\n                const cpx8 = cpx5;\n                const cpy8 = cpy1;\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n                ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n                ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n                ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n                ctx.fill();\n                ctx.stroke();\n                break;\n            }\n            case StaveConnector.type.BRACKET:\n                topY -= 6;\n                botY += 6;\n                attachmentHeight = botY - topY;\n                element.setText(Glyphs.bracketTop);\n                element.renderText(ctx, topX - 5, topY);\n                element.setText(Glyphs.bracketBottom);\n                element.renderText(ctx, topX - 5, botY);\n                topX -= 5;\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_LEFT:\n                drawBoldDoubleLine(ctx, this.type, topX + this.xShift, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n                drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.THIN_DOUBLE:\n                width = 1;\n                attachmentHeight -= this.thickness;\n                break;\n            case StaveConnector.type.NONE:\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n        }\n        if (this.type !== StaveConnector.type.BRACE &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n            this.type !== StaveConnector.type.NONE) {\n            ctx.fillRect(topX, topY, width, attachmentHeight);\n        }\n        // If the connector is a thin double barline, draw the paralell line\n        if (this.type === StaveConnector.type.THIN_DOUBLE) {\n            ctx.fillRect(topX - 3, topY, width, attachmentHeight);\n        }\n        // Add stave connector text\n        for (let i = 0; i < this.texts.length; i++) {\n            const textElement = this.texts[i];\n            const x = this.topStave.getX() - textElement.getWidth() - 24;\n            const y = (this.topStave.getYForLine(0) + this.bottomStave.getBottomLineY()) / 2;\n            textElement.renderText(ctx, x, y + 4);\n        }\n    }\n}\n/**\n * SINGLE_LEFT and SINGLE are the same value for compatibility\n * with older versions of vexflow which didn't have right sided\n * stave connectors.\n */\nStaveConnector.type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n};\n/**\n * Connector type:\n * * \"singleRight\"\n * * \"singleLeft\"\n * * \"single\"\n * * \"double\"\n * * \"brace\"\n * * \"bracket\"\n * * \"boldDoubleLeft\"\n * * \"boldDoubleRight\"\n * * \"thinDouble\"\n * * \"none\"\n */\nStaveConnector.typeString = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// A formatter for abstract tickable objects, such as notes, chords,\n// tabs, etc.\nimport { Fraction } from './fraction';\nimport { RuntimeError, sumArray } from './util';\n/**\n * TickContext formats abstract tickable objects, such as notes, chords, tabs, etc.\n *\n * It has a public attribute of `tContexts` which is a parent array of the TickContexts\n * in which this TickContext belongs.\n */\nexport class TickContext {\n    /**\n     * Get the next TickContext from another TickContext, from the `.tContexts` array.\n     */\n    static getNextContext(tContext) {\n        const contexts = tContext.tContexts;\n        const index = contexts.indexOf(tContext);\n        if (index + 1 < contexts.length)\n            return contexts[index + 1];\n    }\n    constructor(options) {\n        var _a;\n        this.preFormatted = false;\n        this.postFormatted = false;\n        this.tickID = (_a = options === null || options === void 0 ? void 0 : options.tickID) !== null && _a !== void 0 ? _a : 0;\n        this.currentTick = new Fraction(0, 1);\n        this.maxTicks = new Fraction(0, 1);\n        this.maxTickable = undefined; // Biggest tickable\n        this.minTicks = undefined; // this can remain null if all tickables have ignoreTicks\n        this.minTickable = undefined;\n        this.padding = 1; // padding on each side (width += padding * 2)\n        this.x = 0;\n        this.xBase = 0; // base x position without xOffset\n        this.xOffset = 0; // xBase and xOffset are an alternative way to describe x (x = xB + xO)\n        this.tickables = []; // Notes, tabs, chords, lyrics.\n        this.tickablesByVoice = {}; // Tickables indexed by voice number (as string)\n        // Formatting metrics\n        this.notePx = 0; // width of widest note in this context\n        this.glyphPx = 0; // width of glyph (note head)\n        this.leftDisplacedHeadPx = 0; // Extra left pixels for displaced notes\n        this.rightDisplacedHeadPx = 0; // Extra right pixels for displaced notes\n        this.modLeftPx = 0; // Left modifier pixels\n        this.modRightPx = 0; // Right modifier pixels\n        this.totalLeftPx = 0; // Total left pixels\n        this.totalRightPx = 0; // Total right pixels\n        this.tContexts = []; // Parent array of tick contexts\n        this.width = 0; // in pixels\n        this.formatterMetrics = {\n            // The freedom of a tickcontext is the distance it can move without colliding\n            // with neighboring elements. A formatter can set these values during its\n            // formatting pass, which a different formatter can then use to fine tune.\n            freedom: { left: 0, right: 0 },\n        };\n    }\n    getTickID() {\n        return this.tickID;\n    }\n    getX() {\n        return this.x;\n    }\n    setX(x) {\n        this.x = x;\n        this.xBase = x;\n        this.xOffset = 0;\n        return this;\n    }\n    getXBase() {\n        return this.xBase;\n    } // use of xBase and xOffset is optional, avoids offset creep\n    setXBase(xBase) {\n        this.xBase = xBase;\n        this.x = xBase + this.xOffset;\n    }\n    getXOffset() {\n        return this.xOffset;\n    }\n    setXOffset(xOffset) {\n        this.xOffset = xOffset;\n        this.x = this.xBase + xOffset;\n    }\n    getWidth() {\n        return this.width + this.padding * 2;\n    }\n    setPadding(padding) {\n        this.padding = padding;\n        return this;\n    }\n    getMaxTicks() {\n        return this.maxTicks;\n    }\n    getMinTicks() {\n        return this.minTicks;\n    }\n    getMaxTickable() {\n        return this.maxTickable;\n    }\n    getMinTickable() {\n        return this.minTickable;\n    }\n    getTickables() {\n        return this.tickables;\n    }\n    /**\n     * Introduced on 2020-04-17 as getTickablesForVoice(voiceIndex).\n     *   https://github.com/0xfe/vexflow/blame/dc97b0cc5bb93171c0038638c34362dc958222ca/src/tickcontext.js#L63\n     * Renamed on 2021-08-05 to getTickableForVoice(voiceIndex). Method renamed to singular, since it returns one Tickable.\n     */\n    getTickableForVoice(voiceIndex) {\n        return this.tickablesByVoice[voiceIndex];\n    }\n    getTickablesByVoice() {\n        return this.tickablesByVoice;\n    }\n    getCenterAlignedTickables() {\n        return this.tickables.filter((tickable) => tickable.isCenterAligned());\n    }\n    /** Gets widths context, note and left/right modifiers for formatting. */\n    getMetrics() {\n        const { width, glyphPx, notePx, leftDisplacedHeadPx, rightDisplacedHeadPx, modLeftPx, modRightPx, totalLeftPx, totalRightPx, } = this;\n        return {\n            width, // Width of largest tickable in context\n            glyphPx, // Width of largest glyph (note head)\n            notePx, // Width of notehead + stem\n            leftDisplacedHeadPx, // Left modifiers\n            rightDisplacedHeadPx, // Right modifiers\n            modLeftPx,\n            modRightPx,\n            totalLeftPx,\n            totalRightPx,\n        };\n    }\n    getCurrentTick() {\n        return this.currentTick;\n    }\n    setCurrentTick(tick) {\n        this.currentTick = tick;\n        this.preFormatted = false;\n    }\n    addTickable(tickable, voiceIndex) {\n        if (!tickable) {\n            throw new RuntimeError('BadArgument', 'Invalid tickable added.');\n        }\n        if (!tickable.shouldIgnoreTicks()) {\n            const ticks = tickable.getTicks();\n            if (ticks.greaterThan(this.maxTicks)) {\n                this.maxTicks = ticks.clone();\n                this.maxTickable = tickable;\n            }\n            if (this.minTicks === undefined) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n            else if (ticks.lessThan(this.minTicks)) {\n                this.minTicks = ticks.clone();\n                this.minTickable = tickable;\n            }\n        }\n        tickable.setTickContext(this);\n        this.tickables.push(tickable);\n        this.tickablesByVoice[voiceIndex !== null && voiceIndex !== void 0 ? voiceIndex : 0] = tickable;\n        this.preFormatted = false;\n        return this;\n    }\n    preFormat() {\n        var _a;\n        if (this.preFormatted)\n            return this;\n        for (let i = 0; i < this.tickables.length; ++i) {\n            const tickable = this.tickables[i];\n            tickable.preFormat();\n            const metrics = tickable.getMetrics();\n            // Maintain max displaced head pixels from all tickables in the context\n            this.leftDisplacedHeadPx = Math.max(this.leftDisplacedHeadPx, metrics.leftDisplacedHeadPx);\n            this.rightDisplacedHeadPx = Math.max(this.rightDisplacedHeadPx, metrics.rightDisplacedHeadPx);\n            // Maintain the widest note for all tickables in the context\n            this.notePx = Math.max(this.notePx, metrics.notePx);\n            // Maintain the widest note head\n            this.glyphPx = Math.max(this.glyphPx, (_a = metrics.glyphWidth) !== null && _a !== void 0 ? _a : 0);\n            // Total modifier shift\n            this.modLeftPx = Math.max(this.modLeftPx, metrics.modLeftPx);\n            this.modRightPx = Math.max(this.modRightPx, metrics.modRightPx);\n            // Total shift\n            this.totalLeftPx = Math.max(this.totalLeftPx, metrics.modLeftPx + metrics.leftDisplacedHeadPx);\n            this.totalRightPx = Math.max(this.totalRightPx, metrics.modRightPx + metrics.rightDisplacedHeadPx);\n            // Recalculate the tick context total width\n            this.width = this.notePx + this.totalLeftPx + this.totalRightPx;\n        }\n        return this;\n    }\n    postFormat() {\n        if (this.postFormatted)\n            return this;\n        this.postFormatted = true;\n        return this;\n    }\n    getFormatterMetrics() {\n        return this.formatterMetrics;\n    }\n    /**\n     * Move this tick context by `shift` pixels rightward, and adjust the\n     * freedom on adjacent tickcontexts.\n     * @param shift pixels to shift rightward.\n     * @param prev the previous TickContext, whose right freedom will be increased by `shift`.\n     * @param next the next TickContext, whose left freedom will be decreased by `shift`.\n     */\n    move(shift, prev, next) {\n        this.setX(this.getX() + shift);\n        this.getFormatterMetrics().freedom.left += shift;\n        this.getFormatterMetrics().freedom.right -= shift;\n        if (prev)\n            prev.getFormatterMetrics().freedom.right += shift;\n        if (next)\n            next.getFormatterMetrics().freedom.left -= shift;\n    }\n    /**\n     * Return the total cost of space deviations from formatter metrics for\n     * each tickable in the context.  Used by formatters.\n     *\n     * Since FormatterMetrics.space.deviation is the amount each tickable is smaller\n     * (negative) or wider (positive) than the mean amount of space allocated to that\n     * duration, a negative return value means the tickables at this position are on average\n     * getting less space than they should, while a positive number means they are getting\n     * more space than they should.\n     */\n    getDeviationCost() {\n        return sumArray(this.tickables.map((t) => t.getFormatterMetrics().space.deviation));\n    }\n    /**\n     * Like getDeviationCost, but averages the cost of space deviations so that TickContexts\n     * with more Tickables are not weighted more heavily.\n     */\n    getAverageDeviationCost() {\n        if (!this.tickables.length)\n            return 0;\n        return this.getDeviationCost() / this.tickables.length;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Beam } from './beam';\nimport { Fraction } from './fraction';\nimport { Metrics } from './metrics';\nimport { ModifierContext } from './modifiercontext';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { Tables } from './tables';\nimport { TickContext } from './tickcontext';\nimport { isNote, isStaveNote } from './typeguard';\nimport { defined, log, midLine, RuntimeError, sumArray } from './util';\nimport { Voice } from './voice';\n/**\n * Create `Alignment`s for each tick in `voices`. Also calculate the\n * total number of ticks in voices.\n */\nfunction createContexts(voices, makeContext, addToContext) {\n    if (voices.length === 0)\n        return {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n    // Initialize tick maps.\n    const tickToContextMap = {};\n    const tickList = [];\n    const contexts = [];\n    const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n    // For each voice, extract notes and create a context for every\n    // new tick that hasn't been seen before.\n    voices.forEach((voice, voiceIndex) => {\n        // Use resolution multiplier as denominator so that no additional expansion\n        // of fractional tick values is needed.\n        const ticksUsed = new Fraction(0, resolutionMultiplier);\n        voice.getTickables().forEach((tickable) => {\n            const integerTicks = ticksUsed.numerator;\n            // If we have no tick context for this tick, create one.\n            if (!tickToContextMap[integerTicks]) {\n                const newContext = makeContext({ tickID: integerTicks });\n                contexts.push(newContext);\n                tickToContextMap[integerTicks] = newContext;\n                // Maintain a list of unique integerTicks.\n                tickList.push(integerTicks);\n            }\n            // Add this tickable to the TickContext.\n            addToContext(tickable, tickToContextMap[integerTicks], voiceIndex);\n            ticksUsed.add(tickable.getTicks());\n        });\n    });\n    return {\n        map: tickToContextMap,\n        array: contexts,\n        list: tickList.sort((a, b) => a - b),\n        resolutionMultiplier,\n    };\n}\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Formatter.DEBUG)\n        log('VexFlow.Formatter', args);\n}\n/**\n * Get the rest line number of the next non-rest note(s).\n * @param notes array of Notes\n * @param currRestLine\n * @param currNoteIndex current note index\n * @param compare if true, return the midpoint between the current rest line and the next rest line\n * @returns a line number, which determines the vertical position of a rest.\n */\nfunction getRestLineForNextNoteGroup(notes, currRestLine, currNoteIndex, compare) {\n    // If no valid next note group, nextRestLine is same as current.\n    let nextRestLine = currRestLine;\n    // Start with the next note and keep going until we find a valid non-rest note group.\n    for (let noteIndex = currNoteIndex + 1; noteIndex < notes.length; noteIndex++) {\n        const note = notes[noteIndex];\n        if (isNote(note) && !note.isRest() && !note.shouldIgnoreTicks()) {\n            nextRestLine = note.getLineForRest();\n            break;\n        }\n    }\n    // Locate the midpoint between two lines.\n    if (compare && currRestLine !== nextRestLine) {\n        const top = Math.max(currRestLine, nextRestLine);\n        const bot = Math.min(currRestLine, nextRestLine);\n        nextRestLine = midLine(top, bot);\n    }\n    return nextRestLine;\n}\n/**\n * Format implements the formatting and layout algorithms that are used\n * to position notes in a voice. The algorithm can align multiple voices both\n * within a stave, and across multiple staves.\n *\n * To do this, the formatter breaks up voices into a grid of rational-valued\n * `ticks`, to which each note is assigned. Then, minimum widths are assigned\n * to each tick based on the widths of the notes and modifiers in that tick. This\n * establishes the smallest amount of space required for each tick.\n *\n * Finally, the formatter distributes the left over space proportionally to\n * all the ticks, setting the `x` values of the notes in each tick.\n *\n * See `tests/formatter_tests.ts` for usage examples. The helper functions included\n * here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.\n */\nexport class Formatter {\n    /**\n     * Helper function to layout \"notes\" one after the other without\n     * regard for proportions. Useful for tests and debugging.\n     */\n    static SimpleFormat(notes, x = 0, { paddingBetween = 10 } = {}) {\n        notes.reduce((accumulator, note) => {\n            note.addToModifierContext(new ModifierContext());\n            const tickContext = new TickContext().addTickable(note).preFormat();\n            const metrics = tickContext.getMetrics();\n            tickContext.setX(accumulator + metrics.totalLeftPx);\n            return accumulator + tickContext.getWidth() + metrics.totalRightPx + paddingBetween;\n        }, x);\n    }\n    /** Helper function to plot formatter debug info. */\n    static plotDebugging(ctx, formatter, xPos, y1, y2, options) {\n        var _a, _b;\n        options = Object.assign({ stavePadding: Metrics.get('Stave.padding') }, options);\n        const x = xPos + options.stavePadding;\n        const contextGaps = formatter.contextGaps;\n        function stroke(x1, x2, color) {\n            ctx.beginPath();\n            ctx.setStrokeStyle(color);\n            ctx.setFillStyle(color);\n            ctx.setLineWidth(1);\n            ctx.fillRect(x1, y1, Math.max(x2 - x1, 0), y2 - y1);\n        }\n        ctx.save();\n        ctx.setFont(Metrics.get('fontFamily'), 8);\n        contextGaps.gaps.forEach((gap) => {\n            stroke(x + gap.x1, x + gap.x2, 'rgba(100,200,100,0.4)');\n            ctx.setFillStyle('green');\n            ctx.fillText(Math.round(gap.x2 - gap.x1).toString(), x + gap.x1, y2 + 12);\n        });\n        ctx.setFillStyle('red');\n        ctx.fillText(`Loss: ${((_a = formatter.totalCost) !== null && _a !== void 0 ? _a : 0).toFixed(2)} Shift: ${((_b = formatter.totalShift) !== null && _b !== void 0 ? _b : 0).toFixed(2)} Gap: ${contextGaps.total.toFixed(2)}`, x - 20, y2 + 27);\n        ctx.restore();\n    }\n    /**\n     * Helper function to format and draw a single voice. Returns a bounding\n     * box for the notation.\n     * @param ctx  the rendering context\n     * @param stave the stave to which to draw (`Stave` or `TabStave`)\n     * @param notes array of `Note` instances (`Note`, `TextNote`, `TabNote`, etc.)\n     * @param params one of below:\n     *    * Setting `autoBeam` only `(context, stave, notes, true)` or\n     *      `(ctx, stave, notes, {autoBeam: true})`\n     *    * Setting `alignRests` a struct is needed `(context, stave, notes, {alignRests: true})`\n     *    * Setting both a struct is needed `(context, stave, notes, {\n     *      autoBeam: true, alignRests: true})`\n     *    * `autoBeam` automatically generates beams for the notes.\n     *    * `alignRests` aligns rests with nearby notes.\n     */\n    static FormatAndDraw(ctx, stave, notes, params) {\n        let options = {\n            autoBeam: false,\n            alignRests: false,\n        };\n        if (typeof params === 'object') {\n            options = Object.assign(Object.assign({}, options), params);\n        }\n        else if (typeof params === 'boolean') {\n            options.autoBeam = params;\n        }\n        // Start by creating a voice and adding all the notes to it.\n        const voice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Then create beams, if requested.\n        const beams = options.autoBeam ? Beam.applyAndGetBeams(voice) : [];\n        // Instantiate a `Formatter` and format the notes.\n        new Formatter()\n            .joinVoices([voice]) // , { alignRests: options.alignRests })\n            .formatToStave([voice], stave, { alignRests: options.alignRests, stave });\n        // Render the voice and beams to the stave.\n        voice.setContext(ctx).setStave(stave).drawWithStyle();\n        beams.forEach((beam) => beam.setContext(ctx).drawWithStyle());\n        // Return the bounding box of the voice.\n        return voice.getBoundingBox();\n    }\n    /**\n     * Helper function to format and draw aligned tab and stave notes in two\n     * separate staves.\n     * @param ctx the rendering context\n     * @param tabstave a `TabStave` instance on which to render `TabNote`s.\n     * @param stave a `Stave` instance on which to render `Note`s.\n     * @param notes array of `Note` instances for the stave (`Note`, `BarNote`, etc.)\n     * @param tabnotes array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)\n     * @param autoBeam automatically generate beams.\n     * @param params a configuration object:\n     *    * `autoBeam` automatically generates beams for the notes.\n     *    * `alignRests` aligns rests with nearby notes.\n     */\n    static FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autoBeam, params) {\n        let opts = {\n            autoBeam,\n            alignRests: false,\n        };\n        if (typeof params === 'object') {\n            opts = Object.assign(Object.assign({}, opts), params);\n        }\n        else if (typeof params === 'boolean') {\n            opts.autoBeam = params;\n        }\n        // Create a `4/4` voice for `notes`.\n        const notevoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(notes);\n        // Create a `4/4` voice for `tabnotes`.\n        const tabvoice = new Voice(Tables.TIME4_4).setMode(Voice.Mode.SOFT).addTickables(tabnotes);\n        // Then create beams, if requested.\n        const beams = opts.autoBeam ? Beam.applyAndGetBeams(notevoice) : [];\n        // Instantiate a `Formatter` and align tab and stave notes.\n        new Formatter()\n            .joinVoices([notevoice]) // , { alignRests: opts.alignRests })\n            .joinVoices([tabvoice])\n            .formatToStave([notevoice, tabvoice], stave, { alignRests: opts.alignRests });\n        // Render voices and beams to staves.\n        notevoice.draw(ctx, stave);\n        tabvoice.draw(ctx, tabstave);\n        beams.forEach((beam) => beam.setContext(ctx).drawWithStyle());\n        // Draw a connector between tab and note staves.\n        new StaveConnector(stave, tabstave).setContext(ctx).drawWithStyle();\n    }\n    /**\n     * Automatically set the vertical position of rests based on previous/next note positions.\n     * @param tickables an array of Tickables.\n     * @param alignAllNotes If `false`, only align rests that are within a group of beamed notes.\n     * @param alignTuplets If `false`, ignores tuplets.\n     */\n    static AlignRestsToNotes(tickables, alignAllNotes, alignTuplets) {\n        tickables.forEach((currTickable, index) => {\n            if (isStaveNote(currTickable) && currTickable.isRest()) {\n                if (currTickable.getTuplet() && !alignTuplets) {\n                    return;\n                }\n                // If activated rests not on default can be rendered as specified.\n                const line = currTickable.getLineForRest();\n                if (line !== 3) {\n                    return;\n                }\n                if (alignAllNotes || currTickable.getBeam()) {\n                    // Align rests with previous/next notes.\n                    const props = currTickable.getKeyProps()[0];\n                    if (index === 0) {\n                        props.line = getRestLineForNextNoteGroup(tickables, props.line, index, false);\n                    }\n                    else if (index > 0 && index < tickables.length) {\n                        // If previous tickable is a rest, use its line number.\n                        const prevTickable = tickables[index - 1];\n                        if (isStaveNote(prevTickable)) {\n                            if (prevTickable.isRest()) {\n                                props.line = prevTickable.getKeyProps()[0].line;\n                            }\n                            else {\n                                const restLine = prevTickable.getLineForRest();\n                                // Get the rest line for next valid non-rest note group.\n                                props.line = getRestLineForNextNoteGroup(tickables, restLine, index, true);\n                            }\n                        }\n                    }\n                    currTickable.setKeyLine(0, props.line);\n                }\n            }\n        });\n    }\n    constructor(options) {\n        this.formatterOptions = Object.assign({ globalSoftmax: false, softmaxFactor: Tables.SOFTMAX_FACTOR, maxIterations: 5 }, options);\n        this.justifyWidth = 0;\n        this.totalCost = 0;\n        this.totalShift = 0;\n        this.durationStats = {};\n        // Minimum width required to render all the notes in the voices.\n        this.minTotalWidth = 0;\n        // This is set to `true` after `minTotalWidth` is calculated.\n        this.hasMinTotalWidth = false;\n        // Arrays of tick and modifier contexts.\n        this.tickContexts = {\n            map: {},\n            array: [],\n            list: [],\n            resolutionMultiplier: 0,\n        };\n        this.modifierContexts = [];\n        // Gaps between contexts, for free movement of notes post\n        // formatting.\n        this.contextGaps = {\n            total: 0,\n            gaps: [],\n        };\n        this.voices = [];\n        this.lossHistory = [];\n    }\n    /**\n     * Find all the rests in each of the `voices` and align them vertically to neighboring notes.\n     *\n     * @param voices\n     * @param alignAllNotes If `false`, only align rests within beamed groups of notes. If `true`, align all rests.\n     */\n    alignRests(voices, alignAllNotes) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format rests');\n        }\n        voices.forEach((voice) => Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes));\n    }\n    /**\n     * Estimate the width required to render 'voices'.  This is done by:\n     * 1. Sum the widths of all the tick contexts\n     * 2. Estimate the padding.\n     * The latter is done by calculating the padding 3 different ways, and taking the\n     * greatest value:\n     * 1. the padding required for unaligned notes in different voices\n     * 2. the padding based on the stddev of the tickable widths\n     * 3. the padding based on the stddev of the tickable durations.\n     *\n     * The last 2 quantities estimate a 'width entropy', where notes might need more\n     * room than the proportional formatting gives them.  A measure of all same duration\n     * and width will need no extra padding, and all these quantities will be\n     * zero in that case.\n     *\n     * Note: joinVoices has to be called before calling preCalculateMinTotalWidth.\n     *\n     * @param voices the voices that contain the notes\n     * @returns the estimated width in pixels\n     */\n    preCalculateMinTotalWidth(voices) {\n        const unalignedPadding = Metrics.get('Stave.unalignedNotePadding');\n        // Calculate additional padding based on 3 methods:\n        // 1) unaligned beats in voices, 2) variance of width, 3) variance of durations\n        let unalignedCtxCount = 0;\n        let wsum = 0;\n        let dsum = 0;\n        const widths = [];\n        const durations = [];\n        // Cache results.\n        if (this.hasMinTotalWidth)\n            return this.minTotalWidth;\n        // Create tick contexts.\n        if (!voices) {\n            throw new RuntimeError('BadArgument', \"'voices' required to run preCalculateMinTotalWidth\");\n        }\n        this.createTickContexts(voices);\n        const { list: contextList, map: contextMap } = this.tickContexts;\n        this.minTotalWidth = 0;\n        // Go through each tick context and calculate total width,\n        // and also accumulate values used in padding hints\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            context.preFormat();\n            // If this TC doesn't have all the voices on it, it's unaligned.\n            // so increment the unaligned padding accumulator\n            if (context.getTickables().length < voices.length) {\n                unalignedCtxCount += 1;\n            }\n            // Calculate the 'width entropy' over all the Tickables.\n            context.getTickables().forEach((t) => {\n                wsum += t.getMetrics().width;\n                dsum += t.getTicks().value();\n                widths.push(t.getMetrics().width);\n                durations.push(t.getTicks().value());\n            });\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n        });\n        this.hasMinTotalWidth = true;\n        // normalized (0-1) STDDEV of widths/durations gives us padding hints.\n        const wavg = wsum > 0 ? wsum / widths.length : 1 / widths.length;\n        const wvar = sumArray(widths.map((ll) => Math.pow(ll - wavg, 2)));\n        const wpads = Math.pow(wvar / widths.length, 0.5) / wavg;\n        const davg = dsum / durations.length;\n        const dvar = sumArray(durations.map((ll) => Math.pow(ll - davg, 2)));\n        const dpads = Math.pow(dvar / durations.length, 0.5) / davg;\n        // Find max of 3 methods pad the width with that\n        const padmax = Math.max(dpads, wpads) * contextList.length * unalignedPadding;\n        const unalignedPad = unalignedPadding * unalignedCtxCount;\n        return this.minTotalWidth + Math.max(unalignedPad, padmax);\n    }\n    /**\n     * Get minimum width required to render all voices. Either `format` or\n     * `preCalculateMinTotalWidth` must be called before this method.\n     */\n    getMinTotalWidth() {\n        if (!this.hasMinTotalWidth) {\n            throw new RuntimeError('NoMinTotalWidth', \"Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'\");\n        }\n        return this.minTotalWidth;\n    }\n    /** Calculate the resolution multiplier for `voices`. */\n    static getResolutionMultiplier(voices) {\n        if (!voices || !voices.length) {\n            throw new RuntimeError('BadArgument', 'No voices to format');\n        }\n        const totalTicks = voices[0].getTotalTicks();\n        const resolutionMultiplier = voices.reduce((accumulator, voice) => {\n            if (!voice.getTotalTicks().equals(totalTicks)) {\n                throw new RuntimeError('TickMismatch', 'Voices should have same total note duration in ticks.');\n            }\n            if (voice.getMode() === Voice.Mode.STRICT && !voice.isComplete()) {\n                throw new RuntimeError('IncompleteVoice', 'Voice does not have enough notes.');\n            }\n            return Math.max(accumulator, Fraction.LCM(accumulator, voice.getResolutionMultiplier()));\n        }, 1);\n        return resolutionMultiplier;\n    }\n    /** Create a `ModifierContext` for each tick in `voices`. */\n    createModifierContexts(voices) {\n        if (voices.length === 0)\n            return;\n        const resolutionMultiplier = Formatter.getResolutionMultiplier(voices);\n        // Initialize tick maps.\n        const tickToContextMap = new Map();\n        const contexts = [];\n        // For each voice, extract notes and create a context for every\n        // new tick that hasn't been seen before.\n        voices.forEach((voice) => {\n            // Use resolution multiplier as denominator so that no additional expansion\n            // of fractional tick values is needed.\n            const ticksUsed = new Fraction(0, resolutionMultiplier);\n            voice.getTickables().forEach((tickable) => {\n                const integerTicks = ticksUsed.numerator;\n                let staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                // If we have no tick context for this tick, create one.\n                if (!staveTickToContextMap) {\n                    tickToContextMap.set(tickable.getStave(), {});\n                    staveTickToContextMap = tickToContextMap.get(tickable.getStave());\n                }\n                if (!(staveTickToContextMap ? staveTickToContextMap[integerTicks] : undefined)) {\n                    const newContext = new ModifierContext();\n                    contexts.push(newContext);\n                    staveTickToContextMap[integerTicks] = newContext;\n                }\n                // Add this tickable to the TickContext.\n                tickable.addToModifierContext(staveTickToContextMap[integerTicks]);\n                ticksUsed.add(tickable.getTicks());\n            });\n        });\n        this.modifierContexts.push({\n            map: tickToContextMap,\n            array: contexts,\n            resolutionMultiplier,\n        });\n    }\n    /**\n     * Create a `TickContext` for each tick in `voices`. Also calculate the\n     * total number of ticks in voices.\n     */\n    createTickContexts(voices) {\n        const fn = (tickable, context, voiceIndex) => context.addTickable(tickable, voiceIndex);\n        const contexts = createContexts(voices, (tick) => new TickContext(tick), fn);\n        this.tickContexts = contexts;\n        const contextArray = this.tickContexts.array;\n        contextArray.forEach((context) => {\n            context.tContexts = contextArray;\n        });\n        return contexts;\n    }\n    /**\n     * Get the AlignmentContexts of TickContexts that were created by createTickContexts.\n     * Returns undefined if createTickContexts has not yet been run.\n     */\n    getTickContexts() {\n        return this.tickContexts;\n    }\n    /**\n     * This is the core formatter logic. Format voices and justify them\n     * to `justifyWidth` pixels. `renderingContext` is required to justify elements\n     * that can't retrieve widths without a canvas. This method sets the `x` positions\n     * of all the tickables/notes in the formatter.\n     */\n    preFormat(justifyWidth = 0, renderingContext, voicesParam, stave) {\n        // Initialize context maps.\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            throw new RuntimeError('NoTickContexts', 'preFormat requires TickContexts');\n        }\n        const { list: contextList, map: contextMap } = contexts;\n        // Reset loss history for evaluator.\n        this.lossHistory = [];\n        // If voices and a stave were provided, set the Stave for each voice\n        // and preFormat to apply Y values to the notes;\n        if (voicesParam && stave) {\n            voicesParam.forEach((voice) => voice.setStave(stave).preFormat());\n        }\n        // Now distribute the ticks to each tick context, and assign them their\n        // own X positions.\n        let x = 0;\n        let shift = 0;\n        this.minTotalWidth = 0;\n        let totalTicks = 0;\n        // Pass 1: Give each note maximum width requested by context.\n        contextList.forEach((tick) => {\n            const context = contextMap[tick];\n            // Make sure that all tickables in this context have calculated their\n            // space requirements.\n            context.preFormat();\n            const width = context.getWidth();\n            this.minTotalWidth += width;\n            const maxTicks = context.getMaxTicks().value();\n            totalTicks += maxTicks;\n            const metrics = context.getMetrics();\n            x = x + shift + metrics.totalLeftPx;\n            context.setX(x);\n            // Calculate shift for the next tick.\n            shift = width - metrics.totalLeftPx;\n        });\n        // Use softmax based on all notes across all staves. (options.globalSoftmax)\n        const { globalSoftmax, softmaxFactor, maxIterations } = this.formatterOptions;\n        const exp = (tick) => Math.pow(softmaxFactor, (contextMap[tick].getMaxTicks().value() / totalTicks));\n        const expTicksUsed = sumArray(contextList.map(exp));\n        this.minTotalWidth = x + shift;\n        this.hasMinTotalWidth = true;\n        // No justification needed. End formatting.\n        if (justifyWidth <= 0)\n            return this.evaluate();\n        // Start justification. Subtract the right extra pixels of the final context because the formatter\n        // justifies based on the context's X position, which is the left-most part of the note head.\n        const firstContext = contextMap[contextList[0]];\n        const lastContext = contextMap[contextList[contextList.length - 1]];\n        // Calculate the \"distance error\" between the tick contexts. The expected distance is the spacing proportional to\n        // the softmax of the ticks.\n        function calculateIdealDistances(adjustedJustifyWidth) {\n            const distances = contextList.map((tick, i) => {\n                const context = contextMap[tick];\n                const voices = context.getTickablesByVoice();\n                let backTickable;\n                if (i > 0) {\n                    const prevContext = contextMap[contextList[i - 1]];\n                    // Go through each tickable and search backwards for another tickable\n                    // in the same voice. If found, use that duration (ticks) to calculate\n                    // the expected distance.\n                    for (let j = i - 1; j >= 0; j--) {\n                        const backTick = contextMap[contextList[j]];\n                        const backVoices = backTick.getTickablesByVoice();\n                        // Look for matching voices between tick contexts.\n                        const matchingVoices = [];\n                        Object.keys(voices).forEach((v) => {\n                            if (backVoices[v]) {\n                                matchingVoices.push(v);\n                            }\n                        });\n                        if (matchingVoices.length > 0) {\n                            // Found matching voices, get largest duration\n                            let maxTicks = 0;\n                            let maxNegativeShiftPx = Infinity;\n                            let expectedDistance = 0;\n                            matchingVoices.forEach((v) => {\n                                const ticks = backVoices[v].getTicks().value();\n                                if (ticks > maxTicks) {\n                                    backTickable = backVoices[v];\n                                    maxTicks = ticks;\n                                }\n                                // Calculate the limits of the shift based on modifiers, etc.\n                                const thisTickable = voices[v];\n                                const insideLeftEdge = thisTickable.getX() -\n                                    (thisTickable.getMetrics().modLeftPx + thisTickable.getMetrics().leftDisplacedHeadPx);\n                                const backMetrics = backVoices[v].getMetrics();\n                                const insideRightEdge = backVoices[v].getX() + backMetrics.notePx + backMetrics.modRightPx + backMetrics.rightDisplacedHeadPx;\n                                // Don't allow shifting if notes in the same voice can collide\n                                maxNegativeShiftPx = Math.min(maxNegativeShiftPx, insideLeftEdge - insideRightEdge);\n                            });\n                            // Don't shift further left than the notehead of the last context. Actually, stay at most 5% to the right\n                            // so that two different tick contexts don't align across staves.\n                            maxNegativeShiftPx = Math.min(maxNegativeShiftPx, context.getX() - (prevContext.getX() + adjustedJustifyWidth * 0.05));\n                            // Calculate the expected distance of the current context from the last matching tickable. The\n                            // distance is scaled down by the softmax for the voice.\n                            if (globalSoftmax) {\n                                const t = totalTicks;\n                                expectedDistance = (Math.pow(softmaxFactor, (maxTicks / t)) / expTicksUsed) * adjustedJustifyWidth;\n                            }\n                            else if (typeof backTickable !== 'undefined') {\n                                expectedDistance = backTickable.getVoice().softmax(maxTicks) * adjustedJustifyWidth;\n                            }\n                            return {\n                                expectedDistance,\n                                maxNegativeShiftPx,\n                                fromTickable: backTickable,\n                            };\n                        }\n                    }\n                }\n                return { expectedDistance: 0, fromTickablePx: 0, maxNegativeShiftPx: 0 };\n            });\n            return distances;\n        }\n        function shiftToIdealDistances(idealDistances) {\n            // Distribute ticks to the contexts based on the calculated distance error.\n            const centerX = adjustedJustifyWidth / 2;\n            let spaceAccum = 0;\n            contextList.forEach((tick, index) => {\n                const context = contextMap[tick];\n                if (index > 0) {\n                    const contextX = context.getX();\n                    const ideal = idealDistances[index];\n                    const errorPx = defined(ideal.fromTickable).getX() + ideal.expectedDistance - (contextX + spaceAccum);\n                    let negativeShiftPx = 0;\n                    if (errorPx > 0) {\n                        spaceAccum += errorPx;\n                    }\n                    else if (errorPx < 0) {\n                        negativeShiftPx = Math.min(ideal.maxNegativeShiftPx, Math.abs(errorPx));\n                        spaceAccum += -negativeShiftPx;\n                    }\n                    context.setX(contextX + spaceAccum);\n                }\n                // Move center aligned tickables to middle\n                context.getCenterAlignedTickables().forEach((tickable) => {\n                    tickable.setCenterXShift(centerX - context.getX());\n                });\n            });\n            return lastContext.getX() - firstContext.getX();\n        }\n        const adjustedJustifyWidth = justifyWidth -\n            lastContext.getMetrics().notePx -\n            lastContext.getMetrics().totalRightPx -\n            firstContext.getMetrics().totalLeftPx;\n        const configMinPadding = Metrics.get('Stave.endPaddingMin');\n        const configMaxPadding = Metrics.get('Stave.endPaddingMax');\n        const leftPadding = Metrics.get('Stave.padding');\n        let targetWidth = adjustedJustifyWidth;\n        const distances = calculateIdealDistances(targetWidth);\n        let actualWidth = shiftToIdealDistances(distances);\n        // Just one context. Done formatting.\n        if (contextList.length === 1)\n            return 0;\n        const calcMinDistance = (targetWidth, distances) => {\n            let mdCalc = targetWidth / 2;\n            if (distances.length > 1) {\n                for (let di = 1; di < distances.length; ++di) {\n                    mdCalc = Math.min(distances[di].expectedDistance / 2, mdCalc);\n                }\n            }\n            return mdCalc;\n        };\n        const minDistance = calcMinDistance(targetWidth, distances);\n        // right justify to either the configured padding, or the min distance between notes, whichever is greatest.\n        // This * 2 keeps the existing formatting unless there is 'a lot' of extra whitespace, which won't break\n        // existing visual regression tests.\n        const paddingMaxCalc = (curTargetWidth) => {\n            let lastTickablePadding = 0;\n            const lastTickable = lastContext && lastContext.getMaxTickable();\n            if (lastTickable) {\n                const voice = lastTickable.getVoice();\n                // If the number of actual ticks in the measure <> configured ticks, right-justify\n                // because the softmax won't yield the correct value\n                if (voice.getTicksUsed().value() > voice.getTotalTicks().value()) {\n                    return configMaxPadding * 2 < minDistance ? minDistance : configMaxPadding;\n                }\n                const tickWidth = lastTickable.getWidth();\n                lastTickablePadding =\n                    voice.softmax(lastContext.getMaxTicks().value()) * curTargetWidth - (tickWidth + leftPadding);\n            }\n            return configMaxPadding * 2 < lastTickablePadding ? lastTickablePadding : configMaxPadding;\n        };\n        let paddingMax = paddingMaxCalc(targetWidth);\n        let paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n        const maxX = adjustedJustifyWidth - paddingMin;\n        let iterations = maxIterations;\n        // Adjust justification width until the right margin is as close as possible to the calculated padding,\n        // without going over\n        while ((actualWidth > maxX && iterations > 0) || (actualWidth + paddingMax < maxX && iterations > 1)) {\n            targetWidth -= actualWidth - maxX;\n            paddingMax = paddingMaxCalc(targetWidth);\n            paddingMin = paddingMax - (configMaxPadding - configMinPadding);\n            actualWidth = shiftToIdealDistances(calculateIdealDistances(targetWidth));\n            iterations--;\n        }\n        this.justifyWidth = justifyWidth;\n        return this.evaluate();\n    }\n    /** Calculate the total cost of this formatting decision. */\n    evaluate() {\n        const contexts = this.tickContexts;\n        const justifyWidth = this.justifyWidth;\n        // Calculate available slack per tick context. This works out how much freedom\n        // to move a context has in either direction, without affecting other notes.\n        this.contextGaps = { total: 0, gaps: [] };\n        contexts.list.forEach((tick, index) => {\n            if (index === 0)\n                return;\n            const prevTick = contexts.list[index - 1];\n            const prevContext = contexts.map[prevTick];\n            const context = contexts.map[tick];\n            const prevMetrics = prevContext.getMetrics();\n            const currMetrics = context.getMetrics();\n            // Calculate X position of right edge of previous note\n            const insideRightEdge = prevContext.getX() + prevMetrics.notePx + prevMetrics.totalRightPx;\n            // Calculate X position of left edge of current note\n            const insideLeftEdge = context.getX() - currMetrics.totalLeftPx;\n            const gap = insideLeftEdge - insideRightEdge;\n            this.contextGaps.total += gap;\n            this.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });\n            // Tell the tick contexts how much they can reposition themselves.\n            context.getFormatterMetrics().freedom.left = gap;\n            prevContext.getFormatterMetrics().freedom.right = gap;\n        });\n        // Calculate mean distance in each voice for each duration type, then calculate\n        // how far each note is from the mean.\n        this.durationStats = {};\n        const durationStats = this.durationStats;\n        function updateStats(duration, space) {\n            const stats = durationStats[duration];\n            if (stats === undefined) {\n                durationStats[duration] = { mean: space, count: 1, total: space };\n            }\n            else {\n                stats.count += 1;\n                stats.total += space;\n                stats.mean = stats.total / stats.count;\n            }\n        }\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note, i, notes) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getMetrics();\n                const formatterMetrics = note.getFormatterMetrics();\n                const leftNoteEdge = note.getX() + metrics.notePx + metrics.modRightPx + metrics.rightDisplacedHeadPx;\n                let space = 0;\n                if (i < notes.length - 1) {\n                    const rightNote = notes[i + 1];\n                    const rightMetrics = rightNote.getMetrics();\n                    const rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.leftDisplacedHeadPx;\n                    space = rightNoteEdge - leftNoteEdge;\n                    formatterMetrics.space.used = rightNote.getX() - note.getX();\n                    rightNote.getFormatterMetrics().freedom.left = space;\n                }\n                else {\n                    space = justifyWidth - leftNoteEdge;\n                    formatterMetrics.space.used = justifyWidth - note.getX();\n                }\n                formatterMetrics.freedom.right = space;\n                updateStats(duration, formatterMetrics.space.used);\n            });\n        });\n        // Calculate how much each note deviates from the mean. Loss function is square\n        // root of the sum of squared deviations.\n        let totalDeviation = 0;\n        this.voices.forEach((voice) => {\n            voice.getTickables().forEach((note) => {\n                const duration = note.getTicks().clone().simplify().toString();\n                const metrics = note.getFormatterMetrics();\n                metrics.space.mean = durationStats[duration].mean;\n                metrics.duration = duration;\n                metrics.iterations += 1;\n                metrics.space.deviation = metrics.space.used - metrics.space.mean;\n                totalDeviation += Math.pow(metrics.space.deviation, 2);\n            });\n        });\n        this.totalCost = Math.sqrt(totalDeviation);\n        this.lossHistory.push(this.totalCost);\n        return this.totalCost;\n    }\n    /**\n     * Run a single iteration of rejustification. At a high level, this method calculates\n     * the overall \"loss\" (or cost) of this layout, and repositions tickcontexts in an\n     * attempt to reduce the cost. You can call this method multiple times until it finds\n     * and oscillates around a global minimum.\n     * @param options parameters for tuning, currently just \"alpha\".\n     * @param options[alpha] the \"learning rate\" for the formatter. It determines how much of a shift\n     * the formatter should make based on its cost function.  Defaults to 0.5.\n     */\n    tune(options) {\n        var _a;\n        const contexts = this.tickContexts;\n        if (!contexts) {\n            return 0;\n        }\n        const alpha = (_a = options === null || options === void 0 ? void 0 : options.alpha) !== null && _a !== void 0 ? _a : 0.5;\n        // function `move` moved to tickcontext.\n        let shift = 0;\n        this.totalShift = 0;\n        contexts.list.forEach((tick, index, list) => {\n            const context = contexts.map[tick];\n            const prevContext = index > 0 ? contexts.map[list[index - 1]] : undefined;\n            const nextContext = index < list.length - 1 ? contexts.map[list[index + 1]] : undefined;\n            context.move(shift, prevContext, nextContext);\n            // Q(msac): Should the cost by normalized by the number\n            // of tickables at this position?  If so, switch this to getAverageDeviationCost()\n            const cost = -context.getDeviationCost();\n            if (cost > 0) {\n                shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));\n            }\n            else if (cost < 0) {\n                if (nextContext) {\n                    shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));\n                }\n                else {\n                    shift = 0;\n                }\n            }\n            shift *= alpha;\n            this.totalShift += shift;\n        });\n        return this.evaluate();\n    }\n    /**\n     * This is the top-level call for all formatting logic completed\n     * after `x` *and* `y` values have been computed for the notes\n     * in the voices.\n     */\n    postFormat() {\n        this.modifierContexts.forEach((modifierContexts) => {\n            modifierContexts.array.forEach((mc) => mc.postFormat());\n        });\n        this.tickContexts.list.forEach((tick) => {\n            this.tickContexts.map[tick].postFormat();\n        });\n        return this;\n    }\n    /**\n     * Take all `voices` and create `ModifierContext`s out of them. This tells\n     * the formatters that the voices belong on a single stave.\n     */\n    joinVoices(voices) {\n        this.createModifierContexts(voices);\n        this.hasMinTotalWidth = false;\n        return this;\n    }\n    /**\n     * Align rests in voices, justify the contexts, and position the notes\n     * so voices are aligned and ready to render onto the stave. This method\n     * mutates the `x` positions of all tickables in `voices`.\n     *\n     * Voices are full justified to fit in `justifyWidth` pixels.\n     *\n     * Set `options.context` to the rendering context. Set `options.alignRests`\n     * to true to enable rest vertical alignment.\n     */\n    format(voices, justifyWidth, options) {\n        const opts = Object.assign({ alignRests: false }, options);\n        this.voices = voices;\n        const softmaxFactor = this.formatterOptions.softmaxFactor;\n        if (softmaxFactor) {\n            this.voices.forEach((v) => v.setSoftmaxFactor(softmaxFactor));\n        }\n        this.alignRests(voices, opts.alignRests);\n        this.createTickContexts(voices);\n        this.preFormat(justifyWidth, opts.context, voices, opts.stave);\n        // Only postFormat if a stave was supplied for y value formatting\n        if (opts.stave)\n            this.postFormat();\n        return this;\n    }\n    // This method is just like `format` except that the `justifyWidth` is inferred from the `stave`.\n    formatToStave(voices, stave, optionsParam) {\n        const options = Object.assign({ context: stave.getContext() }, optionsParam);\n        const justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - Stave.defaultPadding;\n        L('Formatting voices to width: ', justifyWidth);\n        return this.format(voices, justifyWidth, options);\n    }\n    getTickContext(tick) {\n        var _a;\n        return (_a = this.tickContexts) === null || _a === void 0 ? void 0 : _a.map[tick];\n    }\n}\n// To enable logging for this class. Set `VexFlow.Formatter.DEBUG` to `true`.\nFormatter.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n/**\n * ## Description\n *\n * Create a new tuplet from the specified notes. The notes must\n * be part of the same voice. If they are of different rhythmic\n * values, then options.numNotes must be set.\n *\n * @constructor\n * @param {Array.<VexFlow.StaveNote>} A set of notes: staveNotes,\n *   notes, etc... any class that inherits stemmableNote at some\n *   point in its prototype chain.\n * @param options: object {\n *\n *   numNotes: fit this many notes into...\n *   notesOccupied: ...the space of this many notes\n *\n *       Together, these two properties make up the tuplet ratio\n *     in the form of numNotes : notesOccupied.\n *       numNotes defaults to the number of notes passed in, so\n *     it is important that if you omit this property, all of\n *     the notes passed should be of the same note value.\n *       notesOccupied defaults to 2 -- so you should almost\n *     certainly pass this parameter for anything other than\n *     a basic triplet.\n *\n *   location:\n *     default 1, which is above the notes: ┌─── 3 ───┐\n *      -1 is below the notes └─── 3 ───┘\n *\n *   bracketed: boolean, draw a bracket around the tuplet number\n *     when true: ┌─── 3 ───┐   when false: 3\n *     defaults to true if notes are not beamed, false otherwise\n *\n *   ratioed: boolean\n *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐\n *     defaults to true if the difference between numNotes and\n *     notesOccupied is greater than 1.\n *\n *   yOffset: int, default 0\n *     manually offset a tuplet, for instance to avoid collisions\n *     with articulations, etc...\n * }\n */\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var TupletLocation;\n(function (TupletLocation) {\n    TupletLocation[TupletLocation[\"BOTTOM\"] = -1] = \"BOTTOM\";\n    TupletLocation[TupletLocation[\"TOP\"] = 1] = \"TOP\";\n})(TupletLocation || (TupletLocation = {}));\nexport class Tuplet extends Element {\n    static get CATEGORY() {\n        return Category.Tuplet;\n    }\n    static get LOCATION_TOP() {\n        return TupletLocation.TOP;\n    }\n    static get LOCATION_BOTTOM() {\n        return TupletLocation.BOTTOM;\n    }\n    static get NESTING_OFFSET() {\n        return 15;\n    }\n    constructor(notes, options = {}) {\n        super();\n        if (!notes || !notes.length) {\n            throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n        }\n        this.notes = notes;\n        const numNotes = options.numNotes !== undefined ? options.numNotes : notes.length;\n        const notesOccupied = options.notesOccupied || 2;\n        const bracketed = options.bracketed !== undefined ? options.bracketed : notes.some((note) => !note.hasBeam());\n        const ratioed = options.ratioed !== undefined ? options.ratioed : Math.abs(notesOccupied - numNotes) > 1;\n        const location = options.location || Tuplet.LOCATION_TOP;\n        const yOffset = options.yOffset || Metrics.get('Tuplet.yOffset');\n        const textYOffset = options.textYOffset || Metrics.get('Tuplet.textYOffset');\n        this.options = {\n            bracketed,\n            location,\n            notesOccupied,\n            numNotes,\n            ratioed,\n            yOffset,\n            textYOffset,\n        };\n        this.textElement = new Element('Tuplet');\n        this.setTupletLocation(location || Tuplet.LOCATION_TOP);\n        Formatter.AlignRestsToNotes(notes, true, true);\n        this.resolveGlyphs();\n        this.attach();\n    }\n    attach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.setTuplet(this);\n        }\n    }\n    detach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.resetTuplet(this);\n        }\n    }\n    /**\n     * Set whether or not the bracket is drawn.\n     */\n    setBracketed(bracketed) {\n        this.options.bracketed = bracketed;\n        return this;\n    }\n    /**\n     * Set whether or not the ratio is shown.\n     */\n    setRatioed(ratioed) {\n        this.options.ratioed = ratioed;\n        return this;\n    }\n    /**\n     * Set the tuplet indicator to be displayed either on the top or bottom of the stave.\n     */\n    setTupletLocation(location) {\n        if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n            // eslint-disable-next-line\n            console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n            location = Tuplet.LOCATION_TOP;\n        }\n        this.options.location = location;\n        return this;\n    }\n    getNotes() {\n        return this.notes;\n    }\n    getNoteCount() {\n        return this.options.numNotes;\n    }\n    getNotesOccupied() {\n        return this.options.notesOccupied;\n    }\n    setNotesOccupied(notes) {\n        this.detach();\n        this.options.notesOccupied = notes;\n        this.resolveGlyphs();\n        this.attach();\n    }\n    resolveGlyphs() {\n        let numerator = '';\n        let denominator = '';\n        let n = this.options.numNotes;\n        while (n >= 1) {\n            numerator = String.fromCharCode(0xe880 /* tuplet0 */ + (n % 10)) + numerator;\n            n = Math.floor(n / 10);\n        }\n        if (this.options.ratioed) {\n            n = this.options.notesOccupied;\n            while (n >= 1) {\n                denominator = String.fromCharCode(0xe880 /* tuplet0 */ + (n % 10)) + denominator;\n                n = Math.floor(n / 10);\n            }\n            denominator = Glyphs.tupletColon + denominator;\n        }\n        this.textElement.setText(numerator + denominator);\n    }\n    // determine how many tuplets are nested within this tuplet\n    // on the same side (above/below), to calculate a y\n    // offset for this tuplet:\n    getNestedTupletCount() {\n        const { location } = this.options;\n        const firstNote = this.notes[0];\n        let maxTupletCount = countTuplets(firstNote, location);\n        let minTupletCount = countTuplets(firstNote, location);\n        // Count the tuplets that are on the same side (above/below)\n        // as this tuplet:\n        function countTuplets(note, location) {\n            return note.getTupletStack().filter((tuplet) => tuplet.options.location === location).length;\n        }\n        this.notes.forEach((note) => {\n            const tupletCount = countTuplets(note, location);\n            maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n            minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n        });\n        return maxTupletCount - minTupletCount;\n    }\n    // determine the y position of the tuplet:\n    getYPosition() {\n        var _a;\n        // offset the tuplet for any nested tuplets between\n        // it and the notes:\n        const nestedTupletYOffset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.options.location;\n        // offset the tuplet for any manual yOffset:\n        const yOffset = (_a = this.options.yOffset) !== null && _a !== void 0 ? _a : 0;\n        // now iterate through the notes and find our highest\n        // or lowest locations, to form a base yPosition\n        const firstNote = this.notes[0];\n        let yPosition;\n        if (this.options.location === Tuplet.LOCATION_TOP) {\n            yPosition = firstNote.checkStave().getYForLine(0) - 1.5 * Tables.STAVE_LINE_DISTANCE;\n            // check modifiers above note to see if they will collide with tuplet beam\n            for (let i = 0; i < this.notes.length; ++i) {\n                const note = this.notes[i];\n                let modLines = 0;\n                const mc = note.getModifierContext();\n                if (mc) {\n                    modLines = Math.max(modLines, mc.getState().topTextLine);\n                }\n                const modY = note.getYForTopText(modLines) - 2 * Tables.STAVE_LINE_DISTANCE;\n                if (note.hasStem() || note.isRest()) {\n                    const topY = note.getStemDirection() === Stem.UP\n                        ? note.getStemExtents().topY - Tables.STAVE_LINE_DISTANCE\n                        : note.getStemExtents().baseY - 2 * Tables.STAVE_LINE_DISTANCE;\n                    yPosition = Math.min(topY, yPosition);\n                    if (modLines > 0) {\n                        yPosition = Math.min(modY, yPosition);\n                    }\n                }\n            }\n        }\n        else {\n            let lineCheck = 4; // tuplet default on line 4\n            // check modifiers below note to see if they will collide with tuplet beam\n            this.notes.forEach((nn) => {\n                const mc = nn.getModifierContext();\n                if (mc) {\n                    lineCheck = Math.max(lineCheck, mc.getState().textLine + 1);\n                }\n            });\n            yPosition = firstNote.checkStave().getYForLine(lineCheck) + 2 * Tables.STAVE_LINE_DISTANCE;\n            for (let i = 0; i < this.notes.length; ++i) {\n                if (this.notes[i].hasStem() || this.notes[i].isRest()) {\n                    const bottomY = this.notes[i].getStemDirection() === Stem.UP\n                        ? this.notes[i].getStemExtents().baseY + 2 * Tables.STAVE_LINE_DISTANCE\n                        : this.notes[i].getStemExtents().topY + Tables.STAVE_LINE_DISTANCE;\n                    if (bottomY > yPosition) {\n                        yPosition = bottomY;\n                    }\n                }\n            }\n        }\n        return yPosition + nestedTupletYOffset + yOffset;\n    }\n    draw() {\n        const { location, bracketed, textYOffset } = this.options;\n        const ctx = this.checkContext();\n        let xPos = 0;\n        let yPos = 0;\n        // determine x value of left bound of tuplet\n        const firstNote = this.notes[0];\n        const lastNote = this.notes[this.notes.length - 1];\n        if (!bracketed) {\n            xPos = firstNote.getStemX();\n            this.width = lastNote.getStemX() - xPos;\n        }\n        else {\n            xPos = firstNote.getTieLeftX() - 5;\n            this.width = lastNote.getTieRightX() - xPos + 5;\n        }\n        // determine y value for tuplet\n        yPos = this.getYPosition();\n        const notationCenterX = xPos + this.width / 2;\n        const notationStartX = notationCenterX - this.textElement.getWidth() / 2;\n        // start grouping\n        ctx.openGroup('tuplet', this.getAttribute('id'));\n        // draw bracket if the tuplet is not beamed\n        if (bracketed) {\n            const lineWidth = this.width / 2 - this.textElement.getWidth() / 2 - 5;\n            // only draw the bracket if it has positive length\n            if (lineWidth > 0) {\n                ctx.fillRect(xPos, yPos, lineWidth, 1);\n                ctx.fillRect(xPos + this.width / 2 + this.textElement.getWidth() / 2 + 5, yPos, lineWidth, 1);\n                ctx.fillRect(xPos, yPos + (location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, location * 10);\n                ctx.fillRect(xPos + this.width, yPos + (location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, location * 10);\n            }\n        }\n        // draw text\n        this.textElement.renderText(ctx, notationStartX, yPos + this.textElement.getHeight() / 2 + (location === Tuplet.LOCATION_TOP ? -1 : 1) * textYOffset);\n        // Set up an interactive bounding box and finalize the tuplet rendering\n        const bb = this.getBoundingBox();\n        ctx.pointerRect(bb.getX(), bb.getY(), bb.getW(), bb.getH());\n        ctx.closeGroup();\n        this.setRendered();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Fraction } from './fraction';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { TupletLocation } from './tuplet';\nimport { Category, isStaveNote, isTabNote } from './typeguard';\nimport { RuntimeError } from './util';\nfunction calculateStemDirection(notes) {\n    let lineSum = 0;\n    notes.forEach((note) => {\n        if (note.keyProps) {\n            note.keyProps.forEach((keyProp) => {\n                lineSum += keyProp.line - 3;\n            });\n        }\n    });\n    if (lineSum >= 0) {\n        return Stem.DOWN;\n    }\n    return Stem.UP;\n}\nfunction getStemSlope(firstNote, lastNote) {\n    const firstStemTipY = firstNote.getStemExtents().topY;\n    const firstStemX = firstNote.getStemX();\n    const lastStemTipY = lastNote.getStemExtents().topY;\n    const lastStemX = lastNote.getStemX();\n    return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);\n}\nexport const BEAM_LEFT = 'L';\nexport const BEAM_RIGHT = 'R';\nexport const BEAM_BOTH = 'B';\n/** `Beams` span over a set of `StemmableNotes`. */\nexport class Beam extends Element {\n    static get CATEGORY() {\n        return Category.Beam;\n    }\n    /** Get the direction of the beam */\n    getStemDirection() {\n        return this._stemDirection;\n    }\n    /**\n     * Get the default beam groups for a provided time signature.\n     * Attempt to guess if the time signature is not found in table.\n     * Currently this is fairly naive.\n     */\n    static getDefaultBeamGroups(timeSig) {\n        if (!timeSig || timeSig === 'c') {\n            timeSig = '4/4';\n        }\n        const defaults = {\n            '1/2': ['1/2'],\n            '2/2': ['1/2'],\n            '3/2': ['1/2'],\n            '4/2': ['1/2'],\n            '1/4': ['1/4'],\n            '2/4': ['1/4'],\n            '3/4': ['1/4'],\n            '4/4': ['1/4'],\n            '1/8': ['1/8'],\n            '2/8': ['2/8'],\n            '3/8': ['3/8'],\n            '4/8': ['2/8'],\n            '1/16': ['1/16'],\n            '2/16': ['2/16'],\n            '3/16': ['3/16'],\n            '4/16': ['2/16'],\n        };\n        const groups = defaults[timeSig];\n        if (groups === undefined) {\n            // If no beam groups found, naively determine\n            // the beam groupings from the time signature\n            const beatTotal = parseInt(timeSig.split('/')[0], 10);\n            const beatValue = parseInt(timeSig.split('/')[1], 10);\n            const tripleMeter = beatTotal % 3 === 0;\n            if (tripleMeter) {\n                return [new Fraction(3, beatValue)];\n            }\n            else if (beatValue > 4) {\n                return [new Fraction(2, beatValue)];\n            }\n            else if (beatValue <= 4) {\n                return [new Fraction(1, beatValue)];\n            }\n        }\n        else {\n            return groups.map((group) => new Fraction().parse(group));\n        }\n        return [new Fraction(1, 4)];\n    }\n    /**\n     * A helper function to automatically build basic beams for a voice. For more\n     * complex auto-beaming use `Beam.generateBeams()`.\n     * @param voice the voice to generate the beams for\n     * @param stemDirection a stem direction to apply to the entire voice\n     * @param groups an array of `Fraction` representing beat groupings for the beam\n     */\n    static applyAndGetBeams(voice, stemDirection, groups) {\n        return Beam.generateBeams(voice.getTickables(), { groups, stemDirection });\n    }\n    /**\n     * A helper function to autimatically build beams for a voice with\n     * configuration options.\n     *\n     * Example configuration object:\n     *\n     * ```\n     * config = {\n     *   groups: [new VexFlow.Fraction(2, 8)],\n     *   stemDirection: -1,\n     *   beamRests: true,\n     *   beamMiddleOnly: true,\n     *   showStemlets: false\n     * };\n     * ```\n     * @param notes an array of notes to create the beams for\n     * @param config the configuration object\n     * @param config.stemDirection set to apply the same direction to all notes\n     * @param config.beamRests set to `true` to include rests in the beams\n     * @param config.beamMiddleOnly set to `true` to only beam rests in the middle of the beat\n     * @param config.showStemlets set to `true` to draw stemlets for rests\n     * @param config.maintainStemDirections set to `true` to not apply new stem directions\n     * @param config.groups array of `Fractions` that represent the beat structure to beam the notes\n     *\n     */\n    static generateBeams(notes, config = {}) {\n        if (!config.groups || !config.groups.length) {\n            config.groups = [new Fraction(2, 8)];\n        }\n        // Convert beam groups to tick amounts\n        const tickGroups = config.groups.map((group) => {\n            if (!group.multiply) {\n                throw new RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of VexFlow.Fractions');\n            }\n            return group.clone().multiply(Tables.RESOLUTION, 1);\n        });\n        const unprocessedNotes = notes;\n        let currentTickGroup = 0;\n        let noteGroups = [];\n        let currentGroup = [];\n        function getTotalTicks(notes) {\n            return notes.reduce((memo, note) => note.getTicks().clone().add(memo), new Fraction(0, 1));\n        }\n        function nextTickGroup() {\n            if (tickGroups.length - 1 > currentTickGroup) {\n                currentTickGroup += 1;\n            }\n            else {\n                currentTickGroup = 0;\n            }\n        }\n        function createGroups() {\n            let nextGroup = [];\n            // number of ticks in current group\n            let currentGroupTotalTicks = new Fraction(0, 1);\n            unprocessedNotes.forEach((unprocessedNote) => {\n                nextGroup = [];\n                if (unprocessedNote.shouldIgnoreTicks()) {\n                    noteGroups.push(currentGroup);\n                    currentGroup = nextGroup;\n                    return; // Ignore untickables (like bar notes)\n                }\n                currentGroup.push(unprocessedNote);\n                const ticksPerGroup = tickGroups[currentTickGroup].clone();\n                const totalTicks = getTotalTicks(currentGroup).add(currentGroupTotalTicks);\n                // Double the amount of ticks in a group, if it's an unbeamable tuplet\n                const unbeamable = Tables.durationToNumber(unprocessedNote.getDuration()) < 8;\n                if (unbeamable && unprocessedNote.getTuplet()) {\n                    ticksPerGroup.numerator *= 2;\n                }\n                // If the note that was just added overflows the group tick total\n                if (totalTicks.greaterThan(ticksPerGroup)) {\n                    // If the overflow note can be beamed, start the next group\n                    // with it. Unbeamable notes leave the group overflowed.\n                    if (!unbeamable) {\n                        const note = currentGroup.pop();\n                        if (note)\n                            nextGroup.push(note);\n                    }\n                    noteGroups.push(currentGroup);\n                    // We have overflown, so we're going to next tick group. As we might have\n                    // overflown by more than 1 group, we need to go forward as many times as\n                    // needed, decreasing currentGroupTotalTicks by as many ticks as there are\n                    // in current groups as we go forward.\n                    do {\n                        currentGroupTotalTicks = totalTicks.subtract(tickGroups[currentTickGroup]);\n                        nextTickGroup();\n                    } while (currentGroupTotalTicks.greaterThanEquals(tickGroups[currentTickGroup]));\n                    currentGroup = nextGroup;\n                }\n                else if (totalTicks.equals(ticksPerGroup)) {\n                    noteGroups.push(currentGroup);\n                    currentGroupTotalTicks = new Fraction(0, 1);\n                    currentGroup = nextGroup;\n                    nextTickGroup();\n                }\n            });\n            // Adds any remainder notes beam\n            if (currentGroup.length > 0) {\n                noteGroups.push(currentGroup);\n            }\n        }\n        function getBeamGroups() {\n            return noteGroups.filter((group) => {\n                if (group.length > 1) {\n                    let beamable = true;\n                    group.forEach((note) => {\n                        if (note.getIntrinsicTicks() >= Tables.durationToTicks('4')) {\n                            beamable = false;\n                        }\n                    });\n                    return beamable;\n                }\n                return false;\n            });\n        }\n        // Splits up groups by Rest\n        function sanitizeGroups() {\n            const sanitizedGroups = [];\n            noteGroups.forEach((group) => {\n                let tempGroup = [];\n                group.forEach((note, index, group) => {\n                    const isFirstOrLast = index === 0 || index === group.length - 1;\n                    const prevNote = group[index - 1];\n                    const breaksOnEachRest = !config.beamRests && note.isRest();\n                    const breaksOnFirstOrLastRest = config.beamRests && config.beamMiddleOnly && note.isRest() && isFirstOrLast;\n                    let breakOnStemChange = false;\n                    if (config.maintainStemDirections && prevNote && !note.isRest() && !prevNote.isRest()) {\n                        const prevDirection = prevNote.getStemDirection();\n                        const currentDirection = note.getStemDirection();\n                        breakOnStemChange = currentDirection !== prevDirection;\n                    }\n                    const isUnbeamableDuration = parseInt(note.getDuration(), 10) < 8;\n                    // Determine if the group should be broken at this note\n                    const shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;\n                    if (shouldBreak) {\n                        // Add current group\n                        if (tempGroup.length > 0) {\n                            sanitizedGroups.push(tempGroup);\n                        }\n                        // Start a new group. Include the current note if the group\n                        // was broken up by stem direction, as that note needs to start\n                        // the next group of notes\n                        tempGroup = breakOnStemChange ? [note] : [];\n                    }\n                    else {\n                        // Add note to group\n                        tempGroup.push(note);\n                    }\n                });\n                // If there is a remaining group, add it as well\n                if (tempGroup.length > 0) {\n                    sanitizedGroups.push(tempGroup);\n                }\n            });\n            noteGroups = sanitizedGroups;\n        }\n        function formatStems() {\n            noteGroups.forEach((group) => {\n                let stemDirection;\n                if (config.maintainStemDirections) {\n                    const note = findFirstNote(group);\n                    stemDirection = note ? note.getStemDirection() : Stem.UP;\n                }\n                else {\n                    if (config.stemDirection) {\n                        stemDirection = config.stemDirection;\n                    }\n                    else {\n                        stemDirection = calculateStemDirection(group);\n                    }\n                }\n                applyStemDirection(group, stemDirection);\n            });\n        }\n        function findFirstNote(group) {\n            for (let i = 0; i < group.length; i++) {\n                const note = group[i];\n                if (!note.isRest()) {\n                    return note;\n                }\n            }\n            return false;\n        }\n        function applyStemDirection(group, direction) {\n            group.forEach((note) => {\n                note.setStemDirection(direction);\n            });\n        }\n        // Get all of the tuplets in all of the note groups\n        function getTuplets() {\n            const uniqueTuplets = [];\n            // Go through all of the note groups and inspect for tuplets\n            noteGroups.forEach((group) => {\n                let tuplet;\n                group.forEach((note) => {\n                    const noteTuplet = note.getTuplet();\n                    if (noteTuplet && tuplet !== noteTuplet) {\n                        tuplet = noteTuplet;\n                        uniqueTuplets.push(tuplet);\n                    }\n                });\n            });\n            return uniqueTuplets;\n        }\n        // Using closures to store the variables throughout the various functions\n        // IMO Keeps it this process lot cleaner - but not super consistent with\n        // the rest of the API's style - Silverwolf90 (Cyril)\n        createGroups();\n        sanitizeGroups();\n        formatStems();\n        // Get the notes to be beamed\n        const beamedNoteGroups = getBeamGroups();\n        // Get the tuplets in order to format them accurately\n        const allTuplets = getTuplets();\n        // Create a VexFlow.Beam from each group of notes to be beamed\n        const beams = [];\n        beamedNoteGroups.forEach((group) => {\n            const beam = new Beam(group);\n            if (config.showStemlets) {\n                beam.renderOptions.showStemlets = true;\n            }\n            if (config.secondaryBreaks) {\n                beam.renderOptions.secondaryBreakTicks = Tables.durationToTicks(config.secondaryBreaks);\n            }\n            if (config.flatBeams === true) {\n                beam.renderOptions.flatBeams = true;\n                beam.renderOptions.flatBeamOffset = config.flatBeamOffset;\n            }\n            beams.push(beam);\n        });\n        // Reformat tuplets\n        allTuplets.forEach((tuplet) => {\n            // Set the tuplet location based on the stem direction\n            const direction = tuplet.notes[0].stemDirection === Stem.DOWN ? TupletLocation.BOTTOM : TupletLocation.TOP;\n            tuplet.setTupletLocation(direction);\n            // If any of the notes in the tuplet are not beamed, draw a bracket.\n            let bracketed = false;\n            for (let i = 0; i < tuplet.notes.length; i++) {\n                const note = tuplet.notes[i];\n                if (!note.hasBeam()) {\n                    bracketed = true;\n                    break;\n                }\n            }\n            tuplet.setBracketed(bracketed);\n        });\n        return beams;\n    }\n    constructor(notes, autoStem = false) {\n        super();\n        this.slope = 0;\n        this.yShift = 0;\n        /**\n         * Overrides to default beam directions for secondary-level beams that do not\n         * connect to any other note. See further explanation at\n         * `setPartialBeamSideAt`\n         */\n        this.forcedPartialDirections = {};\n        if (!notes || notes.length === 0) {\n            throw new RuntimeError('BadArguments', 'No notes provided for beam.');\n        }\n        if (notes.length === 1) {\n            throw new RuntimeError('BadArguments', 'Too few notes for beam.');\n        }\n        // Validate beam line, direction and ticks.\n        this._ticks = notes[0].getIntrinsicTicks();\n        if (this._ticks >= Tables.durationToTicks('4')) {\n            // Q(MSAC) -- what about beamed half-note measured tremolos?\n            throw new RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');\n        }\n        let i; // shared iterator\n        let note;\n        this._stemDirection = notes[0].getStemDirection();\n        let stemDirection = this._stemDirection;\n        // Figure out optimal stem direction based on given notes\n        if (autoStem && isStaveNote(notes[0])) {\n            stemDirection = calculateStemDirection(notes);\n        }\n        else if (autoStem && isTabNote(notes[0])) {\n            // Auto Stem TabNotes\n            const stemWeight = notes.reduce((memo, note) => memo + note.getStemDirection(), 0);\n            stemDirection = stemWeight > -1 ? Stem.UP : Stem.DOWN;\n        }\n        // Apply stem directions and attach beam to notes\n        for (i = 0; i < notes.length; ++i) {\n            note = notes[i];\n            if (autoStem) {\n                note.setStemDirection(stemDirection);\n                this._stemDirection = stemDirection;\n            }\n            note.setBeam(this);\n        }\n        this.postFormatted = false;\n        this.notes = notes;\n        this._beamCount = this.getBeamCount();\n        this.breakOnIndexes = [];\n        this.renderOptions = {\n            beamWidth: 5,\n            maxSlope: 0.25,\n            minSlope: -0.25,\n            slopeIterations: 20,\n            slopeCost: 100,\n            showStemlets: false,\n            stemletExtension: 7,\n            partialBeamLength: 10,\n            flatBeams: false,\n            minFlatBeamOffset: 15,\n        };\n    }\n    /** Get the notes in this beam. */\n    getNotes() {\n        return this.notes;\n    }\n    /** Get the max number of beams in the set of notes. */\n    getBeamCount() {\n        const beamCounts = this.notes.map((note) => note.getGlyphProps().beamCount);\n        const maxBeamCount = beamCounts.reduce((max, beamCount) => (beamCount > max ? beamCount : max));\n        return maxBeamCount;\n    }\n    /** Set which note `indexes` to break the secondary beam at. */\n    breakSecondaryAt(indexes) {\n        this.breakOnIndexes = indexes;\n        return this;\n    }\n    /**\n     * Forces the direction of a partial beam (a secondary-level beam that exists\n     * on one note only of the beam group). This is useful in rhythms such as 6/8\n     * eighth-sixteenth-eighth-sixteenth, where the direction of the beam on the\n     * first sixteenth note can help imply whether the rhythm is to be felt as\n     * three groups of eighth notes (typical) or as two groups of three-sixteenths\n     * (less common):\n     * ```\n     *  ┌───┬──┬──┐      ┌──┬──┬──┐\n     *  │   ├─ │ ─┤  vs  │ ─┤  │ ─┤\n     *  │   │  │  │      │  │  │  │\n     * ```\n     */\n    setPartialBeamSideAt(noteIndex, side) {\n        this.forcedPartialDirections[noteIndex] = side;\n        return this;\n    }\n    /**\n     * Restore the default direction of a partial beam (a secondary-level beam\n     * that does not connect to any other notes).\n     */\n    unsetPartialBeamSideAt(noteIndex) {\n        delete this.forcedPartialDirections[noteIndex];\n        return this;\n    }\n    /**\n     * @param firstX specified in pixels.\n     * @param firstY specified in pixels.\n     *\n     * @return the y coordinate for linear function.\n     */\n    getSlopeY(x, firstX, firstY, slope) {\n        return firstY + (x - firstX) * slope;\n    }\n    /** Calculate the best possible slope for the provided notes. */\n    calculateSlope() {\n        const { notes, renderOptions: { maxSlope, minSlope, slopeIterations, slopeCost }, } = this;\n        const stemDirection = this._stemDirection;\n        const firstNote = notes[0];\n        const initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);\n        const increment = (maxSlope - minSlope) / slopeIterations;\n        let minCost = Number.MAX_VALUE;\n        let bestSlope = 0;\n        let yShift = 0;\n        // iterate through slope values to find best weighted fit\n        for (let slope = minSlope; slope <= maxSlope; slope += increment) {\n            let totalStemExtension = 0;\n            let yShiftTemp = 0;\n            // iterate through notes, calculating y shift and stem extension\n            for (let i = 1; i < notes.length; ++i) {\n                const note = notes[i];\n                if (note.hasStem() || note.isRest()) {\n                    const adjustedStemTipY = this.getSlopeY(note.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;\n                    const stemTipY = note.getStemExtents().topY;\n                    // beam needs to be shifted up to accommodate note\n                    if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {\n                        const diff = Math.abs(stemTipY - adjustedStemTipY);\n                        yShiftTemp += diff * -stemDirection;\n                        totalStemExtension += diff * i;\n                    }\n                    else {\n                        // beam overshoots note, account for the difference\n                        totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;\n                    }\n                }\n            }\n            // most engraving books suggest aiming for a slope about half the angle of the\n            // difference between the first and last notes' stem length;\n            const idealSlope = initialSlope / 2;\n            const distanceFromIdeal = Math.abs(idealSlope - slope);\n            // This tries to align most beams to something closer to the idealSlope, but\n            // doesn't go crazy. To disable, set this.renderOptions.slopeCost = 0\n            const cost = slopeCost * distanceFromIdeal + Math.abs(totalStemExtension);\n            // update state when a more ideal slope is found\n            if (cost < minCost) {\n                minCost = cost;\n                bestSlope = slope;\n                yShift = yShiftTemp;\n            }\n        }\n        this.slope = bestSlope;\n        this.yShift = yShift;\n    }\n    /** Calculate a slope and y-shift for flat beams. */\n    calculateFlatSlope() {\n        const { notes, renderOptions: { beamWidth, minFlatBeamOffset, flatBeamOffset }, } = this;\n        const stemDirection = this._stemDirection;\n        // If a flat beam offset has not yet been supplied or calculated,\n        // generate one based on the notes in this particular note group\n        let total = 0;\n        let extremeY = 0; // Store the highest or lowest note here\n        let extremeBeamCount = 0; // The beam count of the extreme note\n        let currentExtreme = 0;\n        for (let i = 0; i < notes.length; i++) {\n            // Total up all of the offsets so we can average them out later\n            const note = notes[i];\n            const stemTipY = note.getStemExtents().topY;\n            total += stemTipY;\n            // Store the highest (stems-up) or lowest (stems-down) note so the\n            //  offset can be adjusted in case the average isn't enough\n            if (stemDirection === Stem.DOWN && currentExtreme < stemTipY) {\n                currentExtreme = stemTipY;\n                extremeY = Math.max(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n            else if (stemDirection === Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {\n                currentExtreme = stemTipY;\n                extremeY = Math.min(...note.getYs());\n                extremeBeamCount = note.getBeamCount();\n            }\n        }\n        // Average the offsets to try and come up with a reasonable one that\n        // works for all of the notes in the beam group.\n        let offset = total / notes.length;\n        // In case the average isn't long enough, add or subtract some more\n        // based on the highest or lowest note (again, based on the stem\n        // direction). This also takes into account the added height due to\n        // the width of the beams.\n        const extremeTest = minFlatBeamOffset + extremeBeamCount * beamWidth * 1.5;\n        const newOffset = extremeY + extremeTest * -stemDirection;\n        if (stemDirection === Stem.DOWN && offset < newOffset) {\n            offset = extremeY + extremeTest;\n        }\n        else if (stemDirection === Stem.UP && offset > newOffset) {\n            offset = extremeY - extremeTest;\n        }\n        if (!flatBeamOffset) {\n            // Set the offset for the group based on the calculations above.\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        else if (stemDirection === Stem.DOWN && offset > flatBeamOffset) {\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        else if (stemDirection === Stem.UP && offset < flatBeamOffset) {\n            this.renderOptions.flatBeamOffset = offset;\n        }\n        // For flat beams, the slope and yShift are 0.\n        this.slope = 0;\n        this.yShift = 0;\n    }\n    /** Return the Beam y offset. */\n    getBeamYToDraw() {\n        const firstNote = this.notes[0];\n        const firstStemTipY = firstNote.getStemExtents().topY;\n        let beamY = firstStemTipY;\n        // For flat beams, set the first and last Y to the offset, rather than\n        //  using the note's stem extents.\n        if (this.renderOptions.flatBeams && this.renderOptions.flatBeamOffset) {\n            beamY = this.renderOptions.flatBeamOffset;\n        }\n        return beamY;\n    }\n    /**\n     * Create new stems for the notes in the beam, so that each stem\n     * extends into the beams.\n     */\n    applyStemExtensions() {\n        const { notes, slope, renderOptions: { showStemlets, stemletExtension, beamWidth }, } = this;\n        const yShift = this.yShift;\n        const beamCount = this._beamCount;\n        const firstNote = notes[0];\n        const firstStemTipY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        for (let i = 0; i < notes.length; ++i) {\n            const note = notes[i];\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                const { topY: stemTipY } = note.getStemExtents();\n                const beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + yShift;\n                const preBeamExtension = stem.getExtension();\n                const beamExtension = note.getStemDirection() === Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;\n                // Determine necessary extension for cross-stave notes in the beam group\n                let crossStemExtension = 0;\n                if (note.getStemDirection() !== this._stemDirection) {\n                    const beamCount = note.getGlyphProps().beamCount;\n                    crossStemExtension = (1 + (beamCount - 1) * 1.5) * this.renderOptions.beamWidth;\n                    /* This will be required if the partial beams are moved to the note side.\n                    if (i > 0 && note.getGlyph().beamCount > 1) {\n                      const prevBeamCount = this.notes[i - 1].getGlyph().beamCount;\n                      const beamDiff = Math.abs(prevBeamCount - beamCount);\n                      if (beamDiff > 0) crossStemExtension -= beamDiff * (this.renderOptions.beamWidth * 1.5);\n                    }\n                    */\n                }\n                stem.setExtension(preBeamExtension + beamExtension + crossStemExtension);\n                stem.adjustHeightForBeam();\n                if (note.isRest() && showStemlets) {\n                    const totalBeamWidth = (beamCount - 1) * beamWidth * 1.5 + beamWidth;\n                    stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemletExtension);\n                }\n            }\n        }\n    }\n    /** Return upper level beam direction. */\n    lookupBeamDirection(duration, prevTick, tick, nextTick, noteIndex) {\n        if (duration === '4') {\n            return BEAM_LEFT;\n        }\n        const forcedBeamDirection = this.forcedPartialDirections[noteIndex];\n        if (forcedBeamDirection)\n            return forcedBeamDirection;\n        const lookupDuration = `${Tables.durationToNumber(duration) / 2}`;\n        const prevNoteGetsBeam = prevTick < Tables.durationToTicks(lookupDuration);\n        const nextNoteGetsBeam = nextTick < Tables.durationToTicks(lookupDuration);\n        const noteGetsBeam = tick < Tables.durationToTicks(lookupDuration);\n        if (prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_BOTH;\n        }\n        else if (prevNoteGetsBeam && !nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_LEFT;\n        }\n        else if (!prevNoteGetsBeam && nextNoteGetsBeam && noteGetsBeam) {\n            return BEAM_RIGHT;\n        }\n        return this.lookupBeamDirection(lookupDuration, prevTick, tick, nextTick, noteIndex);\n    }\n    /** Get the x coordinates for the beam lines of specific `duration`. */\n    getBeamLines(duration) {\n        const tickOfDuration = Tables.durationToTicks(duration);\n        let beamStarted = false;\n        const beamLines = [];\n        let currentBeam = undefined;\n        const partialBeamLength = this.renderOptions.partialBeamLength;\n        let previousShouldBreak = false;\n        let tickTally = 0;\n        for (let i = 0; i < this.notes.length; ++i) {\n            const note = this.notes[i];\n            // See if we need to break secondary beams on this note.\n            const ticks = note.getTicks().value();\n            tickTally += ticks;\n            let shouldBreak = false;\n            // 8th note beams are always drawn.\n            if (parseInt(duration, 10) >= 8) {\n                // First, check to see if any indexes were set up through breakSecondaryAt()\n                shouldBreak = this.breakOnIndexes.indexOf(i) !== -1;\n                // If the secondary breaks were auto-configured in the render options,\n                //  handle that as well.\n                if (this.renderOptions.secondaryBreakTicks && tickTally >= this.renderOptions.secondaryBreakTicks) {\n                    tickTally = 0;\n                    shouldBreak = true;\n                }\n            }\n            const noteGetsBeam = note.getIntrinsicTicks() < tickOfDuration;\n            const stemX = note.getStemX() - Stem.WIDTH / 2;\n            // Check to see if the next note in the group will get a beam at this\n            //  level. This will help to inform the partial beam logic below.\n            const prevNote = this.notes[i - 1];\n            const nextNote = this.notes[i + 1];\n            const nextNoteGetsBeam = nextNote && nextNote.getIntrinsicTicks() < tickOfDuration;\n            const prevNoteGetsBeam = prevNote && prevNote.getIntrinsicTicks() < tickOfDuration;\n            const beamAlone = prevNote && nextNote && noteGetsBeam && !prevNoteGetsBeam && !nextNoteGetsBeam;\n            // const beamAlone = noteGetsBeam && !prevNoteGetsBeam && !nextNoteGetsBeam;\n            if (noteGetsBeam) {\n                // This note gets a beam at the current level\n                if (beamStarted) {\n                    // We're currently in the middle of a beam. Just continue it on to\n                    //  the stem X of the current note.\n                    currentBeam = beamLines[beamLines.length - 1];\n                    currentBeam.end = stemX;\n                    // If a secondary beam break is set up, end the beam right now.\n                    if (shouldBreak) {\n                        beamStarted = false;\n                        if (nextNote && !nextNoteGetsBeam && currentBeam.end === undefined) {\n                            // This note gets a beam,.but the next one does not. This means\n                            //  we need a partial pointing right.\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                    }\n                }\n                else {\n                    // No beam started yet. Start a new one.\n                    currentBeam = { start: stemX, end: undefined };\n                    beamStarted = true;\n                    if (beamAlone) {\n                        // previous and next beam exists and does not get a beam but current gets it.\n                        const prevTick = prevNote.getIntrinsicTicks();\n                        const nextTick = nextNote.getIntrinsicTicks();\n                        const tick = note.getIntrinsicTicks();\n                        const beamDirection = this.lookupBeamDirection(duration, prevTick, tick, nextTick, i);\n                        if ([BEAM_LEFT, BEAM_BOTH].includes(beamDirection)) {\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                        else {\n                            currentBeam.end = currentBeam.start + partialBeamLength;\n                        }\n                    }\n                    else if (!nextNoteGetsBeam) {\n                        // The next note doesn't get a beam. Draw a partial.\n                        if ((previousShouldBreak || i === 0) && nextNote) {\n                            // This is the first note (but not the last one), or it is\n                            //  following a secondary break. Draw a partial to the right.\n                            currentBeam.end = currentBeam.start + partialBeamLength;\n                        }\n                        else {\n                            // By default, draw a partial to the left.\n                            currentBeam.end = currentBeam.start - partialBeamLength;\n                        }\n                    }\n                    else if (shouldBreak) {\n                        // This note should have a secondary break after it. Even though\n                        //  we just started a beam, it needs to end immediately.\n                        currentBeam.end = currentBeam.start - partialBeamLength;\n                        beamStarted = false;\n                    }\n                    beamLines.push(currentBeam);\n                }\n            }\n            else {\n                // The current note does not get a beam.\n                beamStarted = false;\n            }\n            // Store the secondary break flag to inform the partial beam logic in\n            //  the next iteration of the loop.\n            previousShouldBreak = shouldBreak;\n        }\n        // Add a partial beam pointing left if this is the last note in the group\n        const lastBeam = beamLines[beamLines.length - 1];\n        if (lastBeam && lastBeam.end === undefined) {\n            lastBeam.end = lastBeam.start - partialBeamLength;\n        }\n        return beamLines;\n    }\n    /** Render the stems for each note. */\n    drawStems(ctx) {\n        this.notes.forEach((note) => {\n            const stem = note.getStem();\n            if (stem) {\n                const stemX = note.getStemX();\n                stem.setNoteHeadXBounds(stemX, stemX);\n                stem.setContext(ctx).drawWithStyle();\n            }\n        }, this);\n    }\n    // Render the beam lines\n    drawBeamLines(ctx) {\n        const validBeamDurations = ['4', '8', '16', '32', '64'];\n        const firstNote = this.notes[0];\n        let beamY = this.getBeamYToDraw();\n        const firstStemX = firstNote.getStemX();\n        const beamThickness = this.renderOptions.beamWidth * this._stemDirection;\n        // Draw the beams.\n        for (let i = 0; i < validBeamDurations.length; ++i) {\n            const duration = validBeamDurations[i];\n            const beamLines = this.getBeamLines(duration);\n            for (let j = 0; j < beamLines.length; ++j) {\n                const beamLine = beamLines[j];\n                const startBeamX = beamLine.start;\n                const startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);\n                const lastBeamX = beamLine.end;\n                if (lastBeamX) {\n                    const lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);\n                    ctx.beginPath();\n                    ctx.moveTo(startBeamX, startBeamY);\n                    ctx.lineTo(startBeamX, startBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY + beamThickness);\n                    ctx.lineTo(lastBeamX + 1, lastBeamY);\n                    ctx.closePath();\n                    ctx.fill();\n                }\n                else {\n                    throw new RuntimeError('NoLastBeamX', 'lastBeamX undefined.');\n                }\n            }\n            beamY += beamThickness * 1.5;\n        }\n    }\n    /** Pre-format the beam. */\n    preFormat() {\n        return this;\n    }\n    /**\n     * Post-format the beam. This can only be called after\n     * the notes in the beam have both `x` and `y` values. ie: they've\n     * been formatted and have staves.\n     */\n    postFormat() {\n        if (this.postFormatted)\n            return;\n        // Calculate a smart slope if we're not forcing the beams to be flat.\n        if (isTabNote(this.notes[0]) || this.renderOptions.flatBeams) {\n            this.calculateFlatSlope();\n        }\n        else {\n            this.calculateSlope();\n        }\n        this.applyStemExtensions();\n        this.postFormatted = true;\n    }\n    /** Render the beam to the canvas context */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        if (this.unbeamable)\n            return;\n        if (!this.postFormatted) {\n            this.postFormat();\n        }\n        ctx.openGroup('beam', this.getAttribute('id'));\n        this.drawStems(ctx);\n        this.drawBeamLines(ctx);\n        ctx.closeGroup();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\n// MIT License\nimport { Clef } from './clef';\nimport { Note } from './note';\nimport { Category } from './typeguard';\n/** ClefNote implements clef annotations in measures. */\nexport class ClefNote extends Note {\n    static get CATEGORY() {\n        return Category.ClefNote;\n    }\n    constructor(type, size = 'default', annotation) {\n        super({ duration: 'b' });\n        this.setType(type, size, annotation);\n        this.ignoreTicks = true;\n    }\n    /** Set clef type, size and annotation. */\n    setType(type, size, annotation) {\n        this.clef = new Clef(type, size, annotation);\n        this.setWidth(this.clef.getWidth());\n        return this;\n    }\n    /** Get associated clef. */\n    getClef() {\n        return this.clef;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    /** Render clef note. */\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        this.clef.setX(this.getAbsoluteX());\n        this.clef.setY(stave.getYForLine(this.clef.line));\n        this.clef.renderText(ctx, 0, 0);\n    }\n    getBoundingBox() {\n        return this.clef.getBoundingBox();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This file implements the `Crescendo` object which draws crescendos and\n// decrescendo dynamics markings. A `Crescendo` is initialized with a\n// duration and formatted as part of a `Voice` like any other `Note`\n// type in VexFlow. This object would most likely be formatted in a Voice\n// with `TextNotes` - which are used to represent other dynamics markings.\nimport { Note } from './note';\nimport { TickContext } from './tickcontext';\nimport { Category } from './typeguard';\nimport { log } from './util';\n// To enable logging for this class. Set `VexFlow.Crescendo.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Crescendo.DEBUG)\n        log('VexFlow.Crescendo', args);\n}\n// Helper to draw the hairpin.\nfunction renderHairpin(ctx, params) {\n    const beginX = params.beginX;\n    const endX = params.endX;\n    const y = params.y;\n    const halfHeight = params.height / 2;\n    ctx.beginPath();\n    if (params.reverse) {\n        ctx.moveTo(beginX, y - halfHeight);\n        ctx.lineTo(endX, y);\n        ctx.lineTo(beginX, y + halfHeight);\n    }\n    else {\n        ctx.moveTo(endX, y - halfHeight);\n        ctx.lineTo(beginX, y);\n        ctx.lineTo(endX, y + halfHeight);\n    }\n    ctx.stroke();\n    ctx.closePath();\n}\nexport class Crescendo extends Note {\n    /** Crescendo category string. */\n    static get CATEGORY() {\n        return Category.Crescendo;\n    }\n    // Initialize the crescendo's properties\n    constructor(noteStruct) {\n        var _a;\n        super(noteStruct);\n        this.options = {\n            // Extensions to the length of the crescendo on either side\n            extendLeft: 0,\n            extendRight: 0,\n            // Vertical shift\n            yShift: 0,\n        };\n        // Whether the object is a decrescendo\n        this.decrescendo = false;\n        // The staff line to be placed on\n        this.line = (_a = noteStruct.line) !== null && _a !== void 0 ? _a : 0;\n        // The height at the open end of the cresc/decresc\n        this.height = 15;\n    }\n    // Set the line to center the element on\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Set the full height at the open end\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    // Set whether the sign should be a descresendo by passing a bool\n    // to `decresc`\n    setDecrescendo(decresc) {\n        this.decrescendo = decresc;\n        return this;\n    }\n    // Preformat the note\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    // Render the Crescendo object onto the canvas\n    draw() {\n        const ctx = this.checkContext();\n        const stave = this.checkStave();\n        this.setRendered();\n        const tickContext = this.getTickContext();\n        const nextContext = TickContext.getNextContext(tickContext);\n        const beginX = this.getAbsoluteX();\n        const endX = nextContext ? nextContext.getX() : stave.getX() + stave.getWidth();\n        const y = stave.getYForLine(this.line + -3) + 1;\n        L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', beginX - endX);\n        renderHairpin(ctx, {\n            beginX: beginX - this.options.extendLeft,\n            endX: endX + this.options.extendRight,\n            y: y + this.options.yShift,\n            height: this.height,\n            reverse: this.decrescendo,\n        });\n    }\n}\nCrescendo.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements curves (for slurs)\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport var CurvePosition;\n(function (CurvePosition) {\n    CurvePosition[CurvePosition[\"NEAR_HEAD\"] = 1] = \"NEAR_HEAD\";\n    CurvePosition[CurvePosition[\"NEAR_TOP\"] = 2] = \"NEAR_TOP\";\n})(CurvePosition || (CurvePosition = {}));\nexport class Curve extends Element {\n    static get CATEGORY() {\n        return Category.Curve;\n    }\n    static get Position() {\n        return CurvePosition;\n    }\n    static get PositionString() {\n        return {\n            nearHead: CurvePosition.NEAR_HEAD,\n            nearTop: CurvePosition.NEAR_TOP,\n        };\n    }\n    // from: Start note\n    // to: End note\n    // options:\n    //    cps: List of control points\n    //    xShift: pixels to shift\n    //    yShift: pixels to shift\n    constructor(from, to, options) {\n        super();\n        this.renderOptions = Object.assign({ thickness: 2, xShift: 0, yShift: 10, position: CurvePosition.NEAR_HEAD, positionEnd: CurvePosition.NEAR_HEAD, invert: false, cps: [\n                { x: 0, y: 10 },\n                { x: 0, y: 10 },\n            ], openingDirection: 'auto' }, options);\n        this.setNotes(from, to);\n    }\n    setNotes(from, to) {\n        if (!from && !to) {\n            throw new RuntimeError('BadArguments', 'Curve needs to have either `from` or `to` set.');\n        }\n        this.from = from;\n        this.to = to;\n        return this;\n    }\n    /**\n     * @return {boolean} Returns true if this is a partial bar.\n     */\n    isPartial() {\n        return !this.from || !this.to;\n    }\n    renderCurve(params) {\n        var _a, _b;\n        const ctx = this.checkContext();\n        const xShift = this.renderOptions.xShift;\n        const yShift = this.renderOptions.yShift * params.direction;\n        const firstX = params.firstX + xShift;\n        const firstY = params.firstY + yShift;\n        const lastX = params.lastX - xShift;\n        const lastY = params.lastY + yShift;\n        const thickness = this.renderOptions.thickness;\n        const cps = this.renderOptions.cps;\n        const { x: cp0x, y: cp0y } = cps[0];\n        const { x: cp1x, y: cp1y } = cps[1];\n        const controlPointSpacing = (lastX - firstX) / (cps.length + 2);\n        ctx.beginPath();\n        ctx.moveTo(firstX, firstY);\n        ctx.bezierCurveTo(firstX + controlPointSpacing + cp0x, firstY + cp0y * params.direction, lastX - controlPointSpacing + cp1x, lastY + cp1y * params.direction, lastX, lastY);\n        if (!((_a = this.style) === null || _a === void 0 ? void 0 : _a.lineDash))\n            ctx.bezierCurveTo(lastX - controlPointSpacing + cp1x, lastY + (cp1y + thickness) * params.direction, firstX + controlPointSpacing + cp0x, firstY + (cp0y + thickness) * params.direction, firstX, firstY);\n        ctx.stroke();\n        ctx.closePath();\n        if (!((_b = this.style) === null || _b === void 0 ? void 0 : _b.lineDash))\n            ctx.fill();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.from;\n        const lastNote = this.to;\n        let firstX;\n        let lastX;\n        let firstY;\n        let lastY;\n        let stemDirection = 0;\n        let metric = 'baseY';\n        let endMetric = 'baseY';\n        function getPosition(position) {\n            return typeof position === 'string' ? Curve.PositionString[position] : position;\n        }\n        const position = getPosition(this.renderOptions.position);\n        const positionEnd = getPosition(this.renderOptions.positionEnd);\n        if (position === CurvePosition.NEAR_TOP) {\n            metric = 'topY';\n            endMetric = 'topY';\n        }\n        if (positionEnd === CurvePosition.NEAR_HEAD) {\n            endMetric = 'baseY';\n        }\n        else if (positionEnd === CurvePosition.NEAR_TOP) {\n            endMetric = 'topY';\n        }\n        if (firstNote) {\n            firstX = firstNote.getTieRightX();\n            stemDirection = firstNote.getStemDirection();\n            firstY = firstNote.getStemExtents()[metric];\n        }\n        else {\n            const stave = lastNote.checkStave();\n            firstX = stave.getTieStartX();\n            firstY = lastNote.getStemExtents()[metric];\n        }\n        if (lastNote) {\n            lastX = lastNote.getTieLeftX();\n            stemDirection = lastNote.getStemDirection();\n            lastY = lastNote.getStemExtents()[endMetric];\n        }\n        else {\n            const stave = firstNote.checkStave();\n            lastX = stave.getTieEndX();\n            lastY = firstNote.getStemExtents()[endMetric];\n        }\n        if (this.renderOptions.openingDirection === 'up') {\n            stemDirection = 1;\n        }\n        if (this.renderOptions.openingDirection === 'down') {\n            stemDirection = -1;\n        }\n        this.renderCurve({\n            firstX,\n            lastX,\n            firstY,\n            lastY,\n            direction: stemDirection * (this.renderOptions.invert === true ? -1 : 1),\n        });\n        return true;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// A generic text parsing class for VexFlow.\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `VexFlow.Parser.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Parser.DEBUG)\n        log('VexFlow.Parser', args);\n}\nconst NO_ERROR_POS = -1;\n// Converts parser results into an easy to reference list that can be\n// used in triggers. This function returns:\n// - nested array in which the leaf elements are string or null\n// - string (including empty strings)\n// - null\nfunction flattenMatches(r) {\n    if ('matchedString' in r)\n        return r.matchedString; // string\n    if ('results' in r)\n        return flattenMatches(r.results);\n    const results = r;\n    if (results.length === 1)\n        return flattenMatches(results[0]);\n    if (results.length === 0)\n        return null;\n    return results.map(flattenMatches); // nested array\n}\n// This is the base parser class. Given an arbitrary context-free grammar, it\n// can parse any line and execute code when specific rules are met (e.g.,\n// when a string is terminated.)\nexport class Parser {\n    // For an example of a simple grammar, take a look at tests/parser_tests.ts or\n    // the EasyScore grammar in easyscore.ts.\n    constructor(grammar) {\n        this.grammar = grammar;\n        this.line = '';\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Parse `line` using current grammar. Returns `{success: true}` if the\n    // line parsed correctly, otherwise returns `{success: false, errorPos: N}`\n    // where `errorPos` is the location of the error in the string.\n    parse(line) {\n        this.line = line;\n        this.pos = 0;\n        this.errorPos = NO_ERROR_POS;\n        const result = this.expect(this.grammar.begin());\n        result.errorPos = this.errorPos;\n        return result;\n    }\n    matchFail(returnPos) {\n        if (this.errorPos === NO_ERROR_POS)\n            this.errorPos = this.pos;\n        this.pos = returnPos;\n    }\n    matchSuccess() {\n        this.errorPos = NO_ERROR_POS;\n    }\n    // Look for `token` in this.line[this.pos], and return success\n    // if one is found. `token` is specified as a regular expression.\n    matchToken(token, noSpace = false) {\n        const regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\\\s*)');\n        const workingLine = this.line.slice(this.pos);\n        const result = workingLine.match(regexp);\n        if (result !== null) {\n            return {\n                success: true,\n                matchedString: result[2],\n                incrementPos: result[1].length,\n                pos: this.pos,\n            };\n        }\n        else {\n            return { success: false, pos: this.pos };\n        }\n    }\n    // Execute rule to match a sequence of tokens (or rules). If `maybe` is\n    // set, then return success even if the token is not found, but reset\n    // the position before exiting.\n    // TODO: expectOne(...) is never called with the `maybe` parameter.\n    expectOne(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let allMatches = true;\n        let oneMatch = false;\n        maybe = maybe === true || rule.maybe === true;\n        // Execute all sub rules in sequence.\n        if (rule.expect) {\n            for (const next of rule.expect) {\n                const localPos = this.pos;\n                const result = this.expect(next);\n                // If `rule.or` is set, then return success if any one\n                // of the subrules match, else all subrules must match.\n                if (result.success) {\n                    results.push(result);\n                    oneMatch = true;\n                    if (rule.or)\n                        break;\n                }\n                else {\n                    allMatches = false;\n                    if (!rule.or) {\n                        this.pos = localPos;\n                        break;\n                    }\n                }\n            }\n        }\n        const gotOne = (rule.or && oneMatch) || allMatches;\n        const success = gotOne || maybe === true;\n        const numMatches = gotOne ? 1 : 0;\n        if (maybe && !gotOne)\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Try to match multiple (one or more) instances of the rule. If `maybe` is set,\n    // then a failed match is also a success (but the position is reset).\n    expectOneOrMore(rule, maybe = false) {\n        const results = [];\n        const pos = this.pos;\n        let numMatches = 0;\n        let more = true;\n        do {\n            const result = this.expectOne(rule);\n            if (result.success && result.results) {\n                numMatches++;\n                results.push(result.results);\n            }\n            else {\n                more = false;\n            }\n        } while (more);\n        const success = numMatches > 0 || maybe === true;\n        if (maybe && !(numMatches > 0))\n            this.pos = pos;\n        if (success) {\n            this.matchSuccess();\n        }\n        else {\n            this.matchFail(pos);\n        }\n        return { success, results, numMatches };\n    }\n    // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.\n    expectZeroOrMore(rule) {\n        return this.expectOneOrMore(rule, true);\n    }\n    // Execute the rule produced by the provided `rules` function. This\n    // offloads to one of the above matchers and consolidates the results. It is also\n    // responsible for executing any code triggered by the rule (in `rule.run`.)\n    expect(ruleFunc) {\n        L('Evaluating rule function:', ruleFunc);\n        if (!ruleFunc) {\n            throw new RuntimeError('Invalid rule function');\n        }\n        let result;\n        // Get rule from Grammar class.\n        // expect(...) handles both lexing & parsing:\n        // - lexer rules produce tokens.\n        // - parser rules produce expressions which may trigger code via the\n        //   { run: () => ... } trigger functions in easyscore.ts.\n        //   These functions build the VexFlow objects that are displayed on screen.\n        const rule = ruleFunc.bind(this.grammar)();\n        if (rule.token) {\n            // A lexer rule has a `token` property.\n            // Base case: parse the regex and throw an error if the\n            // line doesn't match.\n            result = this.matchToken(rule.token, rule.noSpace === true);\n            if (result.success) {\n                // Token match! Update position and throw away parsed portion\n                // of string.\n                this.pos += result.incrementPos;\n            }\n        }\n        else if (rule.expect) {\n            // A parser rule has an `expect` property.\n            if (rule.oneOrMore) {\n                result = this.expectOneOrMore(rule);\n            }\n            else if (rule.zeroOrMore) {\n                result = this.expectZeroOrMore(rule);\n            }\n            else {\n                result = this.expectOne(rule);\n            }\n        }\n        else {\n            L(rule);\n            throw new RuntimeError('Bad grammar! No `token` or `expect` property ' + rule);\n        }\n        // If there's a trigger attached to this rule, then run it.\n        // Make the matches accessible through `state.matches` in the\n        // `run: (state) => ...` trigger.\n        const matches = [];\n        result.matches = matches;\n        if (result.results) {\n            result.results.forEach((r) => matches.push(flattenMatches(r)));\n        }\n        if (rule.run && result.success) {\n            rule.run({ matches });\n        }\n        return result;\n    }\n}\nParser.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Articulation } from './articulation';\nimport { Dot } from './dot';\nimport { FretHandFinger } from './frethandfinger';\nimport { Music } from './music';\nimport { Parser } from './parser';\nimport { Stem } from './stem';\nimport { defined, log, RuntimeError } from './util';\n// To enable logging for this class. Set `VexFlow.EasyScore.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (EasyScore.DEBUG)\n        log('VexFlow.EasyScore', args);\n}\nexport class EasyScoreGrammar {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    begin() {\n        return this.LINE;\n    }\n    LINE() {\n        return {\n            expect: [this.PIECE, this.PIECES, this.EOL],\n        };\n    }\n    PIECE() {\n        return {\n            expect: [this.CHORDORNOTE, this.PARAMS],\n            run: () => this.builder.commitPiece(),\n        };\n    }\n    PIECES() {\n        return {\n            expect: [this.COMMA, this.PIECE],\n            zeroOrMore: true,\n        };\n    }\n    PARAMS() {\n        return {\n            expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS],\n        };\n    }\n    CHORDORNOTE() {\n        return {\n            expect: [this.CHORD, this.SINGLENOTE],\n            or: true,\n        };\n    }\n    CHORD() {\n        return {\n            expect: [this.LPAREN, this.NOTES, this.RPAREN],\n            run: (state) => this.builder.addChord(state.matches[1]),\n        };\n    }\n    NOTES() {\n        return {\n            expect: [this.NOTE],\n            oneOrMore: true,\n        };\n    }\n    NOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n        };\n    }\n    SINGLENOTE() {\n        return {\n            expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],\n            run: (state) => {\n                const s = state;\n                this.builder.addSingleNote(s.matches[0], s.matches[1], s.matches[2]);\n            },\n        };\n    }\n    ACCIDENTAL() {\n        return {\n            expect: [this.MICROTONES, this.ACCIDENTALS],\n            maybe: true,\n            or: true,\n        };\n    }\n    DOTS() {\n        return {\n            expect: [this.DOT],\n            zeroOrMore: true,\n            run: (state) => this.builder.setNoteDots(state.matches),\n        };\n    }\n    TYPE() {\n        return {\n            expect: [this.SLASH, this.MAYBESLASH, this.TYPES],\n            maybe: true,\n            run: (state) => this.builder.setNoteType(state.matches[2]),\n        };\n    }\n    DURATION() {\n        return {\n            expect: [this.SLASH, this.DURATIONS],\n            maybe: true,\n            run: (state) => this.builder.setNoteDuration(state.matches[1]),\n        };\n    }\n    OPTS() {\n        return {\n            expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],\n            maybe: true,\n        };\n    }\n    KEYVALS() {\n        return {\n            expect: [this.COMMA, this.KEYVAL],\n            zeroOrMore: true,\n        };\n    }\n    KEYVAL() {\n        const unquote = (str) => str.slice(1, -1);\n        return {\n            expect: [this.KEY, this.EQUALS, this.VAL],\n            run: (state) => this.builder.addNoteOption(state.matches[0], unquote(state.matches[2])),\n        };\n    }\n    VAL() {\n        return {\n            expect: [this.SVAL, this.DVAL],\n            or: true,\n        };\n    }\n    KEY() {\n        return { token: '[a-zA-Z][a-zA-Z0-9]*' };\n    }\n    DVAL() {\n        return { token: '[\"][^\"]*[\"]' };\n    }\n    SVAL() {\n        return { token: \"['][^']*[']\" };\n    }\n    NOTENAME() {\n        return { token: '[a-gA-G]' };\n    }\n    OCTAVE() {\n        return { token: '[0-9]+' };\n    }\n    ACCIDENTALS() {\n        return { token: 'bb|b|##|#|n' };\n    }\n    MICROTONES() {\n        return { token: 'bbs|bss|bs|db|d|\\\\+\\\\+-|\\\\+-|\\\\+\\\\+|\\\\+|k|o' };\n    }\n    DURATIONS() {\n        return { token: '[0-9whq]+' };\n    }\n    TYPES() {\n        return { token: '[rRsSmMhHgG]' };\n    }\n    LPAREN() {\n        return { token: '[(]' };\n    }\n    RPAREN() {\n        return { token: '[)]' };\n    }\n    COMMA() {\n        return { token: '[,]' };\n    }\n    DOT() {\n        return { token: '[.]' };\n    }\n    SLASH() {\n        return { token: '[/]' };\n    }\n    MAYBESLASH() {\n        return { token: '[/]?' };\n    }\n    EQUALS() {\n        return { token: '[=]' };\n    }\n    LBRACKET() {\n        return { token: '\\\\[' };\n    }\n    RBRACKET() {\n        return { token: '\\\\]' };\n    }\n    EOL() {\n        return { token: '$' };\n    }\n}\nexport class Piece {\n    constructor(duration) {\n        this.chord = [];\n        this.dots = 0;\n        this.options = {};\n        this.duration = duration;\n    }\n}\nexport class Builder {\n    constructor(factory) {\n        this.commitHooks = [];\n        this.factory = factory;\n        this.reset();\n    }\n    reset(options) {\n        this.options = Object.assign({ stem: 'auto', clef: 'treble' }, options);\n        this.elements = { notes: [], accidentals: [] };\n        this.rollingDuration = '8';\n        this.resetPiece();\n    }\n    getFactory() {\n        return this.factory;\n    }\n    getElements() {\n        return this.elements;\n    }\n    addCommitHook(commitHook) {\n        this.commitHooks.push(commitHook);\n    }\n    resetPiece() {\n        L('resetPiece');\n        this.piece = new Piece(this.rollingDuration);\n    }\n    setNoteDots(dots) {\n        L('setNoteDots:', dots);\n        if (dots)\n            this.piece.dots = dots.length;\n    }\n    setNoteDuration(duration) {\n        L('setNoteDuration:', duration);\n        this.rollingDuration = this.piece.duration = duration || this.rollingDuration;\n    }\n    setNoteType(type) {\n        L('setNoteType:', type);\n        if (type)\n            this.piece.type = type;\n    }\n    addNoteOption(key, value) {\n        L('addNoteOption: key:', key, 'value:', value);\n        this.piece.options[key] = value;\n    }\n    addNote(key, accid, octave) {\n        L('addNote:', key, accid, octave);\n        this.piece.chord.push({\n            key: key,\n            accid,\n            octave,\n        });\n    }\n    addSingleNote(key, accid, octave) {\n        L('addSingleNote:', key, accid, octave);\n        this.addNote(key, accid, octave);\n    }\n    // notes is an array with 3 entries\n    addChord(notes) {\n        L('startChord');\n        if (typeof notes[0] !== 'object') {\n            this.addSingleNote(notes[0]);\n        }\n        else {\n            notes.forEach((n) => {\n                if (n)\n                    this.addNote(...n); // n => [string, string | null, string]\n            });\n        }\n        L('endChord');\n    }\n    commitPiece() {\n        L('commitPiece');\n        const { factory } = this;\n        if (!factory)\n            return;\n        const options = Object.assign(Object.assign({}, this.options), this.piece.options);\n        // reset() sets this.options.stem & this.options.clef but we check to make sure nothing has changed.\n        // e.g., auto | up | down\n        const stem = defined(options.stem, 'BadArguments', 'options.stem is not defined').toLowerCase();\n        // e.g., treble | bass\n        const clef = defined(options.clef, 'BadArguments', 'options.clef is not defined').toLowerCase();\n        const { chord, duration, dots, type } = this.piece;\n        // Create a string[] that will be assigned to the .keys property of the StaveNote.\n        // Each string in the array represents a note pitch and is of the form: {NoteName}{Accidental}/{Octave}\n        // Only standard accidentals are included in the .keys property. Microtonal accidentals are not included.\n        const standardAccidentals = Music.accidentals;\n        const keys = chord.map((notePiece) => {\n            var _a;\n            return notePiece.key +\n                (standardAccidentals.includes((_a = notePiece.accid) !== null && _a !== void 0 ? _a : '') ? notePiece.accid : '') +\n                '/' +\n                notePiece.octave;\n        });\n        const autoStem = stem === 'auto'; // StaveNoteStruct expects the underscore & lowercase.\n        // Build a GhostNote or StaveNote using the information we gathered.\n        const note = (type === null || type === void 0 ? void 0 : type.toLowerCase()) === 'g'\n            ? factory.GhostNote({ duration, dots })\n            : factory.StaveNote({ keys, duration, dots, type, clef, autoStem });\n        if (!autoStem)\n            note.setStemDirection(stem === 'up' ? Stem.UP : Stem.DOWN);\n        // Attach accidentals.\n        const accidentals = [];\n        chord.forEach((notePiece, index) => {\n            const accid = notePiece.accid;\n            if (typeof accid === 'string') {\n                const accidental = factory.Accidental({ type: accid });\n                note.addModifier(accidental, index);\n                accidentals.push(accidental);\n            }\n            else {\n                accidentals.push(undefined);\n            }\n        });\n        // Attach dots.\n        for (let i = 0; i < dots; i++)\n            Dot.buildAndAttach([note], { all: true });\n        this.commitHooks.forEach((commitHook) => commitHook(options, note, this));\n        this.elements.notes.push(note);\n        this.elements.accidentals.push(accidentals);\n        this.resetPiece();\n    }\n}\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setId(options, note) {\n    if (options.id === undefined)\n        return;\n    note.setAttribute('id', options.id);\n}\n// Used by setClass() below.\nconst commaSeparatedRegex = /\\s*,\\s*/;\n/**\n * Commit hook used by EasyScore.setOptions().\n */\nfunction setClass(options, note) {\n    if (options.class === undefined)\n        return;\n    options.class.split(commaSeparatedRegex).forEach((className) => note.addClass(className));\n}\n/**\n * EasyScore implements a parser for a simple language to generate VexFlow objects.\n */\nexport class EasyScore {\n    constructor(options = {}) {\n        this.defaults = {\n            clef: 'treble',\n            time: '4/4',\n            stem: 'auto',\n        };\n        this.setOptions(options);\n    }\n    /**\n     * Set the score defaults.\n     * clef must be set appropriately to avoid errors when adding Staves.\n     * @param defaults.clef default clef ( treble | bass ...) see {@link Clef.types}\n     * @param defaults.time default time signature ( 4/4 | 9/8 ...)\n     * @param defaults.stem default stem arrangement (auto | up | down)\n     * @returns this\n     */\n    set(defaults) {\n        this.defaults = Object.assign(Object.assign({}, this.defaults), defaults);\n        return this;\n    }\n    /**\n     * @param options.factory is required.\n     * @returns this\n     */\n    setOptions(options) {\n        var _a, _b;\n        const factory = options.factory; // ! operator, because options.factory was set in Factory.EasyScore().\n        const builder = (_a = options.builder) !== null && _a !== void 0 ? _a : new Builder(factory);\n        this.options = Object.assign(Object.assign({ commitHooks: [setId, setClass, Articulation.easyScoreHook, FretHandFinger.easyScoreHook], throwOnError: false }, options), { factory,\n            builder });\n        this.factory = factory;\n        this.builder = builder;\n        this.grammar = new EasyScoreGrammar(this.builder);\n        this.parser = new Parser(this.grammar);\n        (_b = this.options.commitHooks) === null || _b === void 0 ? void 0 : _b.forEach((commitHook) => this.addCommitHook(commitHook));\n        return this;\n    }\n    setContext(context) {\n        this.factory.setContext(context);\n        return this;\n    }\n    parse(line, options = {}) {\n        this.builder.reset(options);\n        const result = this.parser.parse(line);\n        if (!result.success && this.options.throwOnError) {\n            L(result);\n            throw new RuntimeError('Error parsing line: ' + line);\n        }\n        return result;\n    }\n    beam(notes, options) {\n        this.factory.Beam({ notes, options });\n        return notes;\n    }\n    tuplet(notes, options) {\n        this.factory.Tuplet({ notes, options });\n        return notes;\n    }\n    notes(line, options = {}) {\n        options = Object.assign({ clef: this.defaults.clef, stem: this.defaults.stem }, options);\n        this.parse(line, options);\n        return this.builder.getElements().notes;\n    }\n    voice(notes, options = {}) {\n        options = Object.assign({ time: this.defaults.time }, options);\n        return this.factory.Voice(options).addTickables(notes);\n    }\n    addCommitHook(commitHook) {\n        this.builder.addCommitHook(commitHook);\n    }\n}\nEasyScore.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\nimport { StemmableNote } from './stemmablenote';\nimport { Category, isAnnotation } from './typeguard';\nimport { RuntimeError } from './util';\nconst ERROR_MSG = 'Ghost note must have valid initialization data to identify duration.';\nexport class GhostNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.GhostNote;\n    }\n    constructor(parameter) {\n        if (!parameter) {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        let noteStruct;\n        if (typeof parameter === 'string') {\n            // Preserve backwards-compatibility\n            noteStruct = { duration: parameter };\n        }\n        else if (typeof parameter === 'object') {\n            noteStruct = parameter;\n        }\n        else {\n            throw new RuntimeError('BadArguments', ERROR_MSG);\n        }\n        super(noteStruct);\n        // Note properties\n        this.setWidth(0);\n    }\n    /**\n     * @returns true if this note is a type of rest. Rests don't have pitches, but take up space in the score.\n     */\n    isRest() {\n        return true;\n    }\n    setStave(stave) {\n        super.setStave(stave);\n        return this;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        // Draw Annotations\n        this.setRendered();\n        for (let i = 0; i < this.modifiers.length; ++i) {\n            const modifier = this.modifiers[i];\n            if (isAnnotation(modifier)) {\n                modifier.setContext(this.getContext());\n                modifier.drawWithStyle();\n            }\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// Any glyph that is set to appear on a Stave and take up musical time and graphical space.\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class GlyphNote extends Note {\n    static get CATEGORY() {\n        return Category.GlyphNote;\n    }\n    constructor(glyph, noteStruct, options) {\n        super(noteStruct);\n        this.options = Object.assign({ ignoreTicks: false, line: 2 }, options);\n        // Note properties\n        this.ignoreTicks = this.options.ignoreTicks;\n        this.setGlyph(glyph);\n    }\n    setGlyph(glyph) {\n        this.text = glyph;\n        return this;\n    }\n    preFormat() {\n        if (!this.preFormatted && this.modifierContext) {\n            this.modifierContext.preFormat();\n        }\n        this.preFormatted = true;\n        return this;\n    }\n    drawModifiers() {\n        const ctx = this.checkContext();\n        for (let i = 0; i < this.modifiers.length; i++) {\n            const modifier = this.modifiers[i];\n            modifier.setContext(ctx);\n            modifier.drawWithStyle();\n        }\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = stave.checkContext();\n        this.setRendered();\n        ctx.openGroup('glyphNote', this.getAttribute('id'));\n        this.x = this.isCenterAligned() ? this.getAbsoluteX() - this.getWidth() / 2 : this.getAbsoluteX();\n        this.y = stave.getYForLine(this.options.line);\n        this.renderText(ctx, 0, 0);\n        this.drawModifiers();\n        ctx.closeGroup();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { StaveNote } from './stavenote';\nimport { Stem } from './stem';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class GraceNote extends StaveNote {\n    static get CATEGORY() {\n        return Category.GraceNote;\n    }\n    static get LEDGER_LINE_OFFSET() {\n        return 2;\n    }\n    constructor(noteStruct) {\n        super(Object.assign({ strokePx: GraceNote.LEDGER_LINE_OFFSET }, noteStruct));\n        this.slash = noteStruct.slash || false;\n        this.slur = true;\n        this.buildNoteHeads();\n        this.width = 3;\n    }\n    getStemExtension() {\n        if (this.stemExtensionOverride) {\n            return this.stemExtensionOverride;\n        }\n        let ret = super.getStemExtension();\n        ret = Stem.HEIGHT * this.getFontScale() - Stem.HEIGHT + ret;\n        return ret;\n    }\n    draw() {\n        super.draw();\n        this.setRendered();\n        const stem = this.stem;\n        if (this.slash && stem) {\n            const scale = this.getFontScale();\n            let slashBBox = undefined;\n            const beam = this.beam;\n            if (beam) {\n                // FIXME: should render slash after beam?\n                if (!beam.postFormatted) {\n                    beam.postFormat();\n                }\n                slashBBox = this.calcBeamedNotesSlashBBox(8 * scale, 8 * scale, {\n                    stem: 6 * scale,\n                    beam: 5 * scale,\n                });\n            }\n            else {\n                const stemDirection = this.getStemDirection();\n                const noteHeadBounds = this.getNoteHeadBounds();\n                const noteHeadWidth = this.noteHeads[0].getWidth();\n                const x = stemDirection === Stem.DOWN ? this.getAbsoluteX() : this.getAbsoluteX() + noteHeadWidth;\n                const defaultOffsetY = (Tables.STEM_HEIGHT * scale) / 2;\n                const y = stemDirection === Stem.DOWN ? noteHeadBounds.yBottom + defaultOffsetY : noteHeadBounds.yTop - defaultOffsetY;\n                if (stemDirection === Stem.DOWN) {\n                    slashBBox = {\n                        x1: x - noteHeadWidth,\n                        y1: y - noteHeadWidth,\n                        x2: x + noteHeadWidth,\n                        y2: y + noteHeadWidth,\n                    };\n                }\n                else {\n                    slashBBox = {\n                        x1: x - noteHeadWidth,\n                        y1: y + noteHeadWidth,\n                        x2: x + noteHeadWidth,\n                        y2: y - noteHeadWidth,\n                    };\n                }\n            }\n            // FIXME: avoid staff lines, ledger lines or others.\n            const ctx = this.checkContext();\n            ctx.setLineWidth(1 * scale); // FIXME: use more appropriate value.\n            ctx.beginPath();\n            ctx.moveTo(slashBBox.x1, slashBBox.y1);\n            ctx.lineTo(slashBBox.x2, slashBBox.y2);\n            ctx.closePath();\n            ctx.stroke();\n        }\n    }\n    calcBeamedNotesSlashBBox(slashStemOffset, slashBeamOffset, protrusions) {\n        const beam = this.beam;\n        if (!beam)\n            throw new RuntimeError('NoBeam', \"Can't calculate without a beam.\");\n        const beamSlope = beam.slope;\n        const isBeamEndNote = beam.notes[beam.notes.length - 1] === this;\n        const scaleX = isBeamEndNote ? -1 : 1;\n        const beamAngle = Math.atan(beamSlope * scaleX);\n        // slash line intersecting point on beam.\n        const iPointOnBeam = {\n            dx: Math.cos(beamAngle) * slashBeamOffset,\n            dy: Math.sin(beamAngle) * slashBeamOffset,\n        };\n        slashStemOffset *= this.getStemDirection();\n        const slashAngle = Math.atan((iPointOnBeam.dy - slashStemOffset) / iPointOnBeam.dx);\n        const protrusionStemDeltaX = Math.cos(slashAngle) * protrusions.stem * scaleX;\n        const protrusionStemDeltaY = Math.sin(slashAngle) * protrusions.stem;\n        const protrusionBeamDeltaX = Math.cos(slashAngle) * protrusions.beam * scaleX;\n        const protrusionBeamDeltaY = Math.sin(slashAngle) * protrusions.beam;\n        const stemX = this.getStemX();\n        const stem0X = beam.notes[0].getStemX();\n        const stemY = beam.getBeamYToDraw() + (stemX - stem0X) * beamSlope;\n        const ret = {\n            x1: stemX - protrusionStemDeltaX,\n            y1: stemY + slashStemOffset - protrusionStemDeltaY,\n            x2: stemX + iPointOnBeam.dx * scaleX + protrusionBeamDeltaX,\n            y2: stemY + iPointOnBeam.dy + protrusionBeamDeltaY,\n        };\n        return ret;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Mark Meeus 2019\nimport { KeySignature } from './keysignature';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nexport class KeySigNote extends Note {\n    static get CATEGORY() {\n        return Category.KeySigNote;\n    }\n    constructor(keySpec, cancelKeySpec, alterKeySpec) {\n        super({ duration: 'b' });\n        this.keySignature = new KeySignature(keySpec, cancelKeySpec, alterKeySpec);\n        // Note properties\n        this.ignoreTicks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        this.keySignature.setStave(this.checkStave());\n        this.setWidth(this.keySignature.getWidth());\n        return this;\n    }\n    draw() {\n        const ctx = this.checkStave().checkContext();\n        this.setRendered();\n        this.keySignature.setX(this.getAbsoluteX());\n        this.keySignature.setContext(ctx);\n        this.keySignature.drawWithStyle();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// This class implements multiple measure rests.\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { StaveModifierPosition } from './stavemodifier';\nimport { Tables } from './tables';\nimport { Category, isBarline } from './typeguard';\nimport { defined, RuntimeError } from './util';\nexport class MultiMeasureRest extends Element {\n    static get CATEGORY() {\n        return Category.MultiMeasureRest;\n    }\n    /**\n     *\n     * @param numberOfMeasures Number of measures.\n     * @param options The options object.\n     */\n    constructor(numberOfMeasures, options) {\n        var _a;\n        super();\n        this.xs = { left: NaN, right: NaN };\n        this.hasPaddingLeft = false;\n        this.hasPaddingRight = false;\n        this.hasLineThickness = false;\n        this.hasSymbolSpacing = false;\n        const fontSize = (_a = options.numberGlyphPoint) !== null && _a !== void 0 ? _a : Metrics.get('MultiMeasureRest.fontSize'); // same as TimeSignature.\n        this.fontInfo.size = fontSize;\n        this.numberOfMeasures = numberOfMeasures;\n        this.text = '';\n        const t = `${this.numberOfMeasures}`;\n        for (const digit of t) {\n            // 0xe080 is timeSig0. We calculate the code point for timeSigN to assemble the digits via SMuFL glyphs.\n            this.text += String.fromCodePoint(0xe080 + Number(digit));\n        }\n        // Keep track of whether these four options were provided.\n        this.hasPaddingLeft = typeof options.paddingLeft === 'number';\n        this.hasPaddingRight = typeof options.paddingRight === 'number';\n        this.hasLineThickness = typeof options.lineThickness === 'number';\n        this.hasSymbolSpacing = typeof options.symbolSpacing === 'number';\n        this.renderOptions = Object.assign({ useSymbols: false, showNumber: true, numberLine: -0.5, numberGlyphPoint: fontSize, line: 2, spacingBetweenLinesPx: Tables.STAVE_LINE_DISTANCE, serifThickness: 2, semibreveRestGlyphScale: Metrics.get('fontSize'), paddingLeft: 0, paddingRight: 0, lineThickness: 5, symbolSpacing: 0 }, options);\n    }\n    getXs() {\n        return this.xs;\n    }\n    setStave(stave) {\n        this.stave = stave;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    checkStave() {\n        return defined(this.stave, 'NoStave', 'No stave attached to instance.');\n    }\n    drawLine(stave, ctx, left, right) {\n        const options = this.renderOptions;\n        const y = stave.getYForLine(options.line);\n        const padding = (right - left) * 0.1;\n        left += padding;\n        right -= padding;\n        let txt = '\\ue4ef'; /*restHBarLeft*/\n        const el = new Element();\n        el.setText(txt);\n        // Add middle bars until the right padding is reached\n        const elWidth = el.getWidth();\n        if (!elWidth) {\n            throw new RuntimeError('Cannot drawLine if width is 0');\n        }\n        for (let i = 1; (i + 2) * elWidth + left <= right; i++) {\n            txt += '\\ue4f0'; /*restHBarMiddle*/\n        }\n        txt += '\\ue4f1'; /*restHBarRight*/\n        el.setText(txt);\n        el.renderText(ctx, left + (right - left) * 0.5 - el.getWidth() * 0.5, y);\n    }\n    drawSymbols(stave, ctx, left, right) {\n        const n4 = Math.floor(this.numberOfMeasures / 4);\n        const n = this.numberOfMeasures % 4;\n        const n2 = Math.floor(n / 2);\n        const n1 = n % 2;\n        const options = this.renderOptions;\n        const elMiddle = new Element();\n        let txt = '';\n        for (let i = 0; i < n4; ++i) {\n            txt += Glyphs.restLonga + ' ';\n        }\n        for (let i = 0; i < n2; ++i) {\n            txt += Glyphs.restDoubleWhole + ' ';\n        }\n        elMiddle.setText(txt);\n        const elTop = new Element();\n        txt = '';\n        for (let i = 0; i < n1; ++i) {\n            txt += Glyphs.restWhole + ' ';\n        }\n        elTop.setText(txt);\n        const width = elMiddle.getWidth() + elTop.getWidth();\n        let x = left + (right - left) * 0.5 - width * 0.5;\n        const line = options.line;\n        const yTop = stave.getYForLine(line - 1);\n        const yMiddle = stave.getYForLine(line);\n        elMiddle.renderText(ctx, x, yMiddle);\n        x += elMiddle.getWidth();\n        elTop.renderText(ctx, x, yTop);\n        x += elTop.getWidth();\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const stave = this.checkStave();\n        let left = stave.getNoteStartX();\n        let right = stave.getNoteEndX();\n        // FIXME: getNoteStartX() returns x + 5(barline width)\n        //        getNoteEndX() returns x + width(no barline width)\n        // See Stave constructor. How do we fix this?\n        // Here, we subtract the barline width.\n        const begModifiers = stave.getModifiers(StaveModifierPosition.BEGIN);\n        if (begModifiers.length === 1 && isBarline(begModifiers[0])) {\n            left -= begModifiers[0].getWidth();\n        }\n        const options = this.renderOptions;\n        if (this.hasPaddingLeft) {\n            left = stave.getX() + options.paddingLeft;\n        }\n        if (this.hasPaddingRight) {\n            right = stave.getX() + stave.getWidth() - options.paddingRight;\n        }\n        this.xs.left = left;\n        this.xs.right = right;\n        if (options.useSymbols) {\n            this.drawSymbols(stave, ctx, left, right);\n        }\n        else {\n            this.drawLine(stave, ctx, left, right);\n        }\n        if (options.showNumber) {\n            this.renderText(ctx, left + (right - left) * 0.5 - this.width * 0.5, stave.getYForLine(options.numberLine) - this.height * 0.5);\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (PedalMarking.DEBUG)\n        log('VexFlow.PedalMarking', args);\n}\n/**\n * PedalMarking implements different types of pedal markings. These notation\n * elements indicate to the performer when to depress and release the a pedal.\n *\n * In order to create \"Sostenuto\", and \"una corda\" markings, you must set\n * custom text for the release/depress pedal markings.\n */\nexport class PedalMarking extends Element {\n    static get CATEGORY() {\n        return Category.PedalMarking;\n    }\n    /**\n     * Create a sustain pedal marking. Returns the defaults PedalMarking.\n     * Which uses the traditional \"Ped\" and \"*\"\" markings.\n     */\n    static createSustain(notes) {\n        const pedal = new PedalMarking(notes);\n        return pedal;\n    }\n    /** Create a sostenuto pedal marking */\n    static createSostenuto(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.MIXED);\n        pedal.setCustomText('Sost. Ped.');\n        return pedal;\n    }\n    /** Create an una corda pedal marking */\n    static createUnaCorda(notes) {\n        const pedal = new PedalMarking(notes);\n        pedal.setType(PedalMarking.type.TEXT);\n        pedal.setCustomText('una corda', 'tre corda');\n        return pedal;\n    }\n    constructor(notes) {\n        super();\n        this.notes = notes;\n        this.type = PedalMarking.type.TEXT;\n        this.line = 0;\n        // Text for the release/depress markings\n        this.depressText = PedalMarking.GLYPHS.pedalDepress;\n        this.releaseText = PedalMarking.GLYPHS.pedalRelease;\n        this.renderOptions = {\n            bracketHeight: 10,\n            textMarginRight: 6,\n            bracketLineWidth: 1,\n            color: 'black',\n        };\n    }\n    /** Set pedal type. */\n    setType(type) {\n        type = typeof type === 'string' ? PedalMarking.typeString[type] : type;\n        if (type >= PedalMarking.type.TEXT && type <= PedalMarking.type.MIXED) {\n            this.type = type;\n        }\n        return this;\n    }\n    /**\n     * Set custom text for the `depress`/`release` pedal markings. No text is\n     * set if the parameter is falsy.\n     */\n    setCustomText(depress, release) {\n        this.depressText = depress || '';\n        this.releaseText = release || '';\n        this.setFont(Metrics.getFontInfo('PedalMarking.text'));\n        return this;\n    }\n    /** Set the staff line to render the markings on. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Draw the bracket based pedal markings. */\n    drawBracketed() {\n        const ctx = this.checkContext();\n        let isPedalDepressed = false;\n        let prevX;\n        let prevY;\n        let textWidth = 0;\n        // Iterate through each note\n        this.notes.forEach((note, index, notes) => {\n            var _a, _b, _c, _d;\n            // Each note triggers the opposite pedal action\n            isPedalDepressed = !isPedalDepressed;\n            // Get the initial coordinates for the note\n            const x = note.getAbsoluteX();\n            const y = note.checkStave().getYForBottomText(this.line + 3);\n            // Throw if current note is positioned before the previous note\n            if (x < prevX) {\n                throw new RuntimeError('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');\n            }\n            // Determine if the previous or next note are the same\n            // as the current note. We need to keep track of this for\n            // when adjustments are made for the release+depress action\n            const nextNoteIsSame = notes[index + 1] === note;\n            const prevNoteIsSame = notes[index - 1] === note;\n            let xShift = 0;\n            if (isPedalDepressed) {\n                // Adjustment for release+depress\n                xShift = prevNoteIsSame ? 5 : 0;\n                if (this.type === PedalMarking.type.MIXED && !prevNoteIsSame) {\n                    // For MIXED style, start with text instead of bracket\n                    textWidth = ctx.measureText(this.depressText).width;\n                    ctx.fillText(this.depressText, x, y);\n                    // Adjust the xShift for the next note\n                    xShift = textWidth + this.renderOptions.textMarginRight;\n                }\n                else {\n                    // Draw start bracket\n                    ctx.beginPath();\n                    ctx.moveTo(x, y - this.renderOptions.bracketHeight);\n                    ctx.lineTo(x + xShift, y);\n                    ctx.stroke();\n                    ctx.closePath();\n                }\n            }\n            else {\n                // Get the current note index and the total notes in the associated voice\n                const noteNdx = note.getVoice().getTickables().indexOf(note);\n                const voiceNotes = note.getVoice().getTickables().length;\n                // Get the absolute x position of the end of the current note\n                const noteEndX = noteNdx + 1 < voiceNotes\n                    ? // If the next note is in the same voice, use the x position of the next note\n                        note.getVoice().getTickables()[noteNdx + 1].getAbsoluteX()\n                    : // If this is the last note is the voice, use the x position of the next stave\n                        ((_b = (_a = note.getStave()) === null || _a === void 0 ? void 0 : _a.getX()) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = note.getStave()) === null || _c === void 0 ? void 0 : _c.getWidth()) !== null && _d !== void 0 ? _d : 0);\n                // Draw end bracket\n                ctx.beginPath();\n                ctx.moveTo(prevX, prevY);\n                ctx.lineTo(nextNoteIsSame ? x - 5 : noteEndX - 5, y);\n                // No shift if next note is the same\n                ctx.lineTo(nextNoteIsSame ? x : noteEndX - 5, y - this.renderOptions.bracketHeight);\n                ctx.stroke();\n                ctx.closePath();\n            }\n            // Store previous coordinates\n            prevX = x + xShift;\n            prevY = y;\n        });\n    }\n    /**\n     * Draw the text based pedal markings. This defaults to the traditional\n     * \"Ped\" and \"*\"\" symbols if no custom text has been provided.\n     */\n    drawText() {\n        const ctx = this.checkContext();\n        let isPedalDepressed = false;\n        let textWidth = 0;\n        // Iterate through each note, placing glyphs or custom text accordingly\n        this.notes.forEach((note) => {\n            var _a, _b, _c, _d;\n            isPedalDepressed = !isPedalDepressed;\n            const stave = note.checkStave();\n            const x = note.getAbsoluteX();\n            const y = stave.getYForBottomText(this.line + 3);\n            if (isPedalDepressed) {\n                textWidth = ctx.measureText(this.depressText).width;\n                ctx.fillText(this.depressText, x, y);\n            }\n            else {\n                const noteNdx = note.getVoice().getTickables().indexOf(note);\n                const voiceNotes = note.getVoice().getTickables().length;\n                // Get the shift for the next note\n                const noteEndX = noteNdx + 1 < voiceNotes\n                    ? // If the next note is in the same voice, use the x position of the next note\n                        note.getVoice().getTickables()[noteNdx + 1].getAbsoluteX()\n                    : // If this is the last note is the voice, use the x position of the next stave\n                        ((_b = (_a = note.getStave()) === null || _a === void 0 ? void 0 : _a.getX()) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = note.getStave()) === null || _c === void 0 ? void 0 : _c.getWidth()) !== null && _d !== void 0 ? _d : 0);\n                textWidth = ctx.measureText(this.releaseText).width;\n                ctx.fillText(this.releaseText, noteEndX - textWidth, y);\n            }\n        });\n    }\n    /** Render the pedal marking in position on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.setStrokeStyle(this.renderOptions.color);\n        ctx.setFillStyle(this.renderOptions.color);\n        ctx.setFont(this.font);\n        L('Rendering Pedal Marking');\n        if (this.type === PedalMarking.type.BRACKET || this.type === PedalMarking.type.MIXED) {\n            ctx.setLineWidth(this.renderOptions.bracketLineWidth);\n            this.drawBracketed();\n        }\n        else if (this.type === PedalMarking.type.TEXT) {\n            this.drawText();\n        }\n    }\n}\n/** To enable logging for this class. Set `VexFlow.PedalMarking.DEBUG` to `true`. */\nPedalMarking.DEBUG = false;\n/** Glyph data */\nPedalMarking.GLYPHS = {\n    pedalDepress: Glyphs.keyboardPedalPed,\n    pedalRelease: Glyphs.keyboardPedalUp,\n};\n/** Pedal type as number. */\nPedalMarking.type = {\n    TEXT: 1,\n    BRACKET: 2,\n    MIXED: 3,\n};\n/** Pedal type as string. */\nPedalMarking.typeString = {\n    text: PedalMarking.type.TEXT,\n    bracket: PedalMarking.type.BRACKET,\n    mixed: PedalMarking.type.MIXED,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { GlyphNote } from './glyphnote';\nimport { Glyphs } from './glyphs';\nimport { Category } from './typeguard';\n// Map `type` to SMuFL glyph code.\nconst CODES = {\n    '1': Glyphs.repeat1Bar,\n    '2': Glyphs.repeat2Bars,\n    '4': Glyphs.repeat4Bars,\n    slash: Glyphs.repeatBarSlash,\n};\nexport class RepeatNote extends GlyphNote {\n    static get CATEGORY() {\n        return Category.RepeatNote;\n    }\n    constructor(type, noteStruct, options) {\n        const glyphCode = CODES[type] || '\\uE500'; /*repeat1Bar*/\n        super(glyphCode, Object.assign({ duration: 'q', alignCenter: type !== 'slash' }, noteStruct), options);\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This file implements `StaveLine` which are simply lines that connect\n// two notes. This object is highly configurable, see the `renderOptions`.\n// A simple line is often used for notating glissando articulations, but you\n// can format a `StaveLine` with arrows or colors for more pedagogical\n// purposes, such as diagrams.\nimport { Element } from './element';\nimport { Tables } from './tables';\nimport { TextJustification } from './textnote';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n// Attribution: Arrow rendering implementations based off of\n// Patrick Horgan's article, \"Drawing lines and arcs with\n// arrow heads on  HTML5 Canvas\"\n//\n// Draw an arrow head that connects between 3 coordinates.\nfunction drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {\n    // all cases do this.\n    ctx.beginPath();\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.lineTo(x0, y0);\n    ctx.closePath();\n    ctx.fill();\n}\nexport class StaveLine extends Element {\n    static get CATEGORY() {\n        return Category.StaveLine;\n    }\n    // Initialize the StaveLine with the given `notes`.\n    //\n    // `notes` is a struct that has:\n    //\n    //  ```\n    //  {\n    //    firstNote: Note,\n    //    lastNote: Note,\n    //    firstIndexes: [n1, n2, n3],\n    //    lastIndexes: [n1, n2, n3]\n    //  }\n    //  ```\n    constructor(notes) {\n        super();\n        this.setNotes(notes);\n        this.text = '';\n        this.renderOptions = {\n            // Space to add to the left or the right\n            paddingLeft: 4,\n            paddingRight: 3,\n            // The width of the line in pixels\n            lineWidth: 1,\n            // An array of line/space lengths. (TODO/QUESTION: Is this supported in SVG?).\n            lineDash: undefined,\n            // Can draw rounded line end, instead of a square. (TODO/QUESTION: Is this supported in SVG?).\n            roundedEnd: true,\n            // The color of the line and arrowheads\n            color: undefined,\n            // Flags to draw arrows on each end of the line\n            drawStartArrow: false,\n            drawEndArrow: false,\n            // The length of the arrowhead sides\n            arrowheadLength: 10,\n            // The angle of the arrowhead\n            arrowheadAngle: Math.PI / 8,\n            // The position of the text\n            textPositionVertical: StaveLine.TextVerticalPosition.TOP,\n            textJustification: StaveLine.TextJustification.CENTER,\n        };\n    }\n    // The the annotation for the `StaveLine`\n    setText(text) {\n        this.text = text;\n        return this;\n    }\n    // Set the notes for the `StaveLine`\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Notes needs to have either firstNote or lastNote set.');\n        }\n        if (!notes.firstIndexes)\n            notes.firstIndexes = [0];\n        if (!notes.lastIndexes)\n            notes.lastIndexes = [0];\n        if (notes.firstIndexes.length !== notes.lastIndexes.length) {\n            throw new RuntimeError('BadArguments', 'Connected notes must have same number of indexes.');\n        }\n        this.notes = notes;\n        this.firstNote = notes.firstNote;\n        this.firstIndexes = notes.firstIndexes;\n        this.lastNote = notes.lastNote;\n        this.lastIndexes = notes.lastIndexes;\n        return this;\n    }\n    // Apply the style of the `StaveLine` to the context\n    applyLineStyle() {\n        const ctx = this.checkContext();\n        const renderOptions = this.renderOptions;\n        if (renderOptions.lineDash) {\n            ctx.setLineDash(renderOptions.lineDash);\n        }\n        if (renderOptions.lineWidth) {\n            ctx.setLineWidth(renderOptions.lineWidth);\n        }\n        if (renderOptions.roundedEnd) {\n            ctx.setLineCap('round');\n        }\n        else {\n            ctx.setLineCap('square');\n        }\n    }\n    // Helper function to draw a line with arrow heads\n    drawArrowLine(ctx, pt1, pt2) {\n        const bothArrows = this.renderOptions.drawStartArrow && this.renderOptions.drawEndArrow;\n        const x1 = pt1.x;\n        const y1 = pt1.y;\n        const x2 = pt2.x;\n        const y2 = pt2.y;\n        // For ends with arrow we actually want to stop before we get to the arrow\n        // so that wide lines won't put a flat end on the arrow.\n        const distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        const ratio = (distance - this.renderOptions.arrowheadLength / 3) / distance;\n        let endX;\n        let endY;\n        let startX;\n        let startY;\n        if (this.renderOptions.drawEndArrow || bothArrows) {\n            endX = Math.round(x1 + (x2 - x1) * ratio);\n            endY = Math.round(y1 + (y2 - y1) * ratio);\n        }\n        else {\n            endX = x2;\n            endY = y2;\n        }\n        if (this.renderOptions.drawStartArrow || bothArrows) {\n            startX = x1 + (x2 - x1) * (1 - ratio);\n            startY = y1 + (y2 - y1) * (1 - ratio);\n        }\n        else {\n            startX = x1;\n            startY = y1;\n        }\n        if (this.renderOptions.color) {\n            ctx.setStrokeStyle(this.renderOptions.color);\n            ctx.setFillStyle(this.renderOptions.color);\n        }\n        // Draw the shaft of the arrow\n        ctx.beginPath();\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n        ctx.closePath();\n        // calculate the angle of the line\n        const lineAngle = Math.atan2(y2 - y1, x2 - x1);\n        // h is the line length of a side of the arrow head\n        const h = Math.abs(this.renderOptions.arrowheadLength / Math.cos(this.renderOptions.arrowheadAngle));\n        let angle1;\n        let angle2;\n        let topX;\n        let topY;\n        let bottomX;\n        let bottomY;\n        if (this.renderOptions.drawEndArrow || bothArrows) {\n            angle1 = lineAngle + Math.PI + this.renderOptions.arrowheadAngle;\n            topX = x2 + Math.cos(angle1) * h;\n            topY = y2 + Math.sin(angle1) * h;\n            angle2 = lineAngle + Math.PI - this.renderOptions.arrowheadAngle;\n            bottomX = x2 + Math.cos(angle2) * h;\n            bottomY = y2 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, topX, topY, x2, y2, bottomX, bottomY);\n        }\n        if (this.renderOptions.drawStartArrow || bothArrows) {\n            angle1 = lineAngle + this.renderOptions.arrowheadAngle;\n            topX = x1 + Math.cos(angle1) * h;\n            topY = y1 + Math.sin(angle1) * h;\n            angle2 = lineAngle - this.renderOptions.arrowheadAngle;\n            bottomX = x1 + Math.cos(angle2) * h;\n            bottomY = y1 + Math.sin(angle2) * h;\n            drawArrowHead(ctx, topX, topY, x1, y1, bottomX, bottomY);\n        }\n    }\n    // Renders the `StaveLine` on the context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const firstNote = this.firstNote;\n        const lastNote = this.lastNote;\n        const renderOptions = this.renderOptions;\n        this.applyLineStyle();\n        // Cycle through each set of indexes and draw lines\n        let startPosition = { x: 0, y: 0 };\n        let endPosition = { x: 0, y: 0 };\n        this.firstIndexes.forEach((firstIndex, i) => {\n            const lastIndex = this.lastIndexes[i];\n            // Get initial coordinates for the start/end of the line\n            startPosition = firstNote.getModifierStartXY(2, firstIndex);\n            endPosition = lastNote.getModifierStartXY(1, lastIndex);\n            const upwardsSlope = startPosition.y > endPosition.y;\n            // Adjust `x` coordinates for modifiers\n            startPosition.x += firstNote.getMetrics().modRightPx + renderOptions.paddingLeft;\n            endPosition.x -= lastNote.getMetrics().modLeftPx + renderOptions.paddingRight;\n            // Adjust first `x` coordinates for displacements\n            const noteheadWidth = firstNote.getGlyphWidth();\n            const firstDisplaced = firstNote.getKeyProps()[firstIndex].displaced;\n            if (firstDisplaced && firstNote.getStemDirection() === 1) {\n                startPosition.x += noteheadWidth + renderOptions.paddingLeft;\n            }\n            // Adjust last `x` coordinates for displacements\n            const lastDisplaced = lastNote.getKeyProps()[lastIndex].displaced;\n            if (lastDisplaced && lastNote.getStemDirection() === -1) {\n                endPosition.x -= noteheadWidth + renderOptions.paddingRight;\n            }\n            // Adjust y position better if it's not coming from the center of the note\n            startPosition.y += upwardsSlope ? -3 : 1;\n            endPosition.y += upwardsSlope ? 2 : 0;\n            this.drawArrowLine(ctx, startPosition, endPosition);\n        });\n        // Determine the x coordinate where to start the text\n        const textWidth = this.width;\n        const justification = renderOptions.textJustification;\n        let x = 0;\n        if (justification === StaveLine.TextJustification.LEFT) {\n            x = startPosition.x;\n        }\n        else if (justification === StaveLine.TextJustification.CENTER) {\n            const deltaX = endPosition.x - startPosition.x;\n            const centerX = deltaX / 2 + startPosition.x;\n            x = centerX - textWidth / 2;\n        }\n        else if (justification === StaveLine.TextJustification.RIGHT) {\n            x = endPosition.x - textWidth;\n        }\n        // Determine the y value to start the text\n        let y = 0;\n        const verticalPosition = renderOptions.textPositionVertical;\n        if (verticalPosition === StaveLine.TextVerticalPosition.TOP) {\n            y = firstNote.checkStave().getYForTopText();\n        }\n        else if (verticalPosition === StaveLine.TextVerticalPosition.BOTTOM) {\n            y = firstNote.checkStave().getYForBottomText(Tables.TEXT_HEIGHT_OFFSET_HACK);\n        }\n        // Draw the text\n        const color = renderOptions.color;\n        this.applyStyle(ctx, { fillStyle: color, strokeStyle: color });\n        this.renderText(ctx, x, y);\n    }\n}\n// Text Positioning\nStaveLine.TextVerticalPosition = {\n    TOP: 1,\n    BOTTOM: 2,\n};\nStaveLine.TextJustification = TextJustification;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { BoundingBox } from './boundingbox';\nimport { Element } from './element';\nimport { Formatter } from './formatter';\nimport { Note } from './note';\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\n/**\n * System implements a musical system, which is a collection of staves,\n * each which can have one or more voices. All voices across all staves in\n * the system are formatted together.\n */\nexport class System extends Element {\n    static get CATEGORY() {\n        return Category.System;\n    }\n    constructor(params = {}) {\n        super();\n        this.setOptions(params);\n        this.partStaves = [];\n        this.partStaveInfos = [];\n        this.partVoices = [];\n    }\n    /** Set formatting options. */\n    setOptions(options = {}) {\n        if (!options.factory) {\n            throw new RuntimeError('NoFactory', 'System.setOptions(options) requires a factory.');\n        }\n        this.factory = options.factory;\n        this.options = Object.assign(Object.assign({ factory: this.factory, x: 10, y: 10, width: 500, spaceBetweenStaves: 12, autoWidth: false, noJustification: false, debugFormatter: false, formatIterations: 0, noPadding: false }, options), { details: Object.assign({ alpha: 0.5 }, options.details), formatOptions: Object.assign({}, options.formatOptions) });\n        if (this.options.noJustification === false && typeof options.width === 'undefined') {\n            this.options.autoWidth = true;\n        }\n    }\n    /** Get origin X. */\n    getX() {\n        return this.options.x;\n    }\n    /** Set origin X. */\n    setX(x) {\n        this.options.x = x;\n        this.partStaves.forEach((s) => {\n            s.setX(x);\n        });\n        return this;\n    }\n    /** Get origin y. */\n    getY() {\n        return this.options.y;\n    }\n    /** Set origin y. */\n    setY(y) {\n        this.options.y = y;\n        this.partStaves.forEach((s) => {\n            s.setY(y);\n        });\n        return this;\n    }\n    /** Get associated staves. */\n    getStaves() {\n        return this.partStaves;\n    }\n    /** Get associated voices. */\n    getVoices() {\n        return this.partVoices;\n    }\n    /** Set associated context. */\n    setContext(context) {\n        super.setContext(context);\n        this.factory.setContext(context);\n        return this;\n    }\n    /**\n     * Add connector between staves.\n     * @param type see {@link StaveConnector.typeString}\n     */\n    addConnector(type = 'double') {\n        this.connector = this.factory.StaveConnector({\n            topStave: this.partStaves[0],\n            bottomStave: this.partStaves[this.partStaves.length - 1],\n            type,\n        });\n        return this.connector;\n    }\n    /**\n     * Add a stave to the system.\n     *\n     * Example (one voice):\n     *\n     * `system.addStave({voices: [score.voice(score.notes('C#5/q, B4, A4, G#4'))]});`\n     *\n     * Example (two voices):\n     *\n     * `system.addStave({voices: [`\n     *   `score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),`\n     *   `score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))`\n     * `]});`\n     */\n    addStave(params) {\n        var _a;\n        const staveOptions = Object.assign({ leftBar: false }, params.options);\n        const stave = (_a = params.stave) !== null && _a !== void 0 ? _a : this.factory.Stave({ x: this.options.x, y: this.options.y, width: this.options.width, options: staveOptions });\n        const p = Object.assign(Object.assign({ spaceAbove: 0, spaceBelow: 0, debugNoteMetrics: false, noJustification: false }, params), { options: staveOptions });\n        const ctx = this.getContext();\n        p.voices.forEach((voice) => {\n            voice\n                .setContext(ctx)\n                .setStave(stave)\n                .getTickables()\n                .forEach((tickable) => tickable.setStave(stave));\n            this.partVoices.push(voice);\n        });\n        this.partStaves.push(stave);\n        this.partStaveInfos.push(p);\n        return stave;\n    }\n    /**\n     * Add voices to the system with stave already assigned.\n     */\n    addVoices(voices) {\n        const ctx = this.getContext();\n        voices.forEach((voice) => {\n            voice.setContext(ctx);\n            this.partVoices.push(voice);\n        });\n    }\n    /** Format the system. */\n    format() {\n        const optionsDetails = this.options.details;\n        let justifyWidth = 0;\n        const formatter = new Formatter(optionsDetails);\n        this.formatter = formatter;\n        let y = this.options.y;\n        let startX = 0;\n        const debugNoteMetricsYs = [];\n        this.partStaves.forEach((part, index) => {\n            y = y + part.space(this.partStaveInfos[index].spaceAbove);\n            part.setY(y);\n            y = y + part.space(this.partStaveInfos[index].spaceBelow);\n            y = y + part.space(this.options.spaceBetweenStaves);\n            if (this.partStaveInfos[index].debugNoteMetrics) {\n                debugNoteMetricsYs.push({ y, stave: part });\n                y += 15;\n            }\n            startX = Math.max(startX, part.getNoteStartX());\n        });\n        // Re-assign Stave to update y position\n        this.partVoices.forEach((voice) => {\n            voice.getTickables().forEach((tickable) => {\n                const stave = tickable.getStave();\n                if (stave)\n                    tickable.setStave(stave);\n            });\n        });\n        // Join the voices\n        formatter.joinVoices(this.partVoices);\n        // Update the start position of all staves.\n        this.partStaves.forEach((part) => part.setNoteStartX(startX));\n        if (this.options.autoWidth && this.partVoices.length > 0) {\n            justifyWidth = formatter.preCalculateMinTotalWidth(this.partVoices);\n            this.options.width = justifyWidth + Stave.rightPadding + (startX - this.options.x);\n            this.partStaves.forEach((part) => {\n                part.setWidth(this.options.width);\n            });\n        }\n        else {\n            justifyWidth = this.options.noPadding\n                ? this.options.width - (startX - this.options.x)\n                : this.options.width - (startX - this.options.x) - Stave.defaultPadding;\n        }\n        if (this.partVoices.length > 0) {\n            formatter.format(this.partVoices, this.options.noJustification ? 0 : justifyWidth, this.options.formatOptions);\n        }\n        formatter.postFormat();\n        for (let i = 0; i < this.options.formatIterations; i++) {\n            formatter.tune(optionsDetails);\n        }\n        this.startX = startX;\n        this.debugNoteMetricsYs = debugNoteMetricsYs;\n        this.lastY = y;\n        Stave.formatBegModifiers(this.partStaves);\n    }\n    /** Get the boundingBox. */\n    getBoundingBox() {\n        var _a;\n        return new BoundingBox(this.options.x, this.options.y, this.options.width, ((_a = this.lastY) !== null && _a !== void 0 ? _a : 0) - this.options.y);\n    }\n    /** Render the system. */\n    draw() {\n        // Render debugging information, if requested.\n        const ctx = this.checkContext();\n        if (!this.formatter || !this.startX || !this.lastY || !this.debugNoteMetricsYs) {\n            throw new RuntimeError('NoFormatter', 'format() must be called before draw()');\n        }\n        this.setRendered();\n        if (this.options.debugFormatter) {\n            Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);\n        }\n        this.debugNoteMetricsYs.forEach((d) => {\n            this.partVoices.forEach((voice) => {\n                voice.getTickables().forEach((tickable) => {\n                    if (tickable.getStave() === d.stave)\n                        Note.plotMetrics(ctx, tickable, d.y);\n                });\n            });\n        });\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// The file implements notes for Tablature notation. This consists of one or\n// more fret positions, and can either be drawn with or without stems.\n//\n// See `tests/tabnote_tests.ts` for usage examples.\nimport { Element } from './element';\nimport { Glyphs } from './glyphs';\nimport { Modifier } from './modifier';\nimport { Note } from './note';\nimport { Stem } from './stem';\nimport { StemmableNote } from './stemmablenote';\nimport { Category, isDot } from './typeguard';\nimport { defined, RuntimeError } from './util';\n/**\n * Gets the unused strings grouped together if consecutive.\n * @param numLines The number of lines.\n * @param stringsUsed An array of numbers representing which strings have fret positions.\n * @returns\n */\nfunction getUnusedStringGroups(numLines, stringsUsed) {\n    const stemThrough = [];\n    let group = [];\n    for (let string = 1; string <= numLines; string++) {\n        const isUsed = stringsUsed.indexOf(string) > -1;\n        if (!isUsed) {\n            group.push(string);\n        }\n        else {\n            stemThrough.push(group);\n            group = [];\n        }\n    }\n    if (group.length > 0)\n        stemThrough.push(group);\n    return stemThrough;\n}\n// Gets groups of points that outline the partial stem lines\n// between fret positions\n//\n// Parameters:\n// * stemY - The `y` coordinate the stem is located on\n// * unusedStrings - An array of groups of unused strings\n// * stave - The stave to use for reference\n// * stemDirection - The direction of the stem\nfunction getPartialStemLines(stemY, unusedStrings, stave, stemDirection) {\n    const upStem = stemDirection !== 1;\n    const downStem = stemDirection !== -1;\n    const lineSpacing = stave.getSpacingBetweenLines();\n    const totalLines = stave.getNumLines();\n    const stemLines = [];\n    unusedStrings.forEach((strings) => {\n        const containsLastString = strings.indexOf(totalLines) > -1;\n        const containsFirstString = strings.indexOf(1) > -1;\n        if ((upStem && containsFirstString) || (downStem && containsLastString)) {\n            return;\n        }\n        // If there's only one string in the group, push a duplicate value.\n        // We do this because we need 2 strings to convert into upper/lower y\n        // values.\n        if (strings.length === 1) {\n            strings.push(strings[0]);\n        }\n        const lineYs = [];\n        // Iterate through each group string and store it's y position\n        strings.forEach((string, index, strings) => {\n            const isTopBound = string === 1;\n            const isBottomBound = string === totalLines;\n            // Get the y value for the appropriate staff line,\n            // we adjust for a 0 index array, since string numbers are index 1\n            let y = stave.getYForLine(string - 1);\n            // Unless the string is the first or last, add padding to each side\n            // of the line\n            if (index === 0 && !isTopBound) {\n                y -= lineSpacing / 2 - 1;\n            }\n            else if (index === strings.length - 1 && !isBottomBound) {\n                y += lineSpacing / 2 - 1;\n            }\n            // Store the y value\n            lineYs.push(y);\n            // Store a subsequent y value connecting this group to the main\n            // stem above/below the stave if it's the top/bottom string\n            if (stemDirection === 1 && isTopBound) {\n                lineYs.push(stemY - 2);\n            }\n            else if (stemDirection === -1 && isBottomBound) {\n                lineYs.push(stemY + 2);\n            }\n        });\n        // Add the sorted y values to the\n        stemLines.push(lineYs.sort((a, b) => a - b));\n    });\n    return stemLines;\n}\nexport class TabNote extends StemmableNote {\n    static get CATEGORY() {\n        return Category.TabNote;\n    }\n    // Initialize the TabNote with a `noteStruct` full of properties\n    // and whether to `drawStem` when rendering the note\n    constructor(noteStruct, drawStem = false) {\n        super(noteStruct);\n        this.fretElement = [];\n        // Return the number of the greatest string, which is the string lowest on the display\n        this.greatestString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a > b ? a : b));\n        };\n        // Return the number of the least string, which is the string highest on the display\n        this.leastString = () => {\n            return this.positions.map((x) => x.str).reduce((a, b) => (a < b ? a : b));\n        };\n        this.ghost = false; // Renders parenthesis around notes\n        // Note properties\n        // The fret positions in the note. An array of `{ str: X, fret: X }`\n        this.positions = noteStruct.positions || [];\n        // Render Options\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // Flag to draw a stem\n            drawStem, \n            // Flag to draw dot modifiers\n            drawDots: drawStem, \n            // Flag to extend the main stem through the stave and fret positions\n            drawStemThroughStave: false, \n            // vertical shift from stave line\n            yShift: 0 });\n        this.glyphProps = Note.getGlyphProps(this.duration, this.noteType);\n        defined(this.glyphProps, 'BadArguments', `No glyph found for duration '${this.duration}' and type '${this.noteType}'`);\n        this.buildStem();\n        if (noteStruct.stemDirection) {\n            this.setStemDirection(noteStruct.stemDirection);\n        }\n        else {\n            this.setStemDirection(Stem.UP);\n        }\n        // Renders parenthesis around notes\n        this.ghost = false;\n        this.updateWidth();\n    }\n    reset() {\n        super.reset();\n        if (this.stave)\n            this.setStave(this.stave);\n        return this;\n    }\n    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.\n    // Often used for indicating frets that are being bent to\n    setGhost(ghost) {\n        this.ghost = ghost;\n        this.updateWidth();\n        return this;\n    }\n    // Determine if the note has a stem\n    hasStem() {\n        if (this.renderOptions.drawStem)\n            return true;\n        return false;\n    }\n    // Get the default stem extension for the note\n    getStemExtension() {\n        if (this.stemExtensionOverride !== undefined) {\n            return this.stemExtensionOverride;\n        }\n        return this.flag.getHeight() > Stem.HEIGHT ? this.flag.getHeight() - Stem.HEIGHT : 0;\n    }\n    static tabToElement(fret) {\n        let el;\n        if (fret.toUpperCase() === 'X') {\n            el = new Element('TabNote');\n            el.setText(Glyphs.accidentalDoubleSharp);\n        }\n        else {\n            el = new Element('TabNote.text');\n            el.setText(fret);\n            el.setYShift(el.getHeight() / 2);\n        }\n        return el;\n    }\n    // Calculate and store the width of the note\n    updateWidth() {\n        this.fretElement = [];\n        this.width = 0;\n        for (let i = 0; i < this.positions.length; ++i) {\n            let fret = this.positions[i].fret;\n            if (this.ghost)\n                fret = '(' + fret + ')';\n            const el = TabNote.tabToElement(fret.toString());\n            this.fretElement.push(el);\n            this.width = Math.max(el.getWidth(), this.width);\n        }\n    }\n    // Set the `stave` to the note\n    setStave(stave) {\n        super.setStave(stave);\n        const ctx = stave.getContext();\n        this.setContext(ctx);\n        // we subtract 1 from `line` because getYForLine expects a 0-based index,\n        // while the position.str is a 1-based index\n        const ys = this.positions.map(({ str: line }) => stave.getYForLine(Number(line) - 1));\n        this.setYs(ys);\n        if (this.stem) {\n            this.stem.setYBounds(this.getStemY(), this.getStemY());\n        }\n        return this;\n    }\n    // Get the fret positions for the note\n    getPositions() {\n        return this.positions;\n    }\n    // Get the default `x` and `y` coordinates for a modifier at a specific\n    // `position` at a fret position `index`\n    getModifierStartXY(position, index) {\n        if (!this.preFormatted) {\n            throw new RuntimeError('UnformattedNote', \"Can't call GetModifierStartXY on an unformatted note\");\n        }\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', 'No Y-Values calculated for this note.');\n        }\n        let x = 0;\n        if (position === Modifier.Position.LEFT) {\n            x = -1 * 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.RIGHT) {\n            x = this.width + 2; // FIXME: modifier padding, move to font file\n        }\n        else if (position === Modifier.Position.BELOW || position === Modifier.Position.ABOVE) {\n            const noteGlyphWidth = this.width;\n            x = noteGlyphWidth / 2;\n        }\n        return {\n            x: this.getAbsoluteX() + x,\n            y: this.ys[index],\n        };\n    }\n    // Get the default line for rest\n    getLineForRest() {\n        return Number(this.positions[0].str);\n    }\n    // Pre-render formatting\n    preFormat() {\n        if (this.preFormatted)\n            return;\n        if (this.modifierContext)\n            this.modifierContext.preFormat();\n        // width is already set during init()\n        this.preFormatted = true;\n    }\n    // Get the x position for the stem\n    getStemX() {\n        return this.getCenterGlyphX();\n    }\n    // Get the y position for the stem\n    getStemY() {\n        const numLines = this.checkStave().getNumLines();\n        // The decimal staff line amounts provide optimal spacing between the\n        // fret number and the stem\n        const stemUpLine = -0.5;\n        const stemDownLine = numLines - 0.5;\n        const stemStartLine = Stem.UP === this.stemDirection ? stemUpLine : stemDownLine;\n        return this.checkStave().getYForLine(stemStartLine);\n    }\n    // Get the stem extents for the tabnote\n    getStemExtents() {\n        return this.checkStem().getExtents();\n    }\n    // Draw the fal onto the context\n    drawFlag() {\n        const { beam, glyphProps, renderOptions: { drawStem }, } = this;\n        const context = this.checkContext();\n        const shouldDrawFlag = beam === undefined && drawStem;\n        // Now it's the flag's turn.\n        if (glyphProps.codeFlagUp && shouldDrawFlag) {\n            const flagX = this.getStemX();\n            const flagY = this.getStemDirection() === Stem.DOWN\n                ? // Down stems are below the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() - this.getStemExtension()\n                : // Up stems are above the note head and have flags on the right.\n                    this.getStemY() - this.checkStem().getHeight() + this.getStemExtension();\n            // Draw the Flag\n            this.flag.setContext(context).setX(flagX).setY(flagY).drawWithStyle();\n        }\n    }\n    // Render the modifiers onto the context.\n    drawModifiers() {\n        this.modifiers.forEach((modifier) => {\n            // Only draw the dots if enabled.\n            if (isDot(modifier) && !this.renderOptions.drawDots) {\n                return;\n            }\n            modifier.setContext(this.getContext());\n            modifier.drawWithStyle();\n        });\n    }\n    // Render the stem extension through the fret positions\n    drawStemThrough() {\n        const stemX = this.getStemX();\n        const stemY = this.getStemY();\n        const ctx = this.checkContext();\n        const drawStem = this.renderOptions.drawStem;\n        const stemThrough = this.renderOptions.drawStemThroughStave;\n        if (drawStem && stemThrough) {\n            const numLines = this.checkStave().getNumLines();\n            const stringsUsed = this.positions.map((position) => Number(position.str));\n            const unusedStrings = getUnusedStringGroups(numLines, stringsUsed);\n            const stemLines = getPartialStemLines(stemY, unusedStrings, this.checkStave(), this.getStemDirection());\n            ctx.setLineWidth(Stem.WIDTH);\n            stemLines.forEach((bounds) => {\n                if (bounds.length === 0)\n                    return;\n                ctx.beginPath();\n                ctx.moveTo(stemX, bounds[0]);\n                ctx.lineTo(stemX, bounds[bounds.length - 1]);\n                ctx.stroke();\n                ctx.closePath();\n            });\n        }\n    }\n    // Render the fret positions onto the context\n    drawPositions() {\n        const ctx = this.checkContext();\n        const x = this.getAbsoluteX();\n        const ys = this.ys;\n        for (let i = 0; i < this.positions.length; ++i) {\n            const y = ys[i] + this.renderOptions.yShift;\n            const el = this.fretElement[i];\n            // Center the fret text beneath the stem\n            const tabX = x - el.getWidth() / 2;\n            // FIXME: Magic numbers.\n            ctx.clearRect(tabX - 2, y - 3, el.getWidth() + 4, 6);\n            el.renderText(ctx, tabX, y);\n        }\n    }\n    // The main rendering function for the entire note.\n    draw() {\n        const ctx = this.checkContext();\n        if (this.ys.length === 0) {\n            throw new RuntimeError('NoYValues', \"Can't draw note without Y values.\");\n        }\n        this.setRendered();\n        const renderStem = this.beam === undefined && this.renderOptions.drawStem;\n        ctx.openGroup('tabnote', this.getAttribute('id'));\n        this.drawPositions();\n        this.drawStemThrough();\n        if (this.stem && renderStem) {\n            const stemX = this.getStemX();\n            this.stem.setNoteHeadXBounds(stemX, stemX);\n            this.stem.setContext(ctx).drawWithStyle();\n        }\n        this.drawFlag();\n        this.drawModifiers();\n        ctx.closeGroup();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\nimport { Stave } from './stave';\nimport { Category } from './typeguard';\nexport class TabStave extends Stave {\n    static get CATEGORY() {\n        return Category.TabStave;\n    }\n    constructor(x, y, width, options) {\n        const tabOptions = Object.assign({ spacingBetweenLinesPx: 13, numLines: 6, topTextPosition: 1 }, options);\n        super(x, y, width, tabOptions);\n    }\n    getYForGlyphs() {\n        return this.getYForLine(2.5);\n    }\n    // Deprecated\n    addTabGlyph() {\n        this.addClef('tab');\n        return this;\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Cyril Silverman\n//\n// This file implements `TextBrackets` which extend between two notes.\n// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created\n// using this class.\nimport { Element } from './element';\nimport { Font } from './font';\nimport { Renderer } from './renderer';\nimport { Tables } from './tables';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// To enable logging for this class. Set `VexFlow.TextBracket.DEBUG` to `true`.\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextBracket.DEBUG)\n        log('VexFlow.TextBracket', args);\n}\nexport var TextBracketPosition;\n(function (TextBracketPosition) {\n    TextBracketPosition[TextBracketPosition[\"TOP\"] = 1] = \"TOP\";\n    TextBracketPosition[TextBracketPosition[\"BOTTOM\"] = -1] = \"BOTTOM\";\n})(TextBracketPosition || (TextBracketPosition = {}));\nexport class TextBracket extends Element {\n    static get CATEGORY() {\n        return Category.TextBracket;\n    }\n    static get Position() {\n        return TextBracketPosition;\n    }\n    static get PositionString() {\n        return {\n            top: TextBracketPosition.TOP,\n            bottom: TextBracketPosition.BOTTOM,\n        };\n    }\n    constructor({ start, stop, text = '', superscript = '', position = TextBracketPosition.TOP }) {\n        super();\n        this.start = start;\n        this.stop = stop;\n        this.textElement = new Element('TextBracket');\n        this.textElement.setText(text);\n        this.superscriptElement = new Element('TextBracket');\n        this.superscriptElement.setText(superscript);\n        const smallerFontSize = Font.scaleSize(this.fontInfo.size, 0.714286);\n        this.superscriptElement.setFontSize(smallerFontSize);\n        this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;\n        this.line = 1;\n        this.renderOptions = {\n            dashed: true,\n            dash: [5],\n            color: 'black',\n            lineWidth: 1,\n            showBracket: true,\n            bracketHeight: 8,\n            // In the BOTTOM position, the bracket line can extend\n            // under the superscript.\n            underlineSuperscript: true,\n        };\n    }\n    /**\n     * Apply the text backet styling to the provided context.\n     * @param ctx\n     * @returns this\n     */\n    applyStyle(ctx) {\n        this.textElement.setFont(this.fontInfo);\n        // We called this.resetFont() in the constructor, so we know this.textFont is available.\n        const { family, size, weight, style } = this.fontInfo;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        const smallerFontSize = Font.scaleSize(size, 0.714286);\n        this.superscriptElement.setFont(family, smallerFontSize, weight, style);\n        const options = this.renderOptions;\n        ctx.setStrokeStyle(options.color);\n        ctx.setFillStyle(options.color);\n        ctx.setLineWidth(options.lineWidth);\n        return this;\n    }\n    // Set whether the bracket line should be `dashed`. You can also\n    // optionally set the `dash` pattern by passing in an array of numbers\n    setDashed(dashed, dash) {\n        this.renderOptions.dashed = dashed;\n        if (dash)\n            this.renderOptions.dash = dash;\n        return this;\n    }\n    // Set the rendering `context` for the octave bracket\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    // Draw the octave bracket on the rendering context\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let y = 0;\n        switch (this.position) {\n            case TextBracketPosition.TOP:\n                y = this.start.checkStave().getYForTopText(this.line);\n                break;\n            case TextBracketPosition.BOTTOM:\n                y = this.start.checkStave().getYForBottomText(this.line + Tables.TEXT_HEIGHT_OFFSET_HACK);\n                break;\n            default:\n                throw new RuntimeError('InvalidPosition', `The position ${this.position} is invalid.`);\n        }\n        // Get the preliminary start and stop coordintates for the bracket\n        const start = { x: this.start.getAbsoluteX(), y };\n        const stop = { x: this.stop.getAbsoluteX(), y };\n        L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);\n        const bracketHeight = this.renderOptions.bracketHeight * this.position;\n        // Draw text\n        this.textElement.renderText(ctx, start.x, start.y);\n        // Get the width and height for the octave number\n        const mainWidth = this.textElement.getWidth();\n        const mainHeight = this.textElement.getHeight();\n        // Calculate the y position for the super script\n        const superY = start.y - mainHeight / 2.5;\n        // To draw the superscript, we scale the font size by 1/1.4.\n        this.superscriptElement.renderText(ctx, start.x + mainWidth + 1, superY);\n        // Determine width and height of the superscript\n        const superWidth = this.superscriptElement.getWidth();\n        const superHeight = this.superscriptElement.getHeight();\n        // Setup initial coordinates for the bracket line\n        let startX = start.x;\n        let lineY = superY;\n        const endX = stop.x + this.stop.getGlyphWidth();\n        // Adjust x and y coordinates based on position\n        if (this.position === TextBracketPosition.TOP) {\n            startX += mainWidth + superWidth + 5;\n            lineY -= superHeight / 2.7;\n        }\n        else if (this.position === TextBracketPosition.BOTTOM) {\n            lineY += superHeight / 2.7;\n            startX += mainWidth + 2;\n            if (!this.renderOptions.underlineSuperscript) {\n                startX += superWidth;\n            }\n        }\n        if (this.renderOptions.dashed) {\n            // Main line\n            Renderer.drawDashedLine(ctx, startX, lineY, endX, lineY, this.renderOptions.dash);\n            // Ending Bracket\n            if (this.renderOptions.showBracket) {\n                Renderer.drawDashedLine(ctx, endX, lineY + 1 * this.position, endX, lineY + bracketHeight, this.renderOptions.dash);\n            }\n        }\n        else {\n            ctx.beginPath();\n            ctx.moveTo(startX, lineY);\n            // Main line\n            ctx.lineTo(endX, lineY);\n            if (this.renderOptions.showBracket) {\n                // Ending bracket\n                ctx.lineTo(endX, lineY + bracketHeight);\n            }\n            ctx.stroke();\n            ctx.closePath();\n        }\n    }\n}\nTextBracket.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Note } from './note';\nimport { Category } from './typeguard';\nimport { log, RuntimeError } from './util';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (TextDynamics.DEBUG)\n        log('VexFlow.TextDynamics', args);\n}\n/**\n * `TextDynamics` renders traditional\n * text dynamics markings, **ie: p, f, sfz, rfz, ppp**\n *\n * You can render any dynamics string that contains a combination of\n * the following letters:  P, M, F, Z, R, S\n */\nexport class TextDynamics extends Note {\n    static get CATEGORY() {\n        return Category.TextDynamics;\n    }\n    /** The glyph data for each dynamics letter. */\n    static get GLYPHS() {\n        return {\n            f: Glyphs.dynamicForte,\n            p: Glyphs.dynamicPiano,\n            m: Glyphs.dynamicMezzo,\n            s: Glyphs.dynamicSforzando,\n            z: Glyphs.dynamicZ,\n            r: Glyphs.dynamicRinforzando,\n        };\n    }\n    /**\n     * Create the dynamics marking.\n     *\n     * A `TextDynamics` object inherits from `Note` so that it can be formatted\n     * within a `Voice`.\n     *\n     * @param noteStruct an object that contains a `duration` property and a\n     * `sequence` of letters that represents the letters to render.\n     */\n    constructor(noteStruct) {\n        var _a, _b;\n        super(noteStruct);\n        this.sequence = ((_a = noteStruct.text) !== null && _a !== void 0 ? _a : '').toLowerCase();\n        this.line = (_b = noteStruct.line) !== null && _b !== void 0 ? _b : 0;\n        this.text = '';\n        L('New Dynamics Text: ', this.sequence);\n    }\n    /** Set the Stave line on which the note should be placed. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Preformat the dynamics text. */\n    preFormat() {\n        // length of this.glyphs must be <=\n        // length of this.sequence, so if we're formatted before\n        // create new glyphs.\n        this.text = '';\n        // Iterate through each letter\n        this.sequence.split('').forEach((letter) => {\n            // Get the glyph data for the letter\n            const glyph = TextDynamics.GLYPHS[letter];\n            if (!glyph)\n                throw new RuntimeError('Invalid dynamics character: ' + letter);\n            // Add the glyph\n            this.text += glyph;\n        });\n        this.preFormatted = true;\n        return this;\n    }\n    /** Draw the dynamics text on the rendering context. */\n    draw() {\n        this.setRendered();\n        const x = this.getAbsoluteX();\n        const y = this.checkStave().getYForLine(this.line + -3);\n        L('Rendering Dynamics: ', this.sequence);\n        this.renderText(this.checkContext(), x, y);\n    }\n}\n/** To enable logging for this class. Set `VexFlow.TextDynamics.DEBUG` to `true`. */\nTextDynamics.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author: Taehoon Moon 2014\nimport { Note } from './note';\nimport { TimeSignature } from './timesignature';\nimport { Category } from './typeguard';\nexport class TimeSigNote extends Note {\n    static get CATEGORY() {\n        return Category.TimeSigNote;\n    }\n    constructor(timeSpec, customPadding) {\n        super({ duration: 'b' });\n        this.timeSig = new TimeSignature(timeSpec, customPadding);\n        this.setWidth(this.timeSig.getWidth());\n        // Note properties\n        this.ignoreTicks = true;\n    }\n    /* Overridden to ignore */\n    // eslint-disable-next-line\n    addToModifierContext(mc) {\n        // DO NOTHING.\n        return this;\n    }\n    preFormat() {\n        this.preFormatted = true;\n        return this;\n    }\n    draw() {\n        const stave = this.checkStave();\n        const ctx = this.checkContext();\n        this.setRendered();\n        ctx.openGroup('timesignote', this.getAttribute('id'));\n        this.timeSig.drawAt(ctx, stave, this.getAbsoluteX());\n        ctx.closeGroup();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Balazs Forian-Szabo\n// MIT License\nimport { Element } from './element';\nimport { Category } from './typeguard';\nimport { log } from './util';\nimport { Vibrato } from './vibrato';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (VibratoBracket.DEBUG)\n        log('VexFlow.VibratoBracket', args);\n}\n/** `VibratoBracket` renders vibrato effect between two notes. */\nexport class VibratoBracket extends Element {\n    static get CATEGORY() {\n        return Category.VibratoBracket;\n    }\n    /**\n     * Either the stop or start note must be set, or both of them.\n     * An undefined value for the start or stop note indicates that the vibrato\n     * is drawn from the beginning or until the end of the stave accordingly.\n     */\n    constructor(bracketData) {\n        super();\n        this.vibrato = new Vibrato();\n        if (bracketData.start)\n            this.start = bracketData.start;\n        if (bracketData.stop)\n            this.stop = bracketData.stop;\n        this.line = 1;\n    }\n    /** Set line position of the vibrato bracket. */\n    setLine(line) {\n        this.line = line;\n        return this;\n    }\n    /** Set vibrato code. */\n    setVibratoCode(code) {\n        this.vibrato.setVibratoCode(code);\n        return this;\n    }\n    /** Draw the vibrato bracket on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const y = (this.start && this.start.checkStave().getYForTopText(this.line)) ||\n            (this.stop && this.stop.checkStave().getYForTopText(this.line)) ||\n            0;\n        // If start note is not set then vibrato will be drawn\n        // from the beginning of the stave\n        const startX = (this.start && this.start.getAbsoluteX()) || (this.stop && this.stop.checkStave().getTieStartX()) || 0;\n        // If stop note is not set then vibrato will be drawn\n        // until the end of the stave\n        const stopX = (this.stop && this.stop.getAbsoluteX() - this.stop.getWidth() - 5) ||\n            (this.start && this.start.checkStave().getTieEndX() - 10) ||\n            0;\n        this.vibrato.setVibratoWidth(stopX - startX);\n        L('Rendering VibratoBracket: startX:', startX, 'stopX:', stopX, 'y:', y);\n        this.vibrato.renderText(ctx, startX, y);\n    }\n}\n/** To enable logging for this class. Set `VexFlow.VibratoBracket.DEBUG` to `true`. */\nVibratoBracket.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n// @author Mohit Cheppudira\n// MIT License\nimport { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { ChordSymbol } from './chordsymbol';\nimport { ClefNote } from './clefnote';\nimport { Curve } from './curve';\nimport { EasyScore } from './easyscore';\nimport { Formatter } from './formatter';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { KeySigNote } from './keysignote';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { PedalMarking } from './pedalmarking';\nimport { Renderer } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { StaveConnector } from './staveconnector';\nimport { StaveLine } from './staveline';\nimport { StaveNote } from './stavenote';\nimport { StaveTie } from './stavetie';\nimport { StringNumber } from './stringnumber';\nimport { System } from './system';\nimport { TabNote } from './tabnote';\nimport { TabStave } from './tabstave';\nimport { TextBracket } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSigNote } from './timesignote';\nimport { Tuplet } from './tuplet';\nimport { defined, log, RuntimeError } from './util';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice } from './voice';\nimport { isHTMLCanvas } from './web';\n// eslint-disable-next-line\nfunction L(...args) {\n    if (Factory.DEBUG)\n        log('VexFlow.Factory', args);\n}\n/**\n * Factory implements a high level API around VexFlow.\n */\nexport class Factory {\n    /**\n     * Static simplified function to access constructor without providing FactoryOptions\n     *\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = VexFlow.Factory.newFromElementId('boo', 1200, 600 );`\n     */\n    static newFromElementId(elementId, width = 500, height = 200) {\n        return new Factory({ renderer: { elementId, width, height } });\n    }\n    /**\n     * Example:\n     *\n     * Create an SVG renderer and attach it to the DIV element named \"boo\" to render using <page-width> 1200 and <page-height> 600\n     *\n     * `const vf: Factory = new VexFlow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});`\n     */\n    constructor(options = {}) {\n        L('New factory: ', options);\n        this.options = {\n            stave: {\n                space: 10,\n            },\n            renderer: {\n                elementId: '',\n                width: 500,\n                height: 200,\n                background: '#FFF',\n            },\n        };\n        this.setOptions(options);\n    }\n    reset() {\n        this.renderQ = [];\n        this.systems = [];\n        this.staves = [];\n        this.voices = [];\n        this.stave = undefined; // current stave\n    }\n    setOptions(options) {\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.initRenderer();\n        this.reset();\n    }\n    initRenderer() {\n        const { elementId, width, height, background } = this.options.renderer;\n        if (elementId === null) {\n            return;\n        }\n        if (elementId === '') {\n            L(this);\n            throw new RuntimeError('renderer.elementId not set in FactoryOptions');\n        }\n        let backend = this.options.renderer.backend;\n        if (backend === undefined) {\n            const elem = document.getElementById(elementId);\n            // We use a custom type check here, because node-canvas mimics canvas,\n            // but is not an instance of window.HTMLCanvasElement.\n            // In fact, `window` might be undefined here.\n            // See: https://www.npmjs.com/package/canvas\n            if (isHTMLCanvas(elem)) {\n                backend = Renderer.Backends.CANVAS;\n            }\n            else {\n                backend = Renderer.Backends.SVG;\n            }\n        }\n        this.context = Renderer.buildContext(elementId, backend, width, height, background);\n    }\n    getContext() {\n        return this.context;\n    }\n    setContext(context) {\n        this.context = context;\n        return this;\n    }\n    getStave() {\n        return this.stave;\n    }\n    getVoices() {\n        return this.voices;\n    }\n    /** Return pixels from current stave spacing. */\n    Stave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.0 } }, params);\n        const stave = new Stave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    TabStave(params) {\n        const staveSpace = this.options.stave.space;\n        const p = Object.assign({ x: 0, y: 0, width: this.options.renderer.width - staveSpace * 1.0, options: { spacingBetweenLinesPx: staveSpace * 1.3 } }, params);\n        const stave = new TabStave(p.x, p.y, p.width, p.options);\n        this.staves.push(stave);\n        stave.setContext(this.context);\n        this.stave = stave;\n        return stave;\n    }\n    StaveNote(noteStruct) {\n        const note = new StaveNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GlyphNote(glyph, noteStruct, options) {\n        const note = new GlyphNote(glyph, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    RepeatNote(type, noteStruct, options) {\n        const note = new RepeatNote(type, noteStruct, options);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GhostNote(noteStruct) {\n        const ghostNote = new GhostNote(noteStruct);\n        if (this.stave)\n            ghostNote.setStave(this.stave);\n        ghostNote.setContext(this.context);\n        this.renderQ.push(ghostNote);\n        return ghostNote;\n    }\n    TextNote(noteStruct) {\n        const textNote = new TextNote(noteStruct);\n        if (this.stave)\n            textNote.setStave(this.stave);\n        textNote.setContext(this.context);\n        this.renderQ.push(textNote);\n        return textNote;\n    }\n    BarNote(params = {}) {\n        const barNote = new BarNote(params.type);\n        if (this.stave)\n            barNote.setStave(this.stave);\n        barNote.setContext(this.context);\n        this.renderQ.push(barNote);\n        return barNote;\n    }\n    ClefNote(params) {\n        const p = Object.assign({ type: 'treble', options: {\n                size: 'default',\n                annotation: undefined,\n            } }, params);\n        const clefNote = new ClefNote(p.type, p.options.size, p.options.annotation);\n        if (this.stave)\n            clefNote.setStave(this.stave);\n        clefNote.setContext(this.context);\n        this.renderQ.push(clefNote);\n        return clefNote;\n    }\n    TimeSigNote(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const timeSigNote = new TimeSigNote(p.time);\n        if (this.stave)\n            timeSigNote.setStave(this.stave);\n        timeSigNote.setContext(this.context);\n        this.renderQ.push(timeSigNote);\n        return timeSigNote;\n    }\n    KeySigNote(params) {\n        const keySigNote = new KeySigNote(params.key, params.cancelKey, params.alterKey);\n        if (this.stave)\n            keySigNote.setStave(this.stave);\n        keySigNote.setContext(this.context);\n        this.renderQ.push(keySigNote);\n        return keySigNote;\n    }\n    TabNote(noteStruct) {\n        const note = new TabNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        this.renderQ.push(note);\n        return note;\n    }\n    GraceNote(noteStruct) {\n        const note = new GraceNote(noteStruct);\n        if (this.stave)\n            note.setStave(this.stave);\n        note.setContext(this.context);\n        return note;\n    }\n    GraceNoteGroup(params) {\n        const group = new GraceNoteGroup(params.notes, params.slur);\n        group.setContext(this.context);\n        return group;\n    }\n    Accidental(params) {\n        const accid = new Accidental(params.type);\n        accid.setContext(this.context);\n        return accid;\n    }\n    Annotation(params) {\n        const p = Object.assign({ text: 'p', hJustify: AnnotationHorizontalJustify.CENTER, vJustify: AnnotationVerticalJustify.BOTTOM }, params);\n        const annotation = new Annotation(p.text);\n        annotation.setJustification(p.hJustify);\n        annotation.setVerticalJustification(p.vJustify);\n        annotation.setFont(p.font);\n        annotation.setContext(this.context);\n        return annotation;\n    }\n    ChordSymbol(params) {\n        const p = Object.assign({ vJustify: 'top', hJustify: 'center' }, params);\n        const chordSymbol = new ChordSymbol();\n        chordSymbol.setHorizontal(p.hJustify);\n        chordSymbol.setVertical(p.vJustify);\n        // There is a default font based on the engraving font.  Only set then\n        // font if it is specific, else use the default\n        if (typeof p.fontFamily === 'string' && typeof p.fontSize === 'number') {\n            if (typeof p.fontWeight === 'string')\n                chordSymbol.setFont(p.fontFamily, p.fontSize, p.fontWeight);\n            else\n                chordSymbol.setFont(p.fontFamily, p.fontSize, '');\n        }\n        else if (typeof p.fontSize === 'number') {\n            chordSymbol.setFontSize(p.fontSize);\n        }\n        chordSymbol.setContext(this.context);\n        return chordSymbol;\n    }\n    Articulation(params) {\n        var _a;\n        const articulation = new Articulation((_a = params === null || params === void 0 ? void 0 : params.type) !== null && _a !== void 0 ? _a : 'a.');\n        if ((params === null || params === void 0 ? void 0 : params.position) !== undefined)\n            articulation.setPosition(params.position);\n        if ((params === null || params === void 0 ? void 0 : params.betweenLines) !== undefined)\n            articulation.setBetweenLines(params.betweenLines);\n        articulation.setContext(this.context);\n        return articulation;\n    }\n    Ornament(type, params) {\n        const options = Object.assign({ type, accidental: '' }, params);\n        const ornament = new Ornament(type);\n        if ((params === null || params === void 0 ? void 0 : params.position) !== undefined) {\n            ornament.setPosition(params.position);\n        }\n        if (options.upperAccidental) {\n            ornament.setUpperAccidental(options.upperAccidental);\n        }\n        if (options.lowerAccidental) {\n            ornament.setLowerAccidental(options.lowerAccidental);\n        }\n        if (typeof options.delayed !== 'undefined') {\n            ornament.setDelayed(options.delayed);\n        }\n        ornament.setContext(this.context);\n        return ornament;\n    }\n    TextDynamics(params) {\n        const p = Object.assign({ text: 'p', duration: 'q', dots: 0, line: 0 }, params);\n        const text = new TextDynamics({\n            text: p.text,\n            line: p.line,\n            duration: p.duration,\n            dots: p.dots,\n        });\n        if (this.stave)\n            text.setStave(this.stave);\n        text.setContext(this.context);\n        this.renderQ.push(text);\n        return text;\n    }\n    Fingering(params) {\n        const p = Object.assign({ number: '0', position: 'left' }, params);\n        const fingering = new FretHandFinger(p.number);\n        fingering.setPosition(p.position);\n        fingering.setContext(this.context);\n        return fingering;\n    }\n    StringNumber(params, drawCircle = true) {\n        const stringNumber = new StringNumber(params.number);\n        stringNumber.setPosition(params.position);\n        stringNumber.setContext(this.context);\n        stringNumber.setDrawCircle(drawCircle);\n        return stringNumber;\n    }\n    TickContext() {\n        return new TickContext();\n    }\n    ModifierContext() {\n        return new ModifierContext();\n    }\n    MultiMeasureRest(params) {\n        const numMeasures = defined(params.numberOfMeasures, 'NoNumberOfMeasures');\n        const multiMeasureRest = new MultiMeasureRest(numMeasures, params);\n        multiMeasureRest.setContext(this.context);\n        this.renderQ.push(multiMeasureRest);\n        return multiMeasureRest;\n    }\n    Voice(params) {\n        const p = Object.assign({ time: '4/4' }, params);\n        const voice = new Voice(p.time);\n        this.voices.push(voice);\n        return voice;\n    }\n    StaveConnector(params) {\n        const connector = new StaveConnector(params.topStave, params.bottomStave);\n        connector.setType(params.type).setContext(this.context);\n        this.renderQ.push(connector);\n        return connector;\n    }\n    Formatter(options) {\n        return new Formatter(options);\n    }\n    Tuplet(params) {\n        const p = Object.assign({ notes: [], options: {} }, params);\n        const tuplet = new Tuplet(p.notes, p.options).setContext(this.context);\n        this.renderQ.push(tuplet);\n        return tuplet;\n    }\n    Beam(params) {\n        var _a, _b, _c, _d, _e;\n        const beam = new Beam(params.notes, (_a = params.options) === null || _a === void 0 ? void 0 : _a.autoStem).setContext(this.context);\n        beam.breakSecondaryAt((_c = (_b = params.options) === null || _b === void 0 ? void 0 : _b.secondaryBeamBreaks) !== null && _c !== void 0 ? _c : []);\n        if ((_d = params.options) === null || _d === void 0 ? void 0 : _d.partialBeamDirections) {\n            Object.entries((_e = params.options) === null || _e === void 0 ? void 0 : _e.partialBeamDirections).forEach(([noteIndex, direction]) => {\n                beam.setPartialBeamSideAt(Number(noteIndex), direction);\n            });\n        }\n        this.renderQ.push(beam);\n        return beam;\n    }\n    Curve(params) {\n        const curve = new Curve(params.from, params.to, params.options).setContext(this.context);\n        this.renderQ.push(curve);\n        return curve;\n    }\n    StaveTie(params) {\n        var _a;\n        const tie = new StaveTie({\n            firstNote: params.from,\n            lastNote: params.to,\n            firstIndexes: params.firstIndexes,\n            lastIndexes: params.lastIndexes,\n        }, params.text);\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.direction)\n            tie.setDirection(params.options.direction);\n        tie.setContext(this.context);\n        this.renderQ.push(tie);\n        return tie;\n    }\n    StaveLine(params) {\n        var _a, _b;\n        const line = new StaveLine({\n            firstNote: params.from,\n            lastNote: params.to,\n            firstIndexes: params.firstIndexes,\n            lastIndexes: params.lastIndexes,\n        });\n        if ((_a = params.options) === null || _a === void 0 ? void 0 : _a.text)\n            line.setText(params.options.text);\n        if ((_b = params.options) === null || _b === void 0 ? void 0 : _b.font)\n            line.setFont(params.options.font);\n        line.setContext(this.context);\n        this.renderQ.push(line);\n        return line;\n    }\n    VibratoBracket(params) {\n        const vibratoBracket = new VibratoBracket({\n            start: params.from,\n            stop: params.to,\n        });\n        if (params.options.line)\n            vibratoBracket.setLine(params.options.line);\n        if (params.options.code)\n            vibratoBracket.setVibratoCode(params.options.code);\n        vibratoBracket.setContext(this.context);\n        this.renderQ.push(vibratoBracket);\n        return vibratoBracket;\n    }\n    TextBracket(params) {\n        const textBracket = new TextBracket({\n            start: params.from,\n            stop: params.to,\n            text: params.text,\n            superscript: params.options.superscript,\n            position: params.options.position,\n        });\n        if (params.options.line)\n            textBracket.setLine(params.options.line);\n        if (params.options.font)\n            textBracket.setFont(params.options.font);\n        textBracket.setContext(this.context);\n        this.renderQ.push(textBracket);\n        return textBracket;\n    }\n    System(params = {}) {\n        params.factory = this;\n        const system = new System(params).setContext(this.context);\n        this.systems.push(system);\n        return system;\n    }\n    /**\n     * Creates EasyScore. Normally the first step after constructing a Factory. For example:\n     * ```\n     * const vf: Factory = new VexFlow.Factory({renderer: { elementId: 'boo', width: 1200, height: 600 }});\n     * const score: EasyScore = vf.EasyScore();\n     * ```\n     * @param options.factory optional instance of Factory\n     * @param options.builder instance of Builder\n     * @param options.commitHooks function to call after a note element is created\n     * @param options.throwOnError throw error in case of parsing error\n     */\n    EasyScore(options = {}) {\n        options.factory = this;\n        return new EasyScore(options);\n    }\n    PedalMarking(params) {\n        const p = Object.assign({ notes: [], options: {\n                style: 'mixed',\n            } }, params);\n        const pedal = new PedalMarking(p.notes);\n        pedal.setType(PedalMarking.typeString[p.options.style]);\n        pedal.setContext(this.context);\n        this.renderQ.push(pedal);\n        return pedal;\n    }\n    NoteSubGroup(params) {\n        const p = Object.assign({ notes: [] }, params);\n        const group = new NoteSubGroup(p.notes);\n        group.setContext(this.context);\n        return group;\n    }\n    /** Render the score. */\n    draw() {\n        const ctx = this.context;\n        this.systems.forEach((s) => s.setContext(ctx).format());\n        this.staves.forEach((s) => s.setContext(ctx).drawWithStyle());\n        this.voices.forEach((v) => v.setContext(ctx).drawWithStyle());\n        this.renderQ.forEach((e) => {\n            if (!e.isRendered())\n                e.setContext(ctx).drawWithStyle();\n        });\n        this.systems.forEach((s) => s.setContext(ctx).drawWithStyle());\n        this.reset();\n    }\n}\n/** To enable logging for this class. Set `VexFlow.Factory.DEBUG` to `true`. */\nFactory.DEBUG = false;\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n// @author Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/\n//\n// This class implements hairpins between notes.\n// Hairpins can be either crescendo or decrescendo.\nimport { Element } from './element';\nimport { Modifier } from './modifier';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class StaveHairpin extends Element {\n    static get CATEGORY() {\n        return Category.StaveHairpin;\n    }\n    /* Helper function to convert ticks into pixels.\n     * Requires a Formatter with voices joined and formatted (to\n     * get pixels per tick)\n     *\n     * options is struct that has:\n     *\n     *  {\n     *   height: px,\n     *   yShift: px,         // vertical offset\n     *   leftShiftTicks: 0, // left horizontal offset expressed in ticks\n     *   rightShiftTicks: 0 // right horizontal offset expressed in ticks\n     *  }\n     *\n     **/\n    static FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {\n        var _a, _b;\n        const ppt = formatter.pixelsPerTick;\n        if (ppt === null) {\n            throw new RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');\n        }\n        const leftShiftPx = ppt * ((_a = options.leftShiftTicks) !== null && _a !== void 0 ? _a : 0);\n        const rightShiftPx = ppt * ((_b = options.rightShiftTicks) !== null && _b !== void 0 ? _b : 0);\n        const hairpinOptions = {\n            height: options.height,\n            yShift: options.yShift,\n            leftShiftPx,\n            rightShiftPx,\n            rightShiftTicks: 0,\n            leftShiftTicks: 0,\n        };\n        new StaveHairpin({\n            firstNote: notes.firstNote,\n            lastNote: notes.lastNote,\n        }, type)\n            .setContext(ctx)\n            .setRenderOptions(hairpinOptions)\n            .setPosition(position)\n            .drawWithStyle();\n    }\n    /**\n     * Create a new hairpin from the specified notes.\n     *\n     * @param {!Object} notes The notes to tie up.\n     * Notes is a struct that has:\n     *\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *  }\n     * @param {!Object} type The type of hairpin\n     */\n    constructor(notes, type) {\n        super();\n        this.setNotes(notes);\n        this.hairpin = type;\n        this.position = Modifier.Position.BELOW;\n        this.renderOptions = {\n            height: 10,\n            yShift: 0, // vertical offset\n            leftShiftPx: 0, // left horizontal offset\n            rightShiftPx: 0, // right horizontal offset\n            rightShiftTicks: 0,\n            leftShiftTicks: 0,\n        };\n    }\n    setPosition(position) {\n        if (position === Modifier.Position.ABOVE || position === Modifier.Position.BELOW) {\n            this.position = position;\n        }\n        return this;\n    }\n    setRenderOptions(options) {\n        this.renderOptions = options;\n        return this;\n    }\n    /**\n     * Set the notes to attach this hairpin to.\n     *\n     * @param {!Object} notes The start and end notes.\n     */\n    setNotes(notes) {\n        if (!notes.firstNote && !notes.lastNote) {\n            throw new RuntimeError('BadArguments', 'Hairpin needs to have either firstNote or lastNote set.');\n        }\n        this.notes = notes;\n        this.firstNote = notes.firstNote;\n        this.lastNote = notes.lastNote;\n        return this;\n    }\n    renderHairpin(params) {\n        const ctx = this.checkContext();\n        let dis = this.renderOptions.yShift + 20;\n        let yShift = params.firstY;\n        if (this.position === Modifier.Position.ABOVE) {\n            dis = -dis + 30;\n            yShift = params.firstY - params.staffHeight;\n        }\n        const leftShiftPx = this.renderOptions.leftShiftPx;\n        const rightShiftPx = this.renderOptions.rightShiftPx;\n        ctx.beginPath();\n        switch (this.hairpin) {\n            case StaveHairpin.type.CRESC:\n                ctx.moveTo(params.lastX + rightShiftPx, yShift + dis);\n                ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height / 2 + dis);\n                ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height + dis);\n                break;\n            case StaveHairpin.type.DECRESC:\n                ctx.moveTo(params.firstX + leftShiftPx, yShift + dis);\n                ctx.lineTo(params.lastX + rightShiftPx, yShift + this.renderOptions.height / 2 + dis);\n                ctx.lineTo(params.firstX + leftShiftPx, yShift + this.renderOptions.height + dis);\n                break;\n            default:\n                // Default is NONE, so nothing to draw\n                break;\n        }\n        ctx.stroke();\n        ctx.closePath();\n    }\n    draw() {\n        this.checkContext();\n        this.setRendered();\n        const firstNote = this.firstNote;\n        const lastNote = this.lastNote;\n        if (!firstNote || !lastNote)\n            throw new RuntimeError('NoNote', 'Notes required to draw');\n        const start = firstNote.getModifierStartXY(this.position, 0);\n        const end = lastNote.getModifierStartXY(this.position, 0);\n        this.renderHairpin({\n            firstX: start.x,\n            lastX: end.x,\n            firstY: firstNote.checkStave().getY() + firstNote.checkStave().getHeight(),\n            lastY: lastNote.checkStave().getY() + lastNote.checkStave().getHeight(),\n            staffHeight: firstNote.checkStave().getHeight(),\n        });\n    }\n}\nStaveHairpin.type = {\n    CRESC: 1,\n    DECRESC: 2,\n};\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n// This class implements varies types of ties between contiguous notes. The\n// ties include: regular ties, hammer ons, pull offs, and slides.\nimport { TabTie } from './tabtie';\nimport { Category } from './typeguard';\nimport { RuntimeError } from './util';\nexport class TabSlide extends TabTie {\n    static get CATEGORY() {\n        return Category.TabSlide;\n    }\n    static get SLIDE_UP() {\n        return 1;\n    }\n    static get SLIDE_DOWN() {\n        return -1;\n    }\n    static createSlideUp(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_UP);\n    }\n    static createSlideDown(notes) {\n        return new TabSlide(notes, TabSlide.SLIDE_DOWN);\n    }\n    /**\n     * @param notes is a struct of the form:\n     *  {\n     *    firstNote: Note,\n     *    lastNote: Note,\n     *    firstIndexes: [n1, n2, n3],\n     *    lastIndexes: [n1, n2, n3]\n     *  }\n     * @param notes.firstNote the starting note of the slide\n     * @param notes.lastNote the ending note of the slide\n     * @param notes.firstIndexes specifies which string + fret positions of the TabNote are used in this slide. zero indexed.\n     * @param notes.lastIndexes currently unused. we assume it's the same as firstIndexes.\n     *\n     * @param direction TabSlide.SLIDE_UP or TabSlide.SLIDE_DOWN\n     */\n    constructor(notes, direction) {\n        super(notes, 'sl.');\n        // Determine the direction automatically if it is not provided.\n        if (!direction) {\n            let firstFret = notes.firstNote.getPositions()[0].fret;\n            if (typeof firstFret === 'string') {\n                firstFret = parseInt(firstFret, 10);\n            }\n            let lastFret = notes.lastNote.getPositions()[0].fret;\n            if (typeof lastFret === 'string') {\n                lastFret = parseInt(lastFret, 10);\n            }\n            // If either of the frets are 'X', parseInt() above will return NaN.\n            // Choose TabSlide.SLIDE_UP by default.\n            if (isNaN(firstFret) || isNaN(lastFret)) {\n                direction = TabSlide.SLIDE_UP;\n            }\n            else {\n                direction = firstFret > lastFret ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;\n            }\n        }\n        this.direction = direction;\n        this.renderOptions.cp1 = 11;\n        this.renderOptions.cp2 = 14;\n        this.renderOptions.yShift = 0.5;\n    }\n    /**\n     * @param params.firstX is specified in pixels.\n     * @param params.lastX is specified in pixels.\n     */\n    renderTie(params) {\n        if (params.firstYs.length === 0 || params.lastYs.length === 0) {\n            throw new RuntimeError('BadArguments', 'No Y-values to render');\n        }\n        const ctx = this.checkContext();\n        const firstX = params.firstX; // pixel units\n        const firstYs = params.firstYs;\n        const lastX = params.lastX; // pixel units\n        const direction = params.direction;\n        if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {\n            throw new RuntimeError('BadSlide', 'Invalid slide direction');\n        }\n        const firstIndexes = this.notes.firstIndexes;\n        for (let i = 0; i < firstIndexes.length; ++i) {\n            const slideY = firstYs[firstIndexes[i]] + this.renderOptions.yShift;\n            if (isNaN(slideY)) {\n                throw new RuntimeError('BadArguments', 'Bad indexes for slide rendering.');\n            }\n            ctx.beginPath();\n            ctx.moveTo(firstX, slideY + 3 * direction);\n            ctx.lineTo(lastX, slideY - 3 * direction);\n            ctx.closePath();\n            ctx.stroke();\n        }\n        this.setRendered();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\nimport { Tables } from './tables';\nimport { RuntimeError } from './util';\n/** `Tuning` implements varies types of tunings for tablature. */\nexport class Tuning {\n    static get names() {\n        return {\n            standard: 'E/5,B/4,G/4,D/4,A/3,E/3',\n            dagdad: 'D/5,A/4,G/4,D/4,A/3,D/3',\n            dropd: 'E/5,B/4,G/4,D/4,A/3,D/3',\n            eb: 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',\n            standardBanjo: 'D/5,B/4,G/4,D/4,G/5',\n        };\n    }\n    /**\n     * Constructor.\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    constructor(tuningString = 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2') {\n        this.tuningValues = [];\n        // Default to standard tuning.\n        this.setTuning(tuningString);\n    }\n    /** Return the note number associated to the note string. */\n    noteToInteger(noteString) {\n        var _a;\n        return (_a = Tables.keyProperties(noteString).intValue) !== null && _a !== void 0 ? _a : -1;\n    }\n    /**\n     * Set tuning identified by tuning name (eg. 'dagdad')\n     * @param tuningString tuning name (eg. 'dagdad') or comma separated note strings\n     */\n    setTuning(tuningString) {\n        if (Tuning.names[tuningString]) {\n            tuningString = Tuning.names[tuningString];\n        }\n        this.tuningValues = [];\n        const keys = tuningString.split(/\\s*,\\s*/);\n        if (keys.length === 0) {\n            throw new RuntimeError('BadArguments', `Invalid tuning string: ${tuningString}`);\n        }\n        for (let i = 0; i < keys.length; ++i) {\n            this.tuningValues[i] = this.noteToInteger(keys[i]);\n        }\n    }\n    /** Return the note number associated with a tablature string. */\n    getValueForString(stringNum) {\n        const s = Number(stringNum);\n        if (s < 1 || s > this.tuningValues.length) {\n            throw new RuntimeError('BadArguments', `String number must be between 1 and ${this.tuningValues.length}:${stringNum}`);\n        }\n        return this.tuningValues[s - 1];\n    }\n    /** Return the note number associated with a tablature string and fret. */\n    getValueForFret(fretNum, stringNum) {\n        const stringValue = this.getValueForString(stringNum);\n        const f = Number(fretNum);\n        if (f < 0) {\n            throw new RuntimeError('BadArguments', `Fret number must be 0 or higher: ${fretNum}`);\n        }\n        return stringValue + f;\n    }\n    /** Return the note string associated with tablature string and fret. */\n    getNoteForFret(fretNum, stringNum) {\n        const noteValue = this.getValueForFret(fretNum, stringNum);\n        const octave = Math.floor(noteValue / 12);\n        const value = noteValue % 12;\n        return `${Tables.integerToNote(value)}/${octave}`;\n    }\n}\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Accidental } from './accidental';\nimport { Annotation, AnnotationHorizontalJustify, AnnotationVerticalJustify } from './annotation';\nimport { Articulation } from './articulation';\nimport { BarNote } from './barnote';\nimport { Beam } from './beam';\nimport { Bend } from './bend';\nimport { BoundingBox } from './boundingbox';\nimport { CanvasContext } from './canvascontext';\nimport { ChordSymbol, ChordSymbolHorizontalJustify, ChordSymbolVerticalJustify, SymbolModifiers } from './chordsymbol';\nimport { Clef } from './clef';\nimport { ClefNote } from './clefnote';\nimport { Crescendo } from './crescendo';\nimport { Curve, CurvePosition } from './curve';\nimport { Dot } from './dot';\nimport { EasyScore } from './easyscore';\nimport { Element } from './element';\nimport { Factory } from './factory';\nimport { Font, FontStyle, FontWeight } from './font';\nimport { Formatter } from './formatter';\nimport { Fraction } from './fraction';\nimport { FretHandFinger } from './frethandfinger';\nimport { GhostNote } from './ghostnote';\nimport { GlyphNote } from './glyphnote';\nimport { Glyphs } from './glyphs';\nimport { GraceNote } from './gracenote';\nimport { GraceNoteGroup } from './gracenotegroup';\nimport { GraceTabNote } from './gracetabnote';\nimport { KeyManager } from './keymanager';\nimport { KeySignature } from './keysignature';\nimport { KeySigNote } from './keysignote';\nimport { Metrics, MetricsDefaults } from './metrics';\nimport { Modifier, ModifierPosition } from './modifier';\nimport { ModifierContext } from './modifiercontext';\nimport { MultiMeasureRest } from './multimeasurerest';\nimport { Music } from './music';\nimport { Note } from './note';\nimport { NoteHead } from './notehead';\nimport { NoteSubGroup } from './notesubgroup';\nimport { Ornament } from './ornament';\nimport { Parenthesis } from './parenthesis';\nimport { Parser } from './parser';\nimport { PedalMarking } from './pedalmarking';\nimport { Registry } from './registry';\nimport { RenderContext } from './rendercontext';\nimport { Renderer, RendererBackends, RendererLineEndType } from './renderer';\nimport { RepeatNote } from './repeatnote';\nimport { Stave } from './stave';\nimport { Barline, BarlineType } from './stavebarline';\nimport { StaveConnector } from './staveconnector';\nimport { StaveHairpin } from './stavehairpin';\nimport { StaveLine } from './staveline';\nimport { StaveModifier, StaveModifierPosition } from './stavemodifier';\nimport { StaveNote } from './stavenote';\nimport { Repetition } from './staverepetition';\nimport { StaveTempo } from './stavetempo';\nimport { StaveText } from './stavetext';\nimport { StaveTie } from './stavetie';\nimport { Volta, VoltaType } from './stavevolta';\nimport { Stem } from './stem';\nimport { StringNumber } from './stringnumber';\nimport { Stroke } from './strokes';\nimport { SVGContext } from './svgcontext';\nimport { System } from './system';\nimport { Tables } from './tables';\nimport { TabNote } from './tabnote';\nimport { TabSlide } from './tabslide';\nimport { TabStave } from './tabstave';\nimport { TabTie } from './tabtie';\nimport { TextBracket, TextBracketPosition } from './textbracket';\nimport { TextDynamics } from './textdynamics';\nimport { TextJustification, TextNote } from './textnote';\nimport { TickContext } from './tickcontext';\nimport { TimeSignature } from './timesignature';\nimport { TimeSigNote } from './timesignote';\nimport { Tremolo } from './tremolo';\nimport { Tuning } from './tuning';\nimport { Tuplet } from './tuplet';\nimport { RuntimeError } from './util';\nimport { DATE, ID, VERSION } from './version';\nimport { Vibrato } from './vibrato';\nimport { VibratoBracket } from './vibratobracket';\nimport { Voice, VoiceMode } from './voice';\nexport class VexFlow {\n    /**\n     * Load the fonts that are used by your app.\n     *\n     * Call this if you are using `vexflow-core.js` to take advantage of lazy loading for fonts.\n     *\n     * If you are using `vexflow.js` or `vexflow-bravura.js`, this method is unnecessary, since\n     * they already call loadFonts(...) and setFonts(...) for you.\n     *\n     * If `fontNames` is undefined, all fonts in Font.FILES will be loaded.\n     * This is useful for debugging, but not recommended for production because it will load lots of fonts.\n     *\n     * For example, on the `flow.html` test page, you could call:\n     *   `await VexFlow.loadFonts();`\n     *\n     * Alternatively, you may load web fonts with a stylesheet link (e.g., from Google Fonts),\n     * and a @font-face { font-family: ... } rule in your CSS.\n     *\n     * Customize `Font.HOST_URL` and `Font.FILES` to load different fonts for your app.\n     */\n    static loadFonts(...fontNames) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!fontNames) {\n                fontNames = Object.keys(Font.FILES);\n            }\n            const fontLoadPromises = [];\n            for (const fontName of fontNames) {\n                fontLoadPromises.push(Font.load(fontName));\n            }\n            yield Promise.all(fontLoadPromises);\n        });\n    }\n    /**\n     * Call this if you are using `vexflow-core.js` to take advantage of lazy loading for fonts.\n     *\n     * `vexflow.js` and `vexflow-bravura.js` already call setFonts('Bravura', 'Academico'), so you only\n     * need to call this when switching fonts.\n     *\n     * Example:\n     * ```\n     * await VexFlow.loadFonts('Bravura', 'Academico', 'Petaluma', 'Petaluma Script');\n     * VexFlow.setFonts('Bravura', 'Academico');\n     * ... render a score in Bravura ...\n     * VexFlow.setFonts('Petaluma', 'Petaluma Script');\n     * ... render a score in Petaluma...\n     * ```\n     * See `demos/fonts/` for more examples.\n     */\n    static setFonts(...fontNames) {\n        // Convert the array of font names into an array of Font objects.\n        MetricsDefaults.fontFamily = fontNames.join(',');\n        Metrics.clear();\n    }\n    static getFonts() {\n        return Metrics.get('fontFamily').split(',');\n    }\n    static get RENDER_PRECISION_PLACES() {\n        return Tables.RENDER_PRECISION_PLACES;\n    }\n    static set RENDER_PRECISION_PLACES(precision) {\n        Tables.RENDER_PRECISION_PLACES = precision;\n    }\n    static get SOFTMAX_FACTOR() {\n        return Tables.SOFTMAX_FACTOR;\n    }\n    static set SOFTMAX_FACTOR(factor) {\n        Tables.SOFTMAX_FACTOR = factor;\n    }\n    static get UNISON() {\n        return Tables.UNISON;\n    }\n    static set UNISON(unison) {\n        Tables.UNISON = unison;\n    }\n    static get NOTATION_FONT_SCALE() {\n        return Tables.NOTATION_FONT_SCALE;\n    }\n    static set NOTATION_FONT_SCALE(value) {\n        Tables.NOTATION_FONT_SCALE = value;\n    }\n    static get TABLATURE_FONT_SCALE() {\n        return Tables.TABLATURE_FONT_SCALE;\n    }\n    static set TABLATURE_FONT_SCALE(value) {\n        Tables.TABLATURE_FONT_SCALE = value;\n    }\n    static get RESOLUTION() {\n        return Tables.RESOLUTION;\n    }\n    static set RESOLUTION(value) {\n        Tables.RESOLUTION = value;\n    }\n    static get SLASH_NOTEHEAD_WIDTH() {\n        return Tables.SLASH_NOTEHEAD_WIDTH;\n    }\n    static set SLASH_NOTEHEAD_WIDTH(value) {\n        Tables.SLASH_NOTEHEAD_WIDTH = value;\n    }\n    static get STAVE_LINE_DISTANCE() {\n        return Tables.STAVE_LINE_DISTANCE;\n    }\n    static set STAVE_LINE_DISTANCE(value) {\n        Tables.STAVE_LINE_DISTANCE = value;\n    }\n    static get STAVE_LINE_THICKNESS() {\n        return MetricsDefaults.Stave.lineWidth;\n    }\n    static set STAVE_LINE_THICKNESS(value) {\n        MetricsDefaults.Stave.lineWidth = value;\n        MetricsDefaults.TabStave.lineWidth = value;\n        Metrics.clear('Stave');\n        Metrics.clear('TabStave');\n    }\n    static get STEM_HEIGHT() {\n        return Tables.STEM_HEIGHT;\n    }\n    static set STEM_HEIGHT(value) {\n        Tables.STEM_HEIGHT = value;\n    }\n    static get STEM_WIDTH() {\n        return Tables.STEM_WIDTH;\n    }\n    static set STEM_WIDTH(value) {\n        Tables.STEM_WIDTH = value;\n    }\n    static get TIME4_4() {\n        return Tables.TIME4_4;\n    }\n    static get unicode() {\n        return Tables.unicode;\n    }\n    static keySignature(spec) {\n        return Tables.keySignature(spec);\n    }\n    static hasKeySignature(spec) {\n        return Tables.hasKeySignature(spec);\n    }\n    static getKeySignatures() {\n        return Tables.getKeySignatures();\n    }\n    static clefProperties(clef) {\n        return Tables.clefProperties(clef);\n    }\n    // eslint-disable-next-line\n    static keyProperties(key, clef, params) {\n        return Tables.keyProperties(key, clef, params);\n    }\n    static durationToTicks(duration) {\n        return Tables.durationToTicks(duration);\n    }\n}\n// VERSION, ID, and DATE are imported from version.ts.\n// INFO is set by the entry file in vexflow/entry/.\nVexFlow.BUILD = {\n    // version number.\n    VERSION: VERSION,\n    // git commit ID that this library was built from.\n    ID: ID,\n    // The date when this library was compiled.\n    DATE: DATE,\n    // Which build is this? vexflow, vexflow-bravura, vexflow-core, etc.\n    INFO: '',\n};\nVexFlow.Accidental = Accidental;\nVexFlow.Annotation = Annotation;\nVexFlow.Articulation = Articulation;\nVexFlow.Barline = Barline;\nVexFlow.BarNote = BarNote;\nVexFlow.Beam = Beam;\nVexFlow.Bend = Bend;\nVexFlow.BoundingBox = BoundingBox;\nVexFlow.CanvasContext = CanvasContext;\nVexFlow.ChordSymbol = ChordSymbol;\nVexFlow.Clef = Clef;\nVexFlow.ClefNote = ClefNote;\nVexFlow.Crescendo = Crescendo;\nVexFlow.Curve = Curve;\nVexFlow.Dot = Dot;\nVexFlow.EasyScore = EasyScore;\nVexFlow.Element = Element;\nVexFlow.Factory = Factory;\nVexFlow.Font = Font;\nVexFlow.Formatter = Formatter;\nVexFlow.Fraction = Fraction;\nVexFlow.FretHandFinger = FretHandFinger;\nVexFlow.GhostNote = GhostNote;\nVexFlow.GlyphNote = GlyphNote;\nVexFlow.GraceNote = GraceNote;\nVexFlow.GraceNoteGroup = GraceNoteGroup;\nVexFlow.GraceTabNote = GraceTabNote;\nVexFlow.KeyManager = KeyManager;\nVexFlow.KeySignature = KeySignature;\nVexFlow.KeySigNote = KeySigNote;\nVexFlow.Modifier = Modifier;\nVexFlow.ModifierContext = ModifierContext;\nVexFlow.MultiMeasureRest = MultiMeasureRest;\nVexFlow.Music = Music;\nVexFlow.Note = Note;\nVexFlow.NoteHead = NoteHead;\nVexFlow.NoteSubGroup = NoteSubGroup;\nVexFlow.Ornament = Ornament;\nVexFlow.Parenthesis = Parenthesis;\nVexFlow.Parser = Parser;\nVexFlow.PedalMarking = PedalMarking;\nVexFlow.Registry = Registry;\nVexFlow.RenderContext = RenderContext;\nVexFlow.Renderer = Renderer;\nVexFlow.RepeatNote = RepeatNote;\nVexFlow.Repetition = Repetition;\nVexFlow.Stave = Stave;\nVexFlow.StaveConnector = StaveConnector;\nVexFlow.StaveHairpin = StaveHairpin;\nVexFlow.StaveLine = StaveLine;\nVexFlow.StaveModifier = StaveModifier;\nVexFlow.StaveNote = StaveNote;\nVexFlow.StaveTempo = StaveTempo;\nVexFlow.StaveText = StaveText;\nVexFlow.StaveTie = StaveTie;\nVexFlow.Stem = Stem;\nVexFlow.StringNumber = StringNumber;\nVexFlow.Stroke = Stroke;\nVexFlow.SVGContext = SVGContext;\nVexFlow.System = System;\nVexFlow.TabNote = TabNote;\nVexFlow.TabSlide = TabSlide;\nVexFlow.TabStave = TabStave;\nVexFlow.TabTie = TabTie;\nVexFlow.TextBracket = TextBracket;\nVexFlow.TextDynamics = TextDynamics;\nVexFlow.TextNote = TextNote;\nVexFlow.TickContext = TickContext;\nVexFlow.TimeSignature = TimeSignature;\nVexFlow.TimeSigNote = TimeSigNote;\nVexFlow.Tremolo = Tremolo;\nVexFlow.Tuning = Tuning;\nVexFlow.Tuplet = Tuplet;\nVexFlow.Vibrato = Vibrato;\nVexFlow.VibratoBracket = VibratoBracket;\nVexFlow.Voice = Voice;\nVexFlow.Volta = Volta;\nVexFlow.RuntimeError = RuntimeError;\nVexFlow.Test = undefined; // Set by vexflow_test_helpers.ts in the debug version of this library.\n// Exported Enums.\n// Sorted by the module / file they are exported from.\nVexFlow.AnnotationHorizontalJustify = AnnotationHorizontalJustify;\nVexFlow.AnnotationVerticalJustify = AnnotationVerticalJustify;\nVexFlow.ChordSymbolHorizontalJustify = ChordSymbolHorizontalJustify;\nVexFlow.ChordSymbolVerticalJustify = ChordSymbolVerticalJustify;\nVexFlow.SymbolModifiers = SymbolModifiers;\nVexFlow.CurvePosition = CurvePosition;\nVexFlow.FontWeight = FontWeight;\nVexFlow.FontStyle = FontStyle;\nVexFlow.Glyphs = Glyphs;\nVexFlow.ModifierPosition = ModifierPosition;\nVexFlow.RendererBackends = RendererBackends;\nVexFlow.RendererLineEndType = RendererLineEndType;\nVexFlow.BarlineType = BarlineType;\nVexFlow.StaveModifierPosition = StaveModifierPosition;\nVexFlow.VoltaType = VoltaType;\nVexFlow.TextBracketPosition = TextBracketPosition;\nVexFlow.TextJustification = TextJustification;\nVexFlow.VoiceMode = VoiceMode;\n","// Gruntfile.js uses string-replace-loader to replace these values during build time.\nexport const VERSION = '5.0.0';\nexport const ID = '0ca6f889545c33cce851b420c24945f6eb685aeb';\nexport const DATE = '2025-03-05T17:05:43.991Z';\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Balazs Forian-Szabo\n//\n// ## Description\n//\n// A basic implementation of grace notes\n// to be rendered on a tab stave.\n//\n// See `tests/gracetabnote_tests.ts` for usage examples.\nimport { TabNote } from './tabnote';\nimport { Category } from './typeguard';\nexport class GraceTabNote extends TabNote {\n    static get CATEGORY() {\n        return Category.GraceTabNote;\n    }\n    constructor(noteStruct) {\n        super(noteStruct, false);\n        this.renderOptions = Object.assign(Object.assign({}, this.renderOptions), { \n            // vertical shift from stave line\n            yShift: 0.3 });\n        this.updateWidth();\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n//\n// ## Description\n//\n// This class implements diatonic key management.\nimport { Music } from './music';\nimport { RuntimeError } from './util';\nexport class KeyManager {\n    constructor(key) {\n        this.music = new Music();\n        this.setKey(key);\n    }\n    setKey(key) {\n        this.key = key;\n        this.reset();\n        return this;\n    }\n    getKey() {\n        return this.key;\n    }\n    reset() {\n        this.keyParts = this.music.getKeyParts(this.key);\n        this.keyString = this.keyParts.root;\n        if (this.keyParts.accidental)\n            this.keyString += this.keyParts.accidental;\n        const isSupportedType = Music.scaleTypes[this.keyParts.type];\n        if (!isSupportedType) {\n            throw new RuntimeError('BadArguments', `Unsupported key type: ${this.key}`);\n        }\n        this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), Music.scaleTypes[this.keyParts.type]);\n        this.scaleMap = {};\n        this.scaleMapByValue = {};\n        this.originalScaleMapByValue = {};\n        const noteLocation = Music.rootIndexes[this.keyParts.root];\n        for (let i = 0; i < Music.roots.length; ++i) {\n            const index = (noteLocation + i) % Music.roots.length;\n            const rootName = Music.roots[index];\n            const noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);\n            this.scaleMap[rootName] = noteName;\n            this.scaleMapByValue[this.scale[i]] = noteName;\n            this.originalScaleMapByValue[this.scale[i]] = noteName;\n        }\n        return this;\n    }\n    getAccidental(key) {\n        const root = this.music.getKeyParts(key).root;\n        const parts = this.music.getNoteParts(this.scaleMap[root]);\n        return {\n            note: this.scaleMap[root],\n            accidental: parts.accidental,\n        };\n    }\n    selectNote(note) {\n        note = note.toLowerCase();\n        const parts = this.music.getNoteParts(note);\n        // First look for matching note in our altered scale\n        const scaleNote = this.scaleMap[parts.root];\n        const modparts = this.music.getNoteParts(scaleNote);\n        if (scaleNote === note) {\n            return {\n                note: scaleNote,\n                accidental: parts.accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in our altered scale\n        const valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];\n        if (valueNote !== undefined) {\n            return {\n                note: valueNote,\n                accidental: this.music.getNoteParts(valueNote).accidental,\n                change: false,\n            };\n        }\n        // Then search for a note of equivalent value in the original scale\n        const originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];\n        if (originalValueNote !== undefined) {\n            this.scaleMap[modparts.root] = originalValueNote;\n            delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];\n            this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;\n            return {\n                note: originalValueNote,\n                accidental: this.music.getNoteParts(originalValueNote).accidental,\n                change: true,\n            };\n        }\n        // Then try to unmodify a currently modified note.\n        if (modparts.root === note) {\n            delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n            this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;\n            this.scaleMap[modparts.root] = modparts.root;\n            return {\n                note: modparts.root,\n                accidental: undefined,\n                change: true,\n            };\n        }\n        // Last resort -- shitshoot\n        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];\n        this.scaleMapByValue[this.music.getNoteValue(note)] = note;\n        delete this.scaleMap[modparts.root];\n        this.scaleMap[modparts.root] = note;\n        return {\n            note,\n            accidental: parts.accidental,\n            change: true,\n        };\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// @author Mike Corrigan <corrigan@gmail.com>\n// MIT License\nimport { Glyphs } from './glyphs';\nimport { Metrics } from './metrics';\nimport { Modifier } from './modifier';\nimport { Stem } from './stem';\nimport { Category } from './typeguard';\n/** Tremolo implements tremolo notation. */\nexport class Tremolo extends Modifier {\n    static get CATEGORY() {\n        return Category.Tremolo;\n    }\n    /**\n     * @param num number of bars\n     */\n    constructor(num) {\n        super();\n        this.num = num;\n        this.position = Modifier.Position.CENTER;\n        this.text = Glyphs.tremolo1;\n    }\n    /** Draw the tremolo on the rendering context. */\n    draw() {\n        const ctx = this.checkContext();\n        const note = this.checkAttachedNote();\n        this.setRendered();\n        const stemDirection = note.getStemDirection();\n        const scale = note.getFontScale();\n        const ySpacing = Metrics.get(`Tremolo.spacing`) * stemDirection * scale;\n        const x = note.getAbsoluteX() + (stemDirection === Stem.UP ? note.getGlyphWidth() - Stem.WIDTH / 2 : Stem.WIDTH / 2);\n        let y = note.getStemExtents().topY + (this.num <= 3 ? ySpacing : 0);\n        this.fontInfo.size = Metrics.get(`Tremolo.fontSize`) * scale;\n        for (let i = 0; i < this.num; ++i) {\n            this.renderText(ctx, x, y);\n            y += ySpacing;\n        }\n    }\n}\n","// Copyright (c) 2023-present VexFlow contributors: https://github.com/vexflow/vexflow/graphs/contributors\n// MIT License\n//\n//\n// vexflow-core.ts is the entry point for the vexflow-core.js build target.\n// It supports dynamic importing of fonts (woff2 / otf), and does not\n// bundle or preload any music or text fonts by default.\n// All music/text fonts need to be loaded at runtime during page load.\n//\n// The webpack config inside Gruntfile.js sets the mode to 'production' to produce a minified build.\nimport { VexFlow } from '../src/vexflow';\nVexFlow.BUILD.INFO = 'vexflow-core';\nexport * from '../src/index';\nexport default VexFlow;\n"],"names":["root","factory","exports","module","define","amd","window","globalThis","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","g","Function","e","obj","prop","prototype","hasOwnProperty","call","isCategory","category","checkAncestors","constructorFcn","constructor","CATEGORY","getPrototypeOf","isBarline","Category","Barline","isGraceNote","GraceNote","isNote","Note","isStaveNote","StaveNote","isStemmableNote","StemmableNote","isTabNote","TabNote","RuntimeError","Error","code","message","super","globalObject","self","defined","x","undefined","log","block","args","line","Array","slice","join","console","midLine","a","b","n","parseInt","prefix","text","normalizeAngle","Math","PI","sumArray","arr","reduce","Fraction","GCD","Number","isNaN","t","LCM","LCMM","length","shift","numerator","denominator","set","value","simplify","u","d","gcd","add","param1","param2","otherNumerator","otherDenominator","getNumeratorAndDenominator","lcm","subtract","multiply","divide","equals","compare","fractionA","copy","fractionB","greaterThan","greaterThanEquals","lessThan","lessThanEquals","clone","other","quotient","floor","remainder","makeAbs","abs","toString","toSimplifiedString","toMixedString","s","q","f","parse","str","i","split","Metrics","clear","cacheFont","delete","cacheStyle","getFontInfo","font","family","size","weight","style","structuredClone","getStyle","fillStyle","strokeStyle","lineWidth","lineDash","shadowBlur","shadowColor","defaultValue","_a","keyParts","lastKeyPart","pop","curr","MetricsDefaults","retVal","keyPart","Map","fontFamily","fontSize","fontScale","fontWeight","fontStyle","Accidental","cautionary","grace","noteheadAccidentalPadding","leftPadding","accidentalSpacing","Annotation","Bend","ChordSymbol","spacing","subscriptOffset","superscriptOffset","superSubRatio","FretHandFinger","GraceTabNote","NoteHead","minPadding","PedalMarking","Repetition","offsetX","offsetY","coda","segno","Stave","padding","endPaddingMax","endPaddingMin","unalignedNotePadding","StaveConnector","StaveLine","StaveSection","StaveTempo","glyph","name","StaveText","StaveTie","Stem","StringNumber","verticalPadding","stemPadding","rightPadding","Stroke","TabSlide","TabStave","TabTie","TextBracket","TextNote","Tremolo","Tuplet","yOffset","textYOffset","Volta","BoundingBox","that","y","w","h","getX","getY","getW","getH","setX","setY","setW","setH","move","mergeWith","boundingBox","newX","newY","newW","max","newH","FontWeight","FontStyle","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","fontParser","Font","convertSizeToPixelValue","scaleToPxFrom","pt","parseFloat","unit","replace","toLowerCase","convertSizeToPointValue","validate","fromCSSString","NORMAL","cssFontShorthand","document","createElement","toCSSString","fontInfo","st","trim","wt","sz","scaleSize","scaleFactor","isBold","parsedWeight","isItalic","ITALIC","load","fontName","url","descriptors","FontFace","files","FILES","HOST_URL","fontFace","fontFaceLoadPromise","fontFaceSet","fonts","getURLForFont","px","em","in","mm","cm","Academico","Bravura","Edwin","Gonville","Gootville","Leipzig","Leland","MuseJazz","Nepomuk","Petaluma","Sebastian","Index","id","type","class","Registry","getDefaultRegistry","defaultRegistry","enableDefaultRegistry","registry","disableDefaultRegistry","index","setIndexValue","elem","updateIndex","oldValue","getElementById","getAttribute","register","setAttribute","onRegister","_b","getElementsByAttribute","attribute","indexAttr","indexAttrVal","keys","map","k","getElementsByType","getElementsByClass","className","onUpdate","info","includes","Element","newID","ID","setTextMeasurementCanvas","canvas","txtCanvas","getTextMeasurementCanvas","OffscreenCanvas","children","_text","metricsValid","_textMetrics","fontBoundingBoxAscent","fontBoundingBoxDescent","actualBoundingBoxAscent","actualBoundingBoxDescent","actualBoundingBoxLeft","actualBoundingBoxRight","width","alphabeticBaseline","emHeightAscent","emHeightDescent","hangingBaseline","ideographicBaseline","_height","_width","xShift","yShift","attrs","rendered","_fontInfo","addChild","child","parent","push","getCategory","setStyle","setGroupStyle","forEach","applyStyle","context","setShadowColor","setShadowBlur","setFillStyle","setStrokeStyle","setLineWidth","setLineDash","drawWithStyle","ctx","checkContext","save","draw","restore","hasClass","indexOf","addClass","removeClass","splice","isRendered","setRendered","getAttributes","getSVGElement","suffix","element","oldID","getBoundingBox","textMetrics","height","getContext","setContext","setFont","defaultTextFont","fontIsObject","fontIsString","sizeWeightStyleAreUndefined","assign","getFont","setFontSize","getFontSize","getFontScale","fontSizeInPoints","fontSizeInPixels","getWidth","measureText","setWidth","setYShift","getYShift","setXShift","getXShift","setText","getText","renderText","xPos","yPos","fillText","warn","measureWidth","getTextMetrics","getHeight","setOriginX","bbox","setOriginY","setOrigin","ModifierPosition","Glyphs","Modifier","Position","PositionString","center","CENTER","above","ABOVE","below","BELOW","left","LEFT","right","RIGHT","textLine","position","spacingFromNextModifier","reset","getNote","note","checkAttachedNote","setNote","getIndex","checkIndex","setIndex","getModifierContext","modifierContext","checkModifierContext","setModifierContext","c","getPosition","setPosition","setTextLine","setSpacingFromNextModifier","getSpacingFromNextModifier","alignSubNotesWithNote","subNotes","tickContext","getTickContext","metrics","getMetrics","stave","getStave","subNoteXOffset","modLeftPx","modRightPx","subNote","subTickContext","setStave","setXOffset","Music","NUM_TONES","canonicalNotes","roots","rootValues","rootIndexes","diatonicIntervals","diatonicAccidentals","unison","accidental","m2","M2","m3","M3","p4","dim5","p5","m6","M6","b7","M7","octave","intervals","b2","min2","S","H","maj2","T","W","b3","min3","maj3","b5","aug4","b6","aug5","maj6","m7","min7","dom7","maj7","scales","major","minor","ionian","dorian","phyrgian","lydian","mixolydian","aeolian","locrian","scaleTypes","M","m","accidentals","noteValues","rootIndex","intVal","cn","cb","cbb","dn","db","dbb","en","eb","ebb","fn","fb","fbb","gn","gb","gbb","an","ab","abb","bn","bb","bbb","isValidNoteValue","isValidIntervalValue","interval","getNoteParts","noteString","match","exec","getKeyParts","keyString","getNoteValue","getIntervalValue","intervalString","getCanonicalNoteName","noteValue","getCanonicalIntervalName","intervalValue","getRelativeNoteValue","direction","sum","getRelativeNoteName","parts","rootValue","multiplier","reverseInterval","relativeNoteName","getScaleTones","tones","nextNote","getIntervalBetween","note1","note2","difference","createScaleMap","keySignature","keySigParts","scaleName","keySigString","scale","noteLocation","scaleMap","rootName","noteName","RESOLUTION","durations","durationAliases","keySignatures","C","num","Am","F","Dm","Bb","Gm","Eb","Cm","Ab","Fm","Db","Bbm","Gb","Ebm","Cb","Abm","G","Em","D","Bm","A","E","B","clefs","treble","lineShift","bass","tenor","alto","soprano","percussion","subbass","french","notesInfo","CN","CB","CBB","DN","DB","DBB","EN","EB","EBB","FN","FB","FBB","GN","GB","GBB","AN","AB","ABB","BN","BB","BBB","R","X","accidentalSharp","accidentalDoubleSharp","accidentalFlat","accidentalDoubleFlat","accidentalNatural","accidentalParensLeft","accidentalParensRight","accidentalThreeQuarterTonesFlatZimmermann","accidentalQuarterToneFlatStein","accidentalThreeQuarterTonesSharpStein","accidentalQuarterToneSharpStein","accidentalKucukMucennebSharp","bs","accidentalBakiyeFlat","bss","accidentalBuyukMucennebFlat","accidentalSori","accidentalKoron","bbs","accidentalBuyukMucennebSharp","ashs","afhf","articulations","augmentationDot","betweenLines","av","aboveCode","articStaccatissimoAbove","belowCode","articStaccatissimoBelow","articAccentAbove","articAccentBelow","articTenutoAbove","articTenutoBelow","articMarcatoAbove","articMarcatoBelow","pluckedLeftHandPizzicato","ao","pluckedSnapPizzicatoAbove","pluckedSnapPizzicatoBelow","ah","stringsHarmonic","fermataAbove","fermataBelow","fermataShortAbove","fermataShortBelow","fermataLongAbove","fermataLongBelow","fermataVeryLongAbove","fermataVeryLongBelow","stringsUpBow","am","stringsDownBow","pictChokeCymbal","ornaments","mordent","ornamentShortTrill","mordentInverted","ornamentMordent","turn","ornamentTurn","turnInverted","ornamentTurnSlash","tr","ornamentTrill","upprall","ornamentPrecompSlideTrillDAnglebert","downprall","ornamentPrecompDoubleCadenceUpperPrefix","prallup","ornamentPrecompTrillSuffixDandrieu","pralldown","ornamentPrecompTrillLowerSuffix","upmordent","ornamentPrecompSlideTrillBach","downmordent","ornamentPrecompDoubleCadenceUpperPrefixTurn","lineprall","ornamentPrecompAppoggTrill","prallprall","ornamentTremblement","scoop","brassScoop","doit","brassDoitMedium","fall","brassFallLipShort","doitLong","brassLiftMedium","fallLong","brassFallRoughMedium","bend","brassBend","plungerClosed","brassMuteClosed","plungerOpen","brassMuteOpen","flip","brassFlip","jazzTurn","brassJazzTurn","smear","brassSmear","Tables","clefProperties","clef","keyProperties","keyOctaveGlyph","params","options","octaveShift","duration","sanitizeDuration","pieces","toUpperCase","intValue","glyphName","codeNoteHead","displaced","integerToNote","integer","textWidth","articulationCodes","artic","accidentalCodes","ornamentCodes","ornament","spec","keySpec","notes","accList","getKeySignatures","hasKeySignature","durationNumber","durationToFraction","durationToNumber","durationToTicks","ticks","noteheadDiamondWhole","noteheadDiamondHalf","noteheadDiamondBlack","noteheadTriangleUpWhole","noteheadTriangleUpHalf","noteheadTriangleUpBlack","noteheadXWhole","noteheadXHalf","noteheadXBlack","noteheadCircleX","noteheadSquareWhite","noteheadSquareBlack","noteheadMoonBlack","noteheadTriangleLeftBlack","noteheadTriangleRightBlack","noteheadBlack","noteheadTriangleRoundDownBlack","noteheadDiamondDoubleWhole","noteheadXDoubleWhole","noteheadCircleXDoubleWhole","noteheadCircleXWhole","noteheadCircleXHalf","noteheadCircledDoubleWhole","noteheadCircledWhole","noteheadCircledHalf","noteheadCircledBlack","noteheadDoubleWholeSquare","noteheadTriangleUpDoubleWhole","noteheadTriangleDownDoubleWhole","noteheadTriangleDownWhole","noteheadTriangleDownHalf","noteheadTriangleDownBlack","noteheadSlashedDoubleWhole1","noteheadSlashedWhole1","noteheadSlashedHalf1","noteheadSlashedBlack1","noteheadSlashedDoubleWhole2","noteheadSlashedWhole2","noteheadSlashedHalf2","noteheadSlashedBlack2","restDoubleWhole","restWhole","restHalf","restQuarter","rest8th","rest16th","rest32nd","rest64th","rest128th","noteheadSlashWhiteDoubleWhole","noteheadSlashWhiteWhole","noteheadSlashWhiteHalf","noteheadSlashVerticalEnds","noteheadDoubleWhole","noteheadWhole","noteheadHalf","null","L","DEBUG","UNISON","SOFTMAX_FACTOR","STEM_WIDTH","STEM_HEIGHT","STAVE_LINE_THICKNESS","RENDER_PRECISION_PLACES","durationCodes","stem","beamCount","stemBeamExtension","codeFlagUp","flag8thUp","flag16thUp","flag32ndUp","flag64thUp","flag128thUp","NOTATION_FONT_SCALE","TABLATURE_FONT_SCALE","SLASH_NOTEHEAD_WIDTH","STAVE_LINE_DISTANCE","TEXT_HEIGHT_OFFSET_HACK","accidentalColumnsTable","secondOnBottom","spacedOutTetrachord","spacedOutPentachord","verySpacedOutPentachord","spacedOutHexachord","verySpacedOutHexachord","unicode","sharp","flat","natural","triangle","degrees","circle","validTypes","r","ci","cx","sf","sb","sq","tu","td","TIME4_4","numBeats","beatValue","resolution","format","state","leftShift","additionalPadding","accidentalLinePositionsAndSpaceNeeds","prevNote","extraXSpaceNeededForLeftDisplacedNotehead","props","getKeyProps","getLeftDisplacedHeadPx","lineSpace","getSpacingBetweenLines","getYForLine","accLine","round","extraXSpaceNeeded","spacingBetweenStaveLines","sort","staveLineAccidentalLayoutMetrics","maxExtraXSpaceNeeded","accidentalLinePositionAndSpaceNeeds","accidentalType","priorLineMetric","currentLineMetric","flatLine","dblSharpLine","numAcc","column","totalColumns","noFurtherConflicts","groupStart","groupEnd","checkCollision","getGroupLine","getGroupLines","indexes","lineDifference","indexA","indexB","item","notColliding","indexPairs","every","line1","line2","groupLength","groupMember","endCase","patternLength","collisionDetected","columnWidths","columnXOffsets","totalShift","accCount","lastAccOnLine","clearance","clearanceRequired","collision","applyAccidentals","voices","tickPositions","tickNoteMap","voice","tickPosition","getTickables","shouldIgnoreTicks","notesAtPosition","getTicks","music","scaleMapKey","tickPos","tickables","modifiedPitches","processNote","isRest","staveNote","keyIndex","accidentalString","pitch","sameAccidental","previouslyModified","getModifiers","modifier","addModifier","GraceNoteGroup","getGraceNotes","setAsCautionary","start","getModifierStartXY","UP","DOWN","WIDTH","HEIGHT","_c","_d","_e","_f","_g","stemUpYOffset","stemDownYOffset","stemUpYBaseOffset","stemDownYBaseOffset","xBegin","xEnd","yTop","yBottom","stemExtension","stemDirection","hide","isStemlet","stemletHeight","renderHeightAdjustment","setOptions","setNoteHeadXBounds","setDirection","setExtension","ext","getExtension","setYBounds","getExtents","isStemUp","ys","stemHeight","innerMostNoteheadY","min","outerMostNoteheadY","topY","baseY","setVisibility","isVisible","setStemlet","adjustHeightForFlag","adjustHeightForBeam","stemX","stemY","yBaseOffset","stemletYOffset","openGroup","beginPath","moveTo","lineTo","stroke","closeGroup","AnnotationHorizontalJustify","AnnotationVerticalJustify","minAnnotationPadding","annotations","leftWidth","rightWidth","maxLeftGlyphWidth","maxRightGlyphWidth","annotation","verticalSpaceNeeded","glyphWidth","getGlyphWidth","horizontalJustification","hasStem","getStemDirection","lines","renderOptions","drawStem","getStem","getNoteType","getNumLines","verticalJustification","VerticalJustify","TOP","noteLine","getLineNumber","leastString","topTextLine","BOTTOM","greatestString","curBottom","rightOverlap","rightShift","leftOverlap","setVerticalJustification","just","VerticalJustifyString","getJustification","setJustification","HorizontalJustifyString","textHeight","getStemX","stemExt","checkStave","checkStem","getYs","yt","getYForTopText","getYForBottomText","getTopLineTopY","extents","getStemExtents","HorizontalJustify","centerStem","CENTER_STEM","top","bottom","roundToNearestHalf","mathFn","isWithinLines","getRoundingFunction","ceil","isStaveOrGraceNote","getTopY","stemTipY","stemBaseY","getBottomY","getInitialOffset","isOnStemTip","Articulation","maxGlyphWidth","getIncrement","articulation","increment","curTop","maxWidth","articWidth","overlap","easyScoreHook","builder","articNameToCode","staccato","tenuto","accent","articString","getFactory","heightShift","codePointAt","setBetweenLines","canSitBetweenLines","staffSpace","isTab","shouldSitOutsideStaff","initialOffset","INITIAL_OFFSET","offsetDirection","articLine","snappedLine","snapLineToStaff","RenderContext","Tickable","_preFormatted","_postFormatted","intrinsicTicks","tickMultiplier","modifiers","tupletStack","alignCenter","centerXShift","ignoreTicks","formatterMetrics","freedom","iterations","space","used","mean","deviation","setIgnoreTicks","flag","checkTickContext","getFormatterMetrics","getCenterXShift","isCenterAligned","setCenterXShift","setCenterAlignment","getVoice","setVoice","getTuplet","tuplet","getTupletStack","resetTuplet","noteCount","notesOccupied","getNoteCount","getNotesOccupied","applyTickMultiplier","setTuplet","addToModifierContext","mc","addMember","setTickContext","tc","preFormat","preFormatted","postFormat","postFormatted","getIntrinsicTicks","setIntrinsicTicks","getTickMultiplier","setDuration","getAbsoluteX","getGlyphProps","codeHead","plotMetrics","xStart","leftDisplacedHeadPx","xPre1","xAbs","xPost1","notePx","xPost2","rightDisplacedHeadPx","xFreedomRight","xWidth","x1","x2","color","yy","arc","closePath","fill","drawDot","spaceDeviation","parseDuration","durationString","dots","parseNoteStruct","noteStruct","durationProps","customTypes","currentTicks","parsedNoteStruct","JSON","stringify","keyProps","noteType","durationOverride","glyphProps","customGlyphs","playNote","annotationSpacing","strokePx","getPlayNote","setPlayNote","addStroke","setYs","getRightDisplacedHeadPx","setLeftDisplacedHeadPx","setRightDisplacedHeadPx","isTopNote","getLineForRest","getDuration","isDotted","getModifiersByType","Dot","getBeam","beam","checkBeam","hasBeam","setBeam","signature","filter","getRightParenthesisPx","getLeftParenthesisPx","getFirstDotPx","parentheses","getMembers","getState","glyphPx","getNoteStartX","getTieRightX","tieStartX","getTieLeftX","tieEndX","getKeys","StaveModifierPosition","BarlineType","ChordSymbolHorizontalJustify","ChordSymbolVerticalJustify","SymbolModifiers","StaveModifier","getPadding","setPadding","setLayoutMetrics","layoutMetrics","getLayoutMetrics","typeString","single","SINGLE","double","DOUBLE","end","END","repeatBegin","REPEAT_BEGIN","repeatEnd","REPEAT_END","repeatBoth","REPEAT_BOTH","none","NONE","thickness","TYPE","widths","paddings","layoutMetricsMap","xMin","xMax","paddingLeft","paddingRight","BEGIN","setType","getType","drawVerticalBar","drawVerticalEndBar","drawRepeatBar","doubleBar","staveCtx","botY","getBottomLineBottomY","fillRect","begin","dotX","dotRadius","dotY","BarNote","barline","bends","lastWidth","stringPos","setStyleLine","styleLine","getStyleLine","phrase","tap","bendWidth","releaseWidth","updateWidth","setTap","getTextHeight","totalWidth","additionalWidth","drawWidth","lowestY","bendHeight","annotationY","renderBend","cpX","cpY","quadraticCurveTo","renderRelease","renderArrowHead","yBase","renderX","lastBend","lastBendDrawWidth","lastDrawnWidth","ChordSymbolBlock","symbolModifier","vAlign","isSuperscript","SUPERSCRIPT","isSubscript","SUBSCRIPT","spacingBetweenBlocks","symbols","symbol","lineSpaces","j","symbolBlocks","sup","sub","prev","getVertical","getReportWidth","getHorizontal","horizontal","vertical","reportWidth","setReportWidth","getSymbolBlock","symbolBlock","smallerFontSize","addSymbolBlock","parameters","addText","addTextSuperscript","addTextSubscript","addGlyphSuperscript","glyphs","addGlyph","addGlyphOrText","char","addLine","setVertical","vj","setHorizontal","hj","stemBase","diminished","csymDiminished","dim","halfDiminished","csymHalfDiminished","csymAugmented","augmented","majorSeventh","csymMajorSeventh","csymMinor","leftParen","rightParen","leftBracket","csymBracketLeftTall","rightBracket","csymBracketRightTall","leftParenTall","rightParenTall","csymDiagonalArrangementSlash","over","csymAccidentalSharp","csymAccidentalFlat","symbolModifiers","getDots","buildAndAttach","all","dot","dotList","maxShiftMap","noteId","dotShift","lastLine","lastNote","prevDottedSpace","halfShiftY","dotShiftY","setDotShiftY","forceFlagRight","nums","numsList","shiftLeft","shiftRight","pos","shiftL","shiftR","numShiftL","numShiftR","xWidthL","xWidthR","numShift","numWidth","fingerings","fingeringString","number","Fingering","fingering","finger","setFretHandFinger","xOffset","getFretHandFinger","setOffsetX","setOffsetY","customGlyph","ledger","customGlyphCode","slashed","isDisplaced","getLine","setLine","displacementStemAdjustment","getYForNote","drawModifiers","Flag","setStem","buildStem","buildFlag","hasFlag","flagCode","String","fromCodePoint","getBaseCustomNoteHeadGlyphProps","getStemLength","getStemExtension","getBeamCount","getStemMinimumLength","frac","beamIsUndefined","setStemDirection","getCenterGlyphX","flagHeight","stemExtensionOverride","setStemLength","stemOptions","shiftRestVertical","rest","dir","delta","maxLine","minLine","setKeyLine","getKeyLine","LEDGER_LINE_OFFSET","minNoteheadPadding","notesList","sortedKeyProps","minL","stemMax","stemMin","maxL","_noteHeads","isrest","voiceShift","getVoiceShiftWidth","noteU","noteM","noteL","voiceXShift","lineSpacing","lineDiff","noteUHead","noteLHead","centerRest","ledgerLineStyle","useDefaultHeadX","calculateKeyProps","autoStem","noteHeadStyles","noteHead","buildNoteHeads","noteHeadStyle","calcNoteDisplacements","noteProps","notehead","calculateOptimalStemDirection","getNoteHeadBounds","noteStemHeight","bbFlag","resultLine","thisLine","val","isChord","setNoteDisplaced","getRightShift","restLine","isInnerNoteIndex","restShift","setStemStyle","getStemStyle","setLedgerLineStyle","getLedgerLineStyle","setFlagStyle","getFlagStyle","noteHeads","setKeyStyle","noteHeadPadding","shouldDrawFlag","nonDisplacedX","displacedX","highestDisplacedLine","lowestDisplacedLine","Infinity","highestLine","lowestLine","highestNonDisplacedLine","lowestNonDisplacedLine","getNoteHeadBeginX","getNoteHeadEndX","drawLedgerLines","doubleWidth","minX","drawLedgerLine","normal","ledgerWidth","getDefaultLedgerLineStyle","noteheadParam","hasNoBeam","drawFlag","flagX","flagY","drawNoteHeads","superStemExtension","midLineDistance","linesOverOctaveFromMidLine","spacingBetweenLines","shouldRenderStem","pointerRect","setNotes","cp1","cp2","shortTieCutoff","cp1Short","cp2Short","textShiftX","firstXShift","lastXShift","tieSpacing","getDirection","firstNote","firstIndexes","lastIndexes","isPartial","renderTie","firstYs","lastYs","lastX","firstX","firstY","lastY","topControlPointY","bottomControlPointY","renderTieText","centerX","getNotes","getFirstX","getTieStartX","getLastX","getTieEndX","getFirstYs","getLastYs","synchronizeIndexes","createHammeron","createPulloff","VoiceMode","Voice","Mode","time","voiceTime","resolutionMultiplier","mode","STRICT","ticksUsed","largestTickWidth","softmaxFactor","totalTicks","smallestTickCount","getTotalTicks","getTicksUsed","getLargestTickWidth","getSmallestTickCount","getMode","setMode","getResolutionMultiplier","getActualResolution","tickable","setStrict","strict","SOFT","isComplete","FULL","setSoftmaxFactor","factor","expTicksUsed","reCalculateExpTicksUsed","pow","softmax","tickValue","v","exp","addTickable","addTickables","gracenoteGroups","groupList","gracenoteGroup","isStavenote","formatWidth","groupShift","graceNotes","showSlur","slur","slurYShift","beams","formatter","Formatter","joinVoices","getMinTotalWidth","beamNotes","Beam","beamWidth","partialBeamLength","graceNote","TieClass","NoteSubGroup","groups","group","Ornament","numLines","ornamentNoteTransition","ornamentAttack","ornamentAlignWithNoteHead","ornamentRelease","ornamentLeft","ornamentRight","ornamentYShift","ornamentArticulation","delayed","accidentalLowerPadding","accidentalUpperPadding","adjustForStemDirection","setDelayed","setUpperAccidental","accid","accidentalUpper","setLowerAccidental","accidentalLower","glyphX","glyphY","delayXShift","startX","nextContext","charCodeAt","Parenthesis","parenthesis","isHTMLCanvas","global","HTMLCanvasElement","toDataURL","CanvasContext","CANVAS_BROWSER_SIZE_LIMIT","sanitizeCanvasDims","limit","err","stack","context2D","curTransfrom","getTransform","clearRect","cls","openRotation","angleDegrees","translate","rotate","closeRotation","setTransform","setBackgroundFillStyle","blur","sqrt","setLineCap","capType","lineCap","dash","resize","devicePixelRatio","dpr","rect","bezierCurveTo","cp1x","cp1y","cp2x","cp2y","cpx","cpy","radius","startAngle","endAngle","counterclockwise","ATTRIBUTES_TO_IGNORE","path","TWO_PI","SVGContext","precision","backgroundFillStyle","fontCSSString","svg","create","appendChild","pen","NaN","defaultFontAttributes","scaleX","scaleY","attributes","groupAttributes","applyAttributes","stateStack","svgElementType","createElementNS","visibleWidth","visibleHeight","setViewBox","viewBoxOrMinX","minY","viewBoxString","attrNamesToIgnore","nodeName","attrName","setAttributeNS","lastChild","removeChild","rectangle","opacity","y1","y2","x0","cos","y0","sin","tmpStartTest","tmpEndTest","large","sweep","getShadowStyle","measureTextElement","txt","textContent","savedState","fontAttributes","RendererBackends","RendererLineEndType","TextJustification","VoltaType","Renderer","buildContext","elementId","backend","background","renderer","lastContext","getCanvasContext","Backends","CANVAS","getSVGContext","SVG","drawDashedLine","fromX","fromY","toX","toY","dashPattern","dx","dy","angle","atan2","idx","dashLength","nx","ny","arg0","arg1","maybeElement","willReadFrequently","HTMLDivElement","isHTMLDiv","LineEndType","extraXSpaceForDisplacedNotehead","glyphLine","numXShift","stringNumber","stemOffset","dashed","leg","drawCircle","setLineEndType","setStringNumber","setLastNote","setDashed","setDrawCircle","len","pattern","strokes","strokeList","string","getPositions","strokeShift","allVoices","addEndNote","noteEnd","yPositions","arrow","arrowY","textY","Type","BRUSH_DOWN","ROLL_DOWN","RASGUEADO_DOWN","arrowheadBlackUp","BRUSH_UP","ROLL_UP","RASGUEADO_UP","arrowheadBlackDown","ARPEGGIO_DIRECTIONLESS","lineGlyph","wiggleArpeggiatoDown","wiggleArpeggiatoUp","el","Vibrato","vibratos","vibrato","setVibratoWidth","myWidth","items","setVibratoCode","vx","vy","ModifierContext","members","formatted","member","getLeftShift","Clef","types","gClef","fClef","cClef","unpitchedPercussionClef1","sixStringTabClef","tab","gClef8va","fClef8va","gClef8vb","fClef8vb","getPoint","KeySignature","cancelKeySpec","alterKeySpec","setKeySig","paddingForced","convertToGlyph","acc","nextAcc","extraWidth","prevGlyph","isNatural","yShiftDiff","el1","el2","cancelKey","convertToCancelAccList","cancelAccList","differentTypes","naturals","cancelled","concat","addToStave","calculateDimensions","convertAccLines","customLines","offset","alterKey","convertToAlterAccList","firstAccidentalType","getEndClef","getClef","symbolType","setShiftX","setShiftY","getModifierXShift","CODA_RIGHT","drawCodaFixed","CODA_LEFT","drawSymbolText","SEGNO_LEFT","drawSegnoFixed","SEGNO_RIGHT","DC","DC_AL_CODA","DC_AL_FINE","DS","DS_AL_CODA","DS_AL_FINE","FINE","TO_CODA","drawCoda","textX","getVerticalBarWidth","section","drawRect","setDrawRect","headroom","tempo","shiftY","durationToCode","metNoteDoubleWholeSquare","long","metNoteDoubleWhole","breve","metNoteWhole","whole","metNoteHalfUp","half","metNoteQuarterUp","quarter","metNote8thUp","eighth","metNote16thUp","metNote32ndUp","metNote64thUp","metNote128thUp","metNote256thUp","metNote512thUp","metNote1024thUp","setTempo","shiftX","bpm","duration2","dots2","elText","metAugmentationDot","GLYPHS","mordentUpper","mordentLower","dynamicForte","p","dynamicPiano","dynamicMezzo","dynamicSforzando","z","dynamicZ","pedalOpen","keyboardPedalPed","pedalClose","keyboardPedalUp","caesuraStraight","caesura","caesuraCurved","breath","breathMarkComma","tick","breathMarkTick","superscript","subscript","smooth","justification","Justification","getBottomLineY","label","vertHeight","BEGIN_END","TimeSignature","timeSpec","customPadding","validateArgs","isNumeric","topStartX","botStartX","topText","botText","topLine","bottomLine","setTimeSig","getTimeSigCode","smallSig","timeSigCommon","timeSigCutCommon","timeSigPlusSmall","timeSigPlus","timeSigMinus","timeSigParensLeftSmall","timeSigParensLeft","timeSigParensRightSmall","timeSigParensRight","makeTimeSignatureGlyph","topDigits","botDigits","topWidth","botWidth","test","assertIsValidTimeSig","getTimeSpec","getIsNumeric","setIsNumeric","drawAt","SORT_ORDER_BEG_MODIFIERS","SORT_ORDER_END_MODIFIERS","defaultPadding","endX","measure","endClef","verticalBarWidth","leftBar","rightBar","spacingBetweenLinesPx","spaceAboveStaffLn","spaceBelowStaffLn","topTextPosition","bottomTextPosition","lineConfig","bounds","defaultLedgerLineStyle","resetLines","addEndModifier","setDefaultLedgerLineStyle","visible","setNoteStartX","getNoteEndX","setNumLines","mod","setMeasure","getMeasure","begBarline","setRepetitionType","setVoltaType","setSection","staveSection","setStaveText","getLineForY","getYForGlyphs","setBegBarType","setEndBarType","setClef","clefSpec","addClef","setEndClef","setKeySignature","addKeySignature","setEndKeySignature","setTimeSignature","timeSignatures","addTimeSignature","setEndTimeSignature","addEndClef","addEndTimeSignature","addTrebleGlyph","noPosition","noCategory","sortByCategory","order","temp","endBarline","begModifiers","endModifiers","lastBarlineIdx","lineWidthCorrection","getConfigForLines","setConfigForLine","lineNumber","setConfigForLines","linesConfiguration","formatBegModifiers","staves","adjustCategoryStartX","minStartX","adjustX","allModifiers","bAdjust","maxX","drawBoldDoubleLine","topX","BOLD_DOUBLE_LEFT","BOLD_DOUBLE_RIGHT","variableWidth","topStave","bottomStave","texts","newType","values","textElement","SINGLE_RIGHT","THIN_DOUBLE","attachmentHeight","SINGLE_LEFT","BRACE","x3","y3","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","BRACKET","bracketTop","bracketBottom","singleRight","singleLeft","brace","bracket","boldDoubleLeft","boldDoubleRight","thinDouble","TickContext","getNextContext","tContext","contexts","tContexts","tickID","currentTick","maxTicks","maxTickable","minTicks","minTickable","xBase","tickablesByVoice","totalLeftPx","totalRightPx","getTickID","getXBase","setXBase","getXOffset","getMaxTicks","getMinTicks","getMaxTickable","getMinTickable","getTickableForVoice","voiceIndex","getTickablesByVoice","getCenterAlignedTickables","getCurrentTick","setCurrentTick","getDeviationCost","getAverageDeviationCost","getRestLineForNextNoteGroup","currRestLine","currNoteIndex","nextRestLine","noteIndex","SimpleFormat","paddingBetween","accumulator","plotDebugging","stavePadding","contextGaps","gaps","gap","totalCost","toFixed","total","FormatAndDraw","autoBeam","alignRests","applyAndGetBeams","formatToStave","FormatAndDrawTab","tabstave","tabnotes","opts","notevoice","tabvoice","AlignRestsToNotes","alignAllNotes","alignTuplets","currTickable","prevTickable","formatterOptions","globalSoftmax","maxIterations","justifyWidth","durationStats","minTotalWidth","hasMinTotalWidth","tickContexts","array","list","modifierContexts","lossHistory","preCalculateMinTotalWidth","unalignedPadding","unalignedCtxCount","wsum","dsum","createTickContexts","contextList","contextMap","wavg","wvar","ll","wpads","davg","dvar","dpads","padmax","unalignedPad","createModifierContexts","tickToContextMap","integerTicks","staveTickToContextMap","newContext","makeContext","addToContext","tickList","createContexts","contextArray","getTickContexts","renderingContext","voicesParam","evaluate","firstContext","calculateIdealDistances","adjustedJustifyWidth","backTickable","prevContext","backVoices","matchingVoices","maxNegativeShiftPx","expectedDistance","thisTickable","insideLeftEdge","backMetrics","insideRightEdge","fromTickable","fromTickablePx","shiftToIdealDistances","idealDistances","spaceAccum","contextX","ideal","errorPx","negativeShiftPx","configMinPadding","configMaxPadding","targetWidth","distances","actualWidth","minDistance","mdCalc","di","calcMinDistance","paddingMaxCalc","curTargetWidth","lastTickablePadding","lastTickable","tickWidth","paddingMax","paddingMin","prevTick","prevMetrics","currMetrics","leftNoteEdge","rightNote","rightMetrics","stats","count","updateStats","totalDeviation","tune","alpha","cost","optionsParam","TupletLocation","LOCATION_TOP","LOCATION_BOTTOM","NESTING_OFFSET","numNotes","bracketed","some","ratioed","location","setTupletLocation","resolveGlyphs","attach","detach","setBracketed","setRatioed","setNotesOccupied","fromCharCode","tupletColon","getNestedTupletCount","maxTupletCount","countTuplets","minTupletCount","tupletCount","getYPosition","nestedTupletYOffset","yPosition","modLines","modY","lineCheck","nn","bottomY","notationStartX","calculateStemDirection","lineSum","keyProp","BEAM_LEFT","BEAM_BOTH","_stemDirection","getDefaultBeamGroups","timeSig","beatTotal","generateBeams","config","tickGroups","unprocessedNotes","currentTickGroup","noteGroups","currentGroup","nextTickGroup","nextGroup","currentGroupTotalTicks","unprocessedNote","ticksPerGroup","memo","unbeamable","createGroups","sanitizedGroups","tempGroup","isFirstOrLast","breaksOnEachRest","beamRests","breaksOnFirstOrLastRest","beamMiddleOnly","breakOnStemChange","maintainStemDirections","prevDirection","isUnbeamableDuration","sanitizeGroups","findFirstNote","applyStemDirection","beamedNoteGroups","beamable","allTuplets","uniqueTuplets","noteTuplet","getTuplets","showStemlets","secondaryBreaks","secondaryBreakTicks","flatBeams","flatBeamOffset","slope","forcedPartialDirections","_ticks","stemWeight","_beamCount","breakOnIndexes","maxSlope","minSlope","slopeIterations","slopeCost","stemletExtension","minFlatBeamOffset","breakSecondaryAt","setPartialBeamSideAt","side","unsetPartialBeamSideAt","getSlopeY","calculateSlope","initialSlope","firstStemTipY","firstStemX","getStemSlope","minCost","MAX_VALUE","bestSlope","totalStemExtension","yShiftTemp","adjustedStemTipY","diff","idealSlope","calculateFlatSlope","extremeY","extremeBeamCount","currentExtreme","extremeTest","newOffset","getBeamYToDraw","beamY","applyStemExtensions","beamedStemTipY","preBeamExtension","beamExtension","crossStemExtension","totalBeamWidth","lookupBeamDirection","nextTick","forcedBeamDirection","lookupDuration","prevNoteGetsBeam","nextNoteGetsBeam","noteGetsBeam","getBeamLines","tickOfDuration","beamStarted","beamLines","currentBeam","previousShouldBreak","tickTally","shouldBreak","beamAlone","beamDirection","lastBeam","drawStems","drawBeamLines","validBeamDurations","beamThickness","beamLine","startBeamX","startBeamY","lastBeamX","lastBeamY","ClefNote","Crescendo","extendLeft","extendRight","decrescendo","setHeight","setDecrescendo","decresc","beginX","halfHeight","reverse","renderHairpin","CurvePosition","Curve","nearHead","NEAR_HEAD","nearTop","NEAR_TOP","from","to","positionEnd","invert","cps","openingDirection","renderCurve","cp0x","cp0y","controlPointSpacing","metric","endMetric","Parser","flattenMatches","matchedString","results","grammar","errorPos","expect","matchFail","returnPos","matchSuccess","matchToken","token","noSpace","regexp","RegExp","success","incrementPos","expectOne","rule","maybe","allMatches","oneMatch","localPos","or","gotOne","numMatches","expectOneOrMore","more","expectZeroOrMore","ruleFunc","bind","oneOrMore","zeroOrMore","matches","run","EasyScore","EasyScoreGrammar","LINE","PIECE","PIECES","EOL","CHORDORNOTE","PARAMS","commitPiece","COMMA","DURATION","DOTS","OPTS","CHORD","SINGLENOTE","LPAREN","NOTES","RPAREN","addChord","NOTE","NOTENAME","ACCIDENTAL","OCTAVE","addSingleNote","MICROTONES","ACCIDENTALS","DOT","setNoteDots","SLASH","MAYBESLASH","TYPES","setNoteType","DURATIONS","setNoteDuration","LBRACKET","KEYVAL","KEYVALS","RBRACKET","KEY","EQUALS","VAL","addNoteOption","SVAL","DVAL","Piece","chord","Builder","commitHooks","elements","rollingDuration","resetPiece","getElements","addCommitHook","commitHook","piece","addNote","standardAccidentals","notePiece","GhostNote","setId","commaSeparatedRegex","setClass","defaults","throwOnError","parser","ERROR_MSG","parameter","GlyphNote","setGlyph","slash","ret","slashBBox","calcBeamedNotesSlashBBox","noteHeadBounds","noteHeadWidth","defaultOffsetY","slashStemOffset","slashBeamOffset","protrusions","beamSlope","beamAngle","atan","iPointOnBeam","slashAngle","protrusionStemDeltaX","protrusionStemDeltaY","protrusionBeamDeltaX","protrusionBeamDeltaY","stem0X","KeySigNote","MultiMeasureRest","numberOfMeasures","xs","hasPaddingLeft","hasPaddingRight","hasLineThickness","hasSymbolSpacing","numberGlyphPoint","digit","lineThickness","symbolSpacing","useSymbols","showNumber","numberLine","serifThickness","semibreveRestGlyphScale","getXs","drawLine","elWidth","drawSymbols","n4","n2","n1","elMiddle","restLonga","elTop","yMiddle","createSustain","createSostenuto","pedal","MIXED","setCustomText","createUnaCorda","TEXT","depressText","pedalDepress","releaseText","pedalRelease","bracketHeight","textMarginRight","bracketLineWidth","depress","release","drawBracketed","prevX","prevY","isPedalDepressed","nextNoteIsSame","prevNoteIsSame","noteNdx","noteEndX","drawText","mixed","CODES","repeat1Bar","repeat2Bars","repeat4Bars","repeatBarSlash","RepeatNote","drawArrowHead","roundedEnd","drawStartArrow","drawEndArrow","arrowheadLength","arrowheadAngle","textPositionVertical","TextVerticalPosition","textJustification","applyLineStyle","drawArrowLine","pt1","pt2","bothArrows","distance","ratio","endY","startY","lineAngle","angle1","angle2","bottomX","startPosition","endPosition","firstIndex","lastIndex","upwardsSlope","noteheadWidth","verticalPosition","System","partStaves","partStaveInfos","partVoices","spaceBetweenStaves","autoWidth","noJustification","debugFormatter","formatIterations","noPadding","details","formatOptions","getStaves","getVoices","addConnector","connector","addStave","staveOptions","spaceAbove","spaceBelow","debugNoteMetrics","addVoices","optionsDetails","debugNoteMetricsYs","part","fretElement","positions","ghost","drawDots","drawStemThroughStave","setGhost","tabToElement","fret","getStemY","stemDownLine","stemStartLine","drawStemThrough","stemThrough","unusedStrings","stringsUsed","getUnusedStringGroups","stemLines","upStem","downStem","totalLines","strings","containsLastString","containsFirstString","lineYs","isTopBound","isBottomBound","getPartialStemLines","drawPositions","tabX","renderStem","addTabGlyph","TextBracketPosition","stop","superscriptElement","showBracket","underlineSuperscript","mainWidth","mainHeight","superY","superWidth","superHeight","lineY","TextDynamics","dynamicRinforzando","sequence","letter","TimeSigNote","VibratoBracket","bracketData","stopX","Factory","newFromElementId","renderQ","systems","initRenderer","staveSpace","ghostNote","textNote","barNote","clefNote","timeSigNote","keySigNote","hJustify","vJustify","chordSymbol","upperAccidental","lowerAccidental","numMeasures","multiMeasureRest","secondaryBeamBreaks","partialBeamDirections","entries","curve","tie","vibratoBracket","textBracket","system","StaveHairpin","FormatByTicksAndDraw","ppt","pixelsPerTick","leftShiftPx","leftShiftTicks","rightShiftPx","rightShiftTicks","hairpinOptions","setRenderOptions","hairpin","dis","staffHeight","CRESC","DECRESC","SLIDE_UP","SLIDE_DOWN","createSlideUp","createSlideDown","firstFret","lastFret","slideY","Tuning","names","standard","dagdad","dropd","standardBanjo","tuningString","tuningValues","setTuning","noteToInteger","getValueForString","stringNum","getValueForFret","fretNum","stringValue","getNoteForFret","VexFlow","loadFonts","fontNames","fontLoadPromises","setFonts","getFonts","BUILD","VERSION","DATE","INFO","KeyManager","setKey","getKey","scaleMapByValue","originalScaleMapByValue","getAccidental","selectNote","scaleNote","modparts","change","valueNote","originalValueNote","tremolo1","ySpacing","Test"],"sourceRoot":""}